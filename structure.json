{
  "lib": {
    "core": {
      "app_export.dart": "export 'package:connectivity_plus/connectivity_plus.dart';\r\nexport '../routes/app_routes.dart';\r\nexport '../widgets/custom_icon_widget.dart';\r\nexport '../widgets/custom_image_widget.dart';\r\nexport '../theme/app_theme.dart';\r\n"
    },
    "custom_inspector.dart": "\r\nimport 'dart:convert';\r\nimport 'dart:html' as html;\r\nimport 'dart:js_interop';\r\n\r\nimport 'package:flutter/gestures.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/rendering.dart';\r\nimport 'package:web/web.dart' as web;\r\n\r\nvar backendURL = \"https://uniconnect3109back.builtwithrocket.new/log-inspected-widget\";\r\n\r\nclass CustomWidgetInspector extends StatefulWidget {\r\n  final Widget child;\r\n\r\n  const CustomWidgetInspector({Key? key, required this.child})\r\n      : super(key: key);\r\n\r\n  @override\r\n  State<CustomWidgetInspector> createState() => _CustomWidgetInspectorState();\r\n}\r\n\r\nclass _CustomWidgetInspectorState extends State<CustomWidgetInspector> {\r\n  RenderObject? _selectedRenderObject;\r\n  Element? _selectedElement;\r\n  final GlobalKey _childKey = GlobalKey();\r\n  bool isInspectorEnabled = false;\r\n\r\n  void _handlePointerEvent(PointerEvent event) {\r\n    if (!isInspectorEnabled) return;\r\n\r\n    if (event is PointerDownEvent) {\r\n      _updateSelection(event.position);\r\n      //_handleTap();\r\n    }\r\n  }\r\n\r\n  void _updateSelection(Offset position) {\r\n    final RenderObject? userRender = _childKey.currentContext?.findRenderObject();\r\n    if (userRender == null) return;\r\n\r\n    final RenderObject? target = _findRenderObjectAtPosition(position, userRender);\r\n\r\n    if (target != null && target != userRender) {\r\n      if (_selectedRenderObject != target) {\r\n        final Element? element = _findElementForRenderObject(target);\r\n        setState(() {\r\n          _selectedRenderObject = target;\r\n          _selectedElement = element;\r\n        });\r\n      }\r\n    } else if (_selectedRenderObject != null) {\r\n      setState(() {\r\n        _selectedRenderObject = null;\r\n        _selectedElement = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  void _handleTap() {\r\n    if (_selectedElement != null && isInspectorEnabled) {\r\n      try {\r\n        var location = _getWidgetLocation(_selectedElement!);\r\n        var widgetName =\r\n        _selectedElement!.widget.runtimeType.toString();\r\n        var parentWidgetName =\r\n        _getParentWidgetType(_selectedElement!);\r\n        var properties =\r\n        _extractWidgetProperties(_selectedElement!);\r\n        if (location.isNotEmpty && widgetName.isNotEmpty) {\r\n          var widgetInfo = <String, dynamic>{};\r\n          widgetInfo['widgetName'] = widgetName;\r\n          widgetInfo['parentWidgetName'] = parentWidgetName;\r\n          widgetInfo['location'] = location;\r\n          widgetInfo['props'] = properties;\r\n          _sendWidgetInformation(widgetInfo);\r\n        }\r\n      } catch (err, st) {\r\n        print(\"Error sending widget info: $err || $st\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    _listenEvent();\r\n    super.initState();\r\n  }\r\n\r\n  _listenEvent() {\r\n    web.window.addEventListener(\r\n        'message',\r\n            (web.Event event) {\r\n          try {\r\n            final messageEvent = event as web.MessageEvent;\r\n            if (messageEvent.data != null) {\r\n              final eventData = messageEvent.data.dartify();\r\n              if (eventData is Map) {\r\n                if (eventData.containsKey('inspectToggle')) {\r\n                  isInspectorEnabled = eventData['inspectToggle'];\r\n                } else if (eventData.containsKey('outsideEventEnabled')) {\r\n                  FocusManager.instance.primaryFocus?.unfocus();\r\n                }\r\n                setState(() {});\r\n              }\r\n            }\r\n          } catch (e) {\r\n            // print('error listening message: $e');\r\n          }\r\n        }.toJS);\r\n  }\r\n\r\n  void _handleHover(PointerHoverEvent event) {\r\n    if (!isInspectorEnabled) return;\r\n\r\n    final RenderObject? userRender = _childKey.currentContext?.findRenderObject();\r\n    if (userRender == null) return;\r\n\r\n    final RenderObject? target = _findRenderObjectAtPosition(event.position, userRender);\r\n\r\n    if (target != null && target != userRender) {\r\n      if (_selectedRenderObject != target) {\r\n        final Element? element = _findElementForRenderObject(target);\r\n        setState(() {\r\n          _selectedRenderObject = target;\r\n          _selectedElement = element;\r\n        });\r\n      }\r\n    } else if (_selectedRenderObject != null) {\r\n      setState(() {\r\n        _selectedRenderObject = null;\r\n        _selectedElement = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Material(\r\n      type: MaterialType.transparency,\r\n      child: NotificationListener<ScrollNotification>(\r\n        onNotification: (notification) {\r\n          if (isInspectorEnabled && _selectedRenderObject != null) {\r\n            setState(() {\r\n              _selectedRenderObject = null;\r\n              _selectedElement = null;\r\n            });\r\n          }\r\n          return false;\r\n        },\r\n        child: Stack(\r\n          children: [\r\n            // Main child widget - no IgnorePointer wrapper\r\n            MouseRegion(\r\n                onExit: (_) {\r\n                  if (isInspectorEnabled) {\r\n                    setState(() {\r\n                      _selectedRenderObject = null;\r\n                      _selectedElement = null;\r\n                    });\r\n                  }\r\n                },\r\n                // onHover: isInspectorEnabled ? _handleHover : null,\r\n                child: KeyedSubtree(\r\n                  key: _childKey,\r\n                  child: Stack(\r\n                    children: [\r\n                      widget.child, // Original UI\r\n                      if (isInspectorEnabled)\r\n                        Positioned.fill(\r\n                          child: Listener(\r\n                            behavior: HitTestBehavior.translucent,\r\n                            onPointerDown: _handlePointerEvent,\r\n                            onPointerHover: _handleHover,\r\n                            onPointerMove: _handlePointerEvent,\r\n                            child: GestureDetector(\r\n                              behavior: HitTestBehavior.translucent,\r\n                              onTap: _handleTap,\r\n                            ),\r\n                          ),\r\n                        ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ),\r\n\r\n            // Overlay showing the selected widget\r\n            if (isInspectorEnabled && _selectedRenderObject != null)\r\n              Positioned.fill(\r\n                child: IgnorePointer(\r\n                  child: CustomPaint(\r\n                    painter: _InspectorOverlayPainter(\r\n                      selectedRenderObject: _selectedRenderObject!,\r\n                      selectedElement: _selectedElement,\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  RenderObject? _findRenderObjectAtPosition(\r\n      Offset position,\r\n      RenderObject root,\r\n      ) {\r\n    // Simple hit test to find the smallest render object at the given position\r\n    final List<RenderObject> hits = <RenderObject>[];\r\n    _hitTestHelper(hits, position, root, root.getTransformTo(null));\r\n\r\n    if (hits.isEmpty) return null;\r\n\r\n    // Sort by size (smallest first)\r\n    hits.sort((RenderObject a, RenderObject b) {\r\n      final Size sizeA = a.semanticBounds.size;\r\n      final Size sizeB = b.semanticBounds.size;\r\n      return (sizeA.width * sizeA.height).compareTo(sizeB.width * sizeB.height);\r\n    });\r\n\r\n    return hits.first;\r\n  }\r\n\r\n  bool _hitTestHelper(\r\n      List<RenderObject> hits,\r\n      Offset position,\r\n      RenderObject object,\r\n      Matrix4 transform,\r\n      ) {\r\n    bool hit = false;\r\n    final Matrix4? inverse = Matrix4.tryInvert(transform);\r\n    if (inverse == null) {\r\n      return false;\r\n    }\r\n    final Offset localPosition = MatrixUtils.transformPoint(inverse, position);\r\n\r\n    // Check children first\r\n    final List<DiagnosticsNode> children = object.debugDescribeChildren();\r\n    for (int i = children.length - 1; i >= 0; i -= 1) {\r\n      final DiagnosticsNode diagnostics = children[i];\r\n      if (diagnostics.style == DiagnosticsTreeStyle.offstage ||\r\n          diagnostics.value is! RenderObject) {\r\n        continue;\r\n      }\r\n      final RenderObject child = diagnostics.value! as RenderObject;\r\n      final Rect? paintClip = object.describeApproximatePaintClip(child);\r\n      if (paintClip != null && !paintClip.contains(localPosition)) {\r\n        continue;\r\n      }\r\n\r\n      final Matrix4 childTransform = transform.clone();\r\n      object.applyPaintTransform(child, childTransform);\r\n      if (_hitTestHelper(hits, position, child, childTransform)) {\r\n        hit = true;\r\n      }\r\n    }\r\n\r\n    // Check this object\r\n    final Rect bounds = object.semanticBounds;\r\n    if (bounds.contains(localPosition)) {\r\n      hit = true;\r\n      hits.add(object);\r\n    }\r\n\r\n    return hit;\r\n  }\r\n\r\n  Element? _findElementForRenderObject(RenderObject renderObject) {\r\n    Element? result;\r\n    void visitor(Element element) {\r\n      if (element.renderObject == renderObject) {\r\n        result = element;\r\n        return;\r\n      }\r\n      element.visitChildren(visitor);\r\n    }\r\n\r\n    WidgetsBinding.instance.rootElement?.visitChildren(visitor);\r\n    return result;\r\n  }\r\n}\r\n\r\nclass _InspectorOverlayPainter extends CustomPainter {\r\n  final RenderObject selectedRenderObject;\r\n  final Element? selectedElement;\r\n\r\n  _InspectorOverlayPainter({\r\n    required this.selectedRenderObject,\r\n    required this.selectedElement,\r\n  });\r\n\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    if (!selectedRenderObject.attached) return;\r\n\r\n    final Paint fillPaint = Paint()\r\n      ..style = PaintingStyle.fill\r\n      ..color = const Color.fromARGB(128, 128, 128, 255);\r\n\r\n    final Paint borderPaint = Paint()\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 1.0\r\n      ..color = const Color.fromARGB(128, 64, 64, 128);\r\n\r\n    // Transform to the coordinate system of the selected object\r\n    final Matrix4 transform = selectedRenderObject.getTransformTo(null);\r\n    final Rect bounds = selectedRenderObject.semanticBounds;\r\n\r\n    canvas.save();\r\n    canvas.transform(transform.storage);\r\n    canvas.drawRect(bounds.deflate(0.5), fillPaint);\r\n    canvas.drawRect(bounds.deflate(0.5), borderPaint);\r\n    canvas.restore();\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(covariant _InspectorOverlayPainter oldDelegate) {\r\n    return selectedRenderObject != oldDelegate.selectedRenderObject ||\r\n        selectedElement != oldDelegate.selectedElement;\r\n  }\r\n}\r\n\r\nString _getParentWidgetType(Element element) {\r\n  Element? parent;\r\n  element.visitAncestorElements((Element ancestor) {\r\n    parent = ancestor;\r\n    return false;\r\n  });\r\n  return parent?.widget.runtimeType.toString() ?? 'None';\r\n}\r\n\r\nString _getWidgetLocation(Element element) {\r\n  const wrapperWidgetTypeNames = {\r\n    'Obx',\r\n    'GetX',\r\n    'GetBuilder',\r\n    'Observer',\r\n    'Consumer',\r\n    'Provider',\r\n    'Builder',\r\n    'BlocBuilder',\r\n    'BlocListener',\r\n    'BlocProvider',\r\n    'Selector',\r\n    'ValueListenableBuilder',\r\n    'AnimatedBuilder',\r\n    'StreamBuilder',\r\n    'FutureBuilder',\r\n    'SizedBox',\r\n    'Positioned',\r\n    'Center',\r\n    'Expanded',\r\n  };\r\n  String widgetTypeName =\r\n      element.widget.runtimeType.toString().split('<').first;\r\n  if (wrapperWidgetTypeNames.contains(widgetTypeName)) {\r\n    Element? childElement;\r\n    element.visitChildren((child) {\r\n      childElement ??= child;\r\n    });\r\n    if (childElement != null) {\r\n      return _getWidgetLocation(childElement!);\r\n    }\r\n  }\r\n\r\n  String? location;\r\n\r\n  void check(Element e) {\r\n    DiagnosticsNode node = e.toDiagnosticsNode();\r\n    var delegate = InspectorSerializationDelegate(\r\n      service: WidgetInspectorService.instance,\r\n      summaryTree: true,\r\n      subtreeDepth: 1,\r\n      includeProperties: true,\r\n      expandPropertyValues: true,\r\n    );\r\n    final Map<String, Object?> json = node.toJsonMap(delegate);\r\n    if (json.containsKey('creationLocation')) {\r\n      final Map creationLocation = json['creationLocation'] as Map;\r\n      final String filePath = creationLocation['file']?.toString() ?? '';\r\n      if (filePath.isNotEmpty &&\r\n          !filePath.contains('/packages/flutter') &&\r\n          !filePath.contains('pub.dev') &&\r\n          !filePath.contains('/custom') &&\r\n          !filePath.contains('/common')) {\r\n        final String fileName = filePath.split(\"/\").last;\r\n        final String line = creationLocation['line']?.toString() ?? '0';\r\n        final String column = creationLocation['column']?.toString() ?? '0';\r\n        location = '$filePath:$line:$column';\r\n      }\r\n    }\r\n  }\r\n\r\n  check(element);\r\n  if (location != null) return location!;\r\n  element.visitAncestorElements((Element ancestor) {\r\n    check(ancestor);\r\n    return location == null;\r\n  });\r\n  return location ?? '';\r\n}\r\n\r\nMap<String, dynamic> _extractWidgetProperties(Element element) {\r\n  final Map<String, dynamic> properties = {};\r\n  final Widget currentWidget = element.widget;\r\n  // List of wrapper widget type names (as strings) that require checking their immediate child\r\n  const wrapperWidgetTypeNames = {\r\n    'Obx',\r\n    'GetX',\r\n    'GetBuilder',\r\n    'Observer',\r\n    'Consumer',\r\n    'Provider',\r\n    'Builder',\r\n    'BlocBuilder',\r\n    'BlocListener',\r\n    'BlocProvider',\r\n    'Selector',\r\n    'ValueListenableBuilder',\r\n    'AnimatedBuilder',\r\n    'StreamBuilder',\r\n    'FutureBuilder',\r\n    'SizedBox',\r\n    'Positioned',\r\n    'Center',\r\n    'Expanded',\r\n  };\r\n  // If the current widget is a wrapper and has an immediate child, use that child.\r\n  Widget effectiveWidget = currentWidget;\r\n  String widgetTypeName =\r\n      effectiveWidget.runtimeType.toString().split('<').first;\r\n  if (wrapperWidgetTypeNames.contains(widgetTypeName)) {\r\n    // This finds only immediate child.\r\n    Widget? immediateChild;\r\n    element.visitChildElements((Element child) {\r\n      immediateChild = child.widget;\r\n    });\r\n    if (immediateChild != null) {\r\n      effectiveWidget = immediateChild!;\r\n    }\r\n  }\r\n\r\n  // Check if the effective widget is a Text.\r\n  if (effectiveWidget is Text) {\r\n    properties['type'] = effectiveWidget.runtimeType.toString();\r\n    properties['key'] = effectiveWidget.key?.toString() ?? 'null';\r\n    properties['text'] = effectiveWidget.data;\r\n    properties['style'] = getTextStyle(effectiveWidget.style, element);\r\n    properties['textAlign'] = effectiveWidget.textAlign?.toString() ?? 'null';\r\n    return properties;\r\n  }\r\n  if (currentWidget is Builder) {\r\n    // Check for AppBar widget in children or ancestors.\r\n    final appBarWidget = _findWidgetOfTypeInAncestors<AppBar>(element);\r\n    if (appBarWidget is AppBar) {\r\n      properties['type'] = 'AppBar';\r\n      properties['backgroundColor'] = appBarWidget.backgroundColor != null\r\n          ? colorToHex(appBarWidget.backgroundColor!)\r\n          : 'null';\r\n      properties['centerTitle'] = appBarWidget.centerTitle.toString();\r\n      properties['foregroundColor'] = appBarWidget.foregroundColor != null\r\n          ? colorToHex(appBarWidget.foregroundColor!)\r\n          : 'null';\r\n      properties['elevation'] = appBarWidget.elevation.toString();\r\n      final Widget? title = appBarWidget.title;\r\n      if (title is Text) {\r\n        properties['title'] = title.data ?? 'null';\r\n      } else {\r\n        properties['title'] = 'null';\r\n      }\r\n      return properties;\r\n    }\r\n    // Check for ElevatedButton or OutlinedButton in children or ancestors.\r\n    final buttonWidget =\r\n        _findWidgetOfTypeInAncestors<ElevatedButton>(element) ??\r\n            _findWidgetOfTypeInAncestors<OutlinedButton>(element);\r\n    if (buttonWidget != null) {\r\n      properties['type'] = buttonWidget.runtimeType.toString();\r\n      if (buttonWidget is ElevatedButton) {\r\n        properties['backgroundColor'] =\r\n            widgetStatePropertyToResolvedValues<Color?>(\r\n              buttonWidget.style?.backgroundColor,\r\n                  (color) => colorToHex(color!),\r\n            );\r\n        properties['foregroundColor'] =\r\n            widgetStatePropertyToResolvedValues<Color?>(\r\n              buttonWidget.style?.foregroundColor,\r\n                  (color) => colorToHex(color!),\r\n            );\r\n        properties['iconColor'] = widgetStatePropertyToResolvedValues<Color?>(\r\n          buttonWidget.style?.iconColor,\r\n              (color) => colorToHex(color!),\r\n        );\r\n        properties['shadowColor'] = widgetStatePropertyToResolvedValues<Color?>(\r\n          buttonWidget.style?.shadowColor,\r\n              (color) => colorToHex(color!),\r\n        );\r\n        properties['overlayColor'] =\r\n            widgetStatePropertyToResolvedValues<Color?>(\r\n              buttonWidget.style?.overlayColor,\r\n                  (color) => colorToHex(color!),\r\n            );\r\n        properties['textStyle'] =\r\n            widgetStatePropertyToResolvedValues<TextStyle?>(\r\n              buttonWidget.style?.textStyle,\r\n                  (value) => value.toString(),\r\n            );\r\n        properties['elevation'] = widgetStatePropertyToResolvedValues<double?>(\r\n          buttonWidget.style?.elevation,\r\n              (value) => value.toString(),\r\n        );\r\n        properties['padding'] =\r\n            widgetStatePropertyToResolvedValues<EdgeInsetsGeometry?>(\r\n              buttonWidget.style?.padding,\r\n                  (value) => value.toString(),\r\n            );\r\n        properties['shape'] =\r\n            widgetStatePropertyToResolvedValues<OutlinedBorder?>(\r\n              buttonWidget.style?.shape,\r\n                  (value) => value.toString(),\r\n            );\r\n        properties['minimumSize'] = widgetStatePropertyToResolvedValues<Size?>(\r\n          buttonWidget.style?.minimumSize,\r\n              (value) => value.toString(),\r\n        );\r\n        properties['maximumSize'] = widgetStatePropertyToResolvedValues<Size?>(\r\n          buttonWidget.style?.maximumSize,\r\n              (value) => value.toString(),\r\n        );\r\n      }\r\n      final Widget? child = (buttonWidget as dynamic).child;\r\n      if (child is Text) {\r\n        properties['text'] = child.data ?? 'null';\r\n      } else {\r\n        properties['text'] = 'null';\r\n      }\r\n      return properties;\r\n    }\r\n  }\r\n  // Check for RichText widget in children or ancestors.\r\n  final richTextWidget = _findWidgetOfTypeInChildren<RichText>(element);\r\n  if (richTextWidget is RichText) {\r\n    properties['type'] = 'RichText';\r\n    // Extract the root TextSpan\r\n    final TextSpan rootTextSpan = richTextWidget.text as TextSpan;\r\n    // Recursive function to extract properties from TextSpan and its children\r\n    Map<String, dynamic> extractTextSpanProperties(TextSpan textSpan) {\r\n      final Map<String, dynamic> spanProperties = {};\r\n      // Add text and style\r\n      spanProperties['text'] = textSpan.text ?? '';\r\n      spanProperties['style'] = getTextStyle(textSpan.style, element);\r\n      // Recursively process children\r\n      if (textSpan.children != null && textSpan.children!.isNotEmpty) {\r\n        spanProperties['children'] = textSpan.children!\r\n            .map((child) => extractTextSpanProperties(child as TextSpan))\r\n            .toList();\r\n      } else {\r\n        spanProperties['children'] = [];\r\n      }\r\n      return spanProperties;\r\n    }\r\n\r\n    // Extract properties from the root TextSpan\r\n    properties['textSpan'] = extractTextSpanProperties(rootTextSpan);\r\n    return properties;\r\n  }\r\n  // Check for TextField widget in children or ancestors.\r\n  final textFieldWidget = _findWidgetOfTypeInAncestors<TextField>(element);\r\n  if (textFieldWidget is TextField) {\r\n    properties['type'] = 'TextField';\r\n    properties['text'] = textFieldWidget.controller?.text ?? 'null';\r\n    properties['style'] = getTextStyle(textFieldWidget.style, element);\r\n    final decoration = {\r\n      'border': textFieldWidget.decoration?.border.toString() ?? 'null',\r\n      'enabledBorder':\r\n      textFieldWidget.decoration?.enabledBorder.toString() ?? 'null',\r\n      'focusedBorder':\r\n      textFieldWidget.decoration?.focusedBorder.toString() ?? 'null',\r\n      'disabledBorder':\r\n      textFieldWidget.decoration?.disabledBorder.toString() ?? 'null',\r\n      'errorBorder':\r\n      textFieldWidget.decoration?.errorBorder.toString() ?? 'null',\r\n      'focusedErrorBorder':\r\n      textFieldWidget.decoration?.focusedErrorBorder.toString() ?? 'null',\r\n      'fillColor': textFieldWidget.decoration?.fillColor != null\r\n          ? colorToHex(textFieldWidget.decoration!.fillColor!)\r\n          : 'null',\r\n      'filled': textFieldWidget.decoration?.filled.toString() ?? 'null',\r\n      'hintText': textFieldWidget.decoration?.hintText.toString() ?? 'null',\r\n      'hintStyle': getTextStyle(textFieldWidget.decoration?.hintStyle, element),\r\n      'labelText': textFieldWidget.decoration?.labelText.toString() ?? 'null',\r\n      'labelStyle': getTextStyle(textFieldWidget.decoration?.labelStyle, element),\r\n      'prefixIcon': textFieldWidget.decoration?.prefixIcon.toString() ?? 'null',\r\n      'prefixIconConstraints':\r\n      textFieldWidget.decoration?.prefixIconConstraints.toString() ??\r\n          'null',\r\n      'suffixIcon': textFieldWidget.decoration?.suffixIcon.toString() ?? 'null',\r\n      'suffixIconConstraints':\r\n      textFieldWidget.decoration?.suffixIconConstraints.toString() ??\r\n          'null',\r\n      'counterText': textFieldWidget.decoration?.counterText.toString(),\r\n    };\r\n    properties['decoration'] = decoration;\r\n    return properties;\r\n  }\r\n  const containerWrapperTypeNames = {\r\n    'LimitedBox',\r\n    'Align',\r\n    'Padding',\r\n    'ColoredBox',\r\n    'ClipPath',\r\n    'DecoratedBox',\r\n    'ConstrainedBox',\r\n    'Transform',\r\n  };\r\n  Container? containerConfig; // declared outside the if block\r\n  if (containerWrapperTypeNames.contains(\r\n    currentWidget.runtimeType.toString(),\r\n  )) {\r\n    element.visitAncestorElements((Element ancestor) {\r\n      if (ancestor.widget is Container) {\r\n        containerConfig = ancestor.widget as Container;\r\n        return false; // Stop when found.\r\n      }\r\n      return true;\r\n    });\r\n    if (containerConfig != null) {\r\n      effectiveWidget = containerConfig!;\r\n    }\r\n  }\r\n  final Widget containerWidget = containerConfig ?? effectiveWidget;\r\n  properties['type'] = containerWidget.runtimeType.toString();\r\n  properties['key'] = containerWidget.key?.toString() ?? 'null';\r\n  if (containerWidget is Container) {\r\n    properties['color'] = containerWidget.color != null\r\n        ? colorToHex(containerWidget.color!)\r\n        : \"null\";\r\n    properties['width'] =\r\n        containerWidget.constraints?.maxWidth.toString() ?? 'null';\r\n    properties['height'] =\r\n        containerWidget.constraints?.maxHeight.toString() ?? 'null';\r\n    properties['padding'] = containerWidget.padding?.toString() ?? 'null';\r\n    properties['margin'] = containerWidget.margin?.toString() ?? 'null';\r\n    if (containerWidget.decoration is BoxDecoration) {\r\n      final boxDecoration = containerWidget.decoration as BoxDecoration;\r\n      final decoration = {\r\n        'color': boxDecoration.color != null\r\n            ? colorToHex(boxDecoration.color!)\r\n            : \"null\",\r\n        'border': boxDecoration.border.toString(),\r\n        'borderRadius': boxDecoration.borderRadius.toString(),\r\n        'boxShadow': boxDecoration.boxShadow.toString(),\r\n        'gradient': boxDecoration.gradient.toString(),\r\n        'image': boxDecoration.image.toString(),\r\n        'shape': boxDecoration.shape.toString(),\r\n      };\r\n      properties['decoration'] = decoration;\r\n    }\r\n    properties['alignment'] = containerWidget.alignment?.toString() ?? 'null';\r\n  }\r\n  return properties;\r\n}\r\n\r\nWidget? _findWidgetOfTypeInChildren<T>(Element element) {\r\n  if (element.widget is T) {\r\n    return element.widget;\r\n  }\r\n  Widget? foundWidget;\r\n  element.visitChildElements((child) {\r\n    foundWidget ??= _findWidgetOfTypeInChildren<T>(child);\r\n  });\r\n  return foundWidget;\r\n}\r\n\r\n// Helper function to find a widget of interest in the ancestor hierarchy (upward).\r\nWidget? _findWidgetOfTypeInAncestors<T>(Element element) {\r\n  Widget? foundWidget;\r\n  element.visitAncestorElements((ancestor) {\r\n    if (ancestor.widget is T) {\r\n      foundWidget = ancestor.widget;\r\n      return false; // Stop visiting further ancestors once the widget is found.\r\n    }\r\n    return true; // Continue visiting ancestors.\r\n  });\r\n  return foundWidget;\r\n}\r\n\r\nMap<String, dynamic> getTextStyle(TextStyle? style, BuildContext context) {\r\n    final defaultStyle = DefaultTextStyle.of(context).style;\r\n\r\n    return {\r\n      'color': style?.color != null\r\n          ? colorToHex(style!.color!)\r\n          : (defaultStyle.color != null ? colorToHex(defaultStyle.color!) : 'null'),\r\n      'fontSize': style?.fontSize?.round().toString() ??\r\n          defaultStyle.fontSize?.round().toString() ??\r\n          'null',\r\n      'backgroundColor': style?.backgroundColor != null\r\n          ? colorToHex(style!.backgroundColor!)\r\n          : (defaultStyle.backgroundColor != null\r\n          ? colorToHex(defaultStyle.backgroundColor!)\r\n          : 'null'),\r\n      'fontWeight': style?.fontWeight?.toString() ??\r\n          defaultStyle.fontWeight?.toString() ??\r\n          'null',\r\n      'fontStyle': style?.fontStyle?.toString() ??\r\n          defaultStyle.fontStyle?.toString() ??\r\n          'null',\r\n      'fontFamily': style?.fontFamily ??\r\n          defaultStyle.fontFamily ??\r\n          'null',\r\n      'letterSpacing': style?.letterSpacing?.toString() ??\r\n          defaultStyle.letterSpacing?.toString() ??\r\n          'null',\r\n      'wordSpacing': style?.wordSpacing?.toString() ??\r\n          defaultStyle.wordSpacing?.toString() ??\r\n          'null',\r\n      'textBaseline': style?.textBaseline?.toString() ??\r\n          defaultStyle.textBaseline?.toString() ??\r\n          'null',\r\n      'height': style?.height?.toString() ??\r\n          defaultStyle.height?.toString() ??\r\n          'null',\r\n      'overflow': style?.overflow?.toString() ??\r\n          defaultStyle.overflow?.toString() ??\r\n          'null',\r\n    };\r\n  }\r\n\r\nString colorToHex(Color color) {\r\n  var alphaColor =\r\n  (color.a * 255).round().toRadixString(16).padLeft(2, '0').toUpperCase();\r\n  var redColor =\r\n  (color.r * 255).round().toRadixString(16).padLeft(2, '0').toUpperCase();\r\n  var greenColor =\r\n  (color.g * 255).round().toRadixString(16).padLeft(2, '0').toUpperCase();\r\n  var blueColor =\r\n  (color.b * 255).round().toRadixString(16).padLeft(2, '0').toUpperCase();\r\n  return '0X$alphaColor$redColor$greenColor$blueColor';\r\n}\r\n\r\nMap<String, String> widgetStatePropertyToResolvedValues<T>(\r\n    WidgetStateProperty<T>? stateProperty,\r\n    String Function(T value) valueToString,\r\n    ) {\r\n  if (stateProperty == null) {\r\n    return {};\r\n  }\r\n  // Map to store state names and their corresponding resolved values.\r\n  final Map<String, String> resolvedValues = {};\r\n  // Add the default state (no specific state).\r\n  final T? defaultValue = stateProperty.resolve({});\r\n  if (defaultValue != null) {\r\n    resolvedValues['default'] = valueToString(defaultValue);\r\n  }\r\n  return resolvedValues;\r\n}\r\n\r\nvoid _sendWidgetInformation(Map<String, dynamic> widgetInfo) {\r\n  try {\r\n    final payload = widgetInfo;\r\n\r\n    final jsonData = jsonEncode(payload);\r\n    final request = html.HttpRequest();\r\n    request.open('POST', backendURL, async: true);\r\n    request.setRequestHeader('Content-Type', 'application/json');\r\n\r\n    request.onReadyStateChange.listen((_) {\r\n      if (request.readyState == html.HttpRequest.DONE) {\r\n        if (request.status == 200) {\r\n          print('Successfully reported widgetInfo');\r\n        } else {\r\n          print('Error reporting widget information');\r\n        }\r\n      }\r\n    });\r\n\r\n    request.onError.listen((event) {\r\n      print('Failed to send widget information');\r\n    });\r\n\r\n    request.send(jsonData);\r\n  } catch (e) {\r\n    print('Exception while reporting overflow error: $e');\r\n  }\r\n}\r\n  ",
    "main-updated.dart": "import 'package:flutter/foundation.dart';\r\nimport 'package:flutter/gestures.dart';\r\nimport 'dart:js_interop';\r\nimport 'package:web/web.dart' as web;\r\nimport 'dart:async';\r\nimport 'custom_inspector.dart';\r\nimport 'dart:html' as html;\r\nimport 'dart:convert';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../core/app_export.dart';\r\nimport '../widgets/custom_error_widget.dart';\r\nimport 'services/supabase_service.dart';\r\n\r\nvar backendURL = \"https://uniconnect3109back.builtwithrocket.new/log-error\";\r\n\r\nvoid main() async {\r\n  FlutterError.onError = (details) {\r\n    _sendOverflowError(details);\r\n  };\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  // Initialize Supabase\r\n  try {\r\n    await SupabaseService.initialize();\r\n  } catch (e) {\r\n    debugPrint('Failed to initialize Supabase: $e');\r\n  }\r\n\r\n  // 🚨 CRITICAL: Custom error handling - DO NOT REMOVE\r\n  ErrorWidget.builder = (FlutterErrorDetails details) {\r\n    return CustomErrorWidget(\r\n      errorDetails: details,\r\n    );\r\n  };\r\n  // 🚨 CRITICAL: Device orientation lock - DO NOT REMOVE\r\n  Future.wait([\r\n    SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp])\r\n  ]).then((value) {\r\n    runApp(MyApp());\r\n  });\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Sizer(builder: (context, orientation, screenType) {\r\n      return MaterialApp(\r\n        navigatorObservers: [routeObserver],\r\n        title: 'uniconnect',\r\n        theme: AppTheme.lightTheme,\r\n        darkTheme: AppTheme.darkTheme,\r\n        themeMode: ThemeMode.light,\r\n        // 🚨 CRITICAL: NEVER REMOVE OR MODIFY\r\n        builder: (context, child) {\r\n          return CustomWidgetInspector(\r\n             child: TrackingWidget(\r\n            child: MediaQuery(\r\n            data: MediaQuery.of(context).copyWith(\r\n              textScaler: TextScaler.linear(1.0),\r\n      ),\r\n            child: child!,\r\n          ) // Preserve original MediaQuery content\r\n          )\r\n        );\r\n        },\r\n        // 🚨 END CRITICAL SECTION\r\n        debugShowCheckedModeBanner: false,\r\n        routes: AppRoutes.routes,\r\n        initialRoute: AppRoutes.initial,\r\n      );\r\n    });\r\n  }\r\n}\r\nfinal ValueNotifier<String> currentPageNotifier = ValueNotifier<String>('');\r\n\r\nclass MyRouteObserver extends RouteObserver<PageRoute<dynamic>> {\r\n          void _updateCurrentPage(Route<dynamic>? route) {\r\n            if (route is PageRoute) {\r\n              currentPageNotifier.value = route.settings.name ?? '';\r\n            }\r\n          }\r\n\r\n          @override\r\n          void didPush(Route route, Route? previousRoute) {\r\n            super.didPush(route, previousRoute);\r\n            _updateCurrentPage(route);\r\n          }\r\n\r\n          @override\r\n          void didPop(Route route, Route? previousRoute) {\r\n            super.didPop(route, previousRoute);\r\n            _updateCurrentPage(previousRoute);\r\n          }\r\n\r\n          @override\r\n          void didReplace({Route? newRoute, Route? oldRoute}) {\r\n            super.didReplace(newRoute: newRoute, oldRoute: oldRoute);\r\n            _updateCurrentPage(newRoute);\r\n          }\r\n        }\r\n        final MyRouteObserver routeObserver = MyRouteObserver();\r\n\r\n\r\n\r\n    void _sendOverflowError(FlutterErrorDetails details) {\r\n      try {\r\n       bool hasValidHost= html.window.location.host.isNotEmpty &&\r\n        (html.window.location.host.contains('.netlify.app') ||\r\n            html.window.location.host.contains('.public.builtwithrocket.new'));\r\n        if (hasValidHost) {\r\n          return;\r\n        }\r\n        final errorMessage = details.exception.toString();\r\n        final exceptionType = details.exception.runtimeType.toString();\r\n\r\n        String location = 'Unknown';\r\n        final locationMatch = RegExp(r'file:///.*\\.dart').firstMatch(details.toString());\r\n        if (locationMatch != null) {\r\n          location = locationMatch.group(0)?.replaceAll(\"file://\", '') ?? 'Unknown';\r\n        }\r\n        String errorType = \"RUNTIME_ERROR\";\r\n        if(errorMessage.contains('overflowed by') || errorMessage.contains('RenderFlex overflowed')) {\r\n          errorType = 'OVERFLOW_ERROR';\r\n        }\r\n        final payload = {\r\n          'errorType': errorType,\r\n          'exceptionType': exceptionType,\r\n          'message': errorMessage,\r\n          'location': location,\r\n          'timestamp': DateTime.now().toIso8601String(),\r\n        };\r\n        final jsonData = jsonEncode(payload);\r\n        final request = html.HttpRequest();\r\n        request.open('POST', backendURL, async: true);\r\n        request.setRequestHeader('Content-Type', 'application/json');\r\n        request.onReadyStateChange.listen((_) {\r\n          if (request.readyState == html.HttpRequest.DONE) {\r\n            if (request.status == 200) {\r\n              print('Successfully reported error');\r\n            } else {\r\n              print('Error reporting overflow');\r\n            }\r\n          }\r\n        });\r\n        request.onError.listen((event) {\r\n          print('Failed to send overflow report');\r\n        });\r\n        request.send(jsonData);\r\n      } catch (e) {\r\n        print('Exception while reporting overflow error: $e');\r\n      }\r\n    }\r\n    class TrackingWidget extends StatefulWidget {\r\n  final Widget child;\r\n\r\n  const TrackingWidget({super.key, required this.child});\r\n\r\n  @override\r\n  State<TrackingWidget> createState() => _TrackingWidgetState();\r\n}\r\n\r\nclass _TrackingWidgetState extends State<TrackingWidget> {\r\n  Timer? _debounce;\r\n  RenderObject? _selectedRenderObject;\r\n  Element? _selectedElement;\r\n  final GlobalKey _childKey = GlobalKey();\r\n  Timer? _scrollDebounce;\r\n  String currentPage = '';\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    currentPage = currentPageNotifier.value;\r\n    currentPageNotifier.addListener(_updateCurrentPage);\r\n  }\r\n\r\n  void _updateCurrentPage() {\r\n    setState(() {\r\n      currentPage = currentPageNotifier.value;\r\n    });\r\n  }\r\n\r\n    String findNearestKnownWidget(Element? element) {\r\n    if (element == null) return 'unknown';\r\n\r\n    String? foundWidget;\r\n\r\n    // Helper function to identify widget type\r\n    String? identifyWidget(Widget widget) {\r\n      if (widget is Text) return 'Text';\r\n      if (widget is Icon) return 'Icon';\r\n      if (widget is ElevatedButton) return 'ElevatedButton';\r\n      if (widget is TextButton) return 'TextButton';\r\n      if (widget is OutlinedButton) return 'OutlinedButton';\r\n      if (widget is FloatingActionButton) return 'FloatingActionButton';\r\n      if (widget is Checkbox) return 'Checkbox';\r\n      if (widget is Radio) return 'Radio';\r\n      if (widget is SwitchListTile) return 'SwitchListTile';\r\n      if (widget is RadioListTile) return 'RadioListTile';\r\n      if (widget is Switch) return 'Switch';\r\n      if (widget is ToggleButtons) return 'ToggleButtons';\r\n      if (widget is Slider) return 'Slider';\r\n      if (widget is RangeSlider) return 'RangeSlider';\r\n      if (widget is Image) return 'Image';\r\n      if (widget is Placeholder) return 'Placeholder';\r\n      if (widget is FileImage) return 'FileImage';\r\n      if (widget is NetworkImage) return 'NetworkImage';\r\n      if (widget is AssetImage) return 'AssetImage';\r\n      if (widget is ListTile) return 'ListTile';\r\n      if (widget is AppBar) return 'AppBar';\r\n      if (widget is BottomNavigationBar) return 'BottomNavigationBar';\r\n      if (widget is Drawer) return 'Drawer';\r\n      if (widget is Card) return 'Card';\r\n      if (widget is Chip) return 'Chip';\r\n      if (widget is ActionChip) return 'ActionChip';\r\n      if (widget is InputChip) return 'InputChip';\r\n      if (widget is ChoiceChip) return 'ChoiceChip';\r\n      if (widget is SnackBar) return 'SnackBar';\r\n      if (widget is Banner) return 'Banner';\r\n      if (widget is ProgressIndicator) return 'ProgressIndicator';\r\n      if (widget is CircularProgressIndicator)\r\n        return 'CircularProgressIndicator';\r\n      if (widget is LinearProgressIndicator) return 'LinearProgressIndicator';\r\n      if (widget is DropdownButton) return 'DropdownButton';\r\n      if (widget is PopupMenuButton) return 'PopupMenuButton';\r\n      if (widget is TextField) return 'TextField';\r\n      if (widget is TextFormField) return 'TextFormField';\r\n      if (widget is IconButton) return 'IconButton';\r\n      if (widget is Form) return 'Form';\r\n      if (widget is Container) return 'Container';\r\n      if (widget is Row) return 'Row';\r\n      if (widget is Column) return 'Column';\r\n      if (widget is Stack) return 'Stack';\r\n      if (widget is Wrap) return 'Wrap';\r\n      if (widget is ListView) return 'ListView';\r\n      if (widget is GridView) return 'GridView';\r\n      if (widget is SingleChildScrollView) return 'SingleChildScrollView';\r\n      if (widget is SizedBox) return 'SizedBox';\r\n      if (widget is Padding) return 'Padding';\r\n      if (widget is Tooltip) return 'Tooltip';\r\n      if (widget is SliverAppBar) return 'SliverAppBar';\r\n      if (widget is SliverList) return 'SliverList';\r\n      if (widget is SliverGrid) return 'SliverGrid';\r\n      if (widget is SliverToBoxAdapter) return 'SliverToBoxAdapter';\r\n      if (widget is SliverFillRemaining) return 'SliverFillRemaining';\r\n      if (widget is SliverPadding) return 'SliverPadding';\r\n      if (widget is SliverFixedExtentList) return 'SliverFixedExtentList';\r\n      if (widget is SliverFillViewport) return 'SliverFillViewport';\r\n      if (widget is SliverPersistentHeader) return 'SliverPersistentHeader';\r\n      return null;\r\n    }\r\n\r\n    // Check current element\r\n    foundWidget = identifyWidget(element.widget);\r\n    if (foundWidget != null) return foundWidget;\r\n\r\n    // Traverse ancestors\r\n    element.visitAncestorElements((ancestor) {\r\n      foundWidget = identifyWidget(ancestor.widget);\r\n      return foundWidget == null; // continue if not found\r\n    });\r\n\r\n    if (foundWidget != null) return foundWidget!;\r\n\r\n    // Traverse descendants\r\n    void visitDescendants(Element child) {\r\n      if (foundWidget != null) return;\r\n      foundWidget = identifyWidget(child.widget);\r\n      if (foundWidget == null) {\r\n        child.visitChildren(visitDescendants);\r\n      }\r\n    }\r\n\r\n    element.visitChildren(visitDescendants);\r\n\r\n    return foundWidget ?? 'unknown';\r\n  }\r\n\r\n  void trackInteraction(String eventType, PointerEvent? event) {\r\n    try {\r\n    //remove focus from the flutter app when mouseleave\r\n    //added this to fix the issue of the focus not being removed when the mouse leaves the flutter app\r\n    if (eventType == 'mouseleave') {\r\n        Future.delayed(Duration(milliseconds: 300), () {\r\n          FocusScopeNode currentFocus = FocusScope.of(context);\r\n          if (!currentFocus.hasPrimaryFocus &&\r\n              currentFocus.focusedChild != null) {\r\n            currentFocus.unfocus();\r\n          }\r\n        });\r\n      }\r\n      RenderBox? renderBox;\r\n      if (_selectedRenderObject is RenderBox) {\r\n        renderBox = _selectedRenderObject as RenderBox;\r\n      } else {\r\n        renderBox = null;\r\n      }\r\n\r\n      final offset = renderBox?.localToGlobal(Offset.zero);\r\n      final size = renderBox?.size;\r\n\r\n      final mousePosition = event?.position;\r\n\r\n      final scrollPosition = _getScrollPosition(_selectedRenderObject);\r\n\r\n      final interactionData = {\r\n        'eventType': eventType,\r\n        'timestamp': DateTime.now().toIso8601String(),\r\n        'element': {\r\n          'tag': findNearestKnownWidget(_selectedElement),\r\n          'id': _selectedElement?.widget.key?.toString() ??\r\n              widget.child.key?.toString(),\r\n          'position': offset != null\r\n              ? {\r\n            'x': offset.dx.round(),\r\n            'y': offset.dy.round(),\r\n            'width': size?.width.round(),\r\n            'height': size?.height.round(),\r\n          }\r\n              : null,\r\n          'viewport': {\r\n            'width': MediaQuery.of(context).size.width.round(),\r\n            'height': MediaQuery.of(context).size.height.round(),\r\n          },\r\n          'scroll': {\r\n            'x': scrollPosition.dx.round(),\r\n            'y': scrollPosition.dy.round(),\r\n          },\r\n          'mouse': mousePosition != null\r\n              ? {\r\n            'viewport': {\r\n              'x': mousePosition.dx.round(),\r\n              'y': mousePosition.dy.round(),\r\n            },\r\n            'page': {\r\n              'x': (mousePosition.dx + scrollPosition.dx).round(),\r\n              'y': (mousePosition.dy + scrollPosition.dy).round(),\r\n            },\r\n            'element': offset != null\r\n                ? {\r\n              'x': (mousePosition.dx - offset.dx).round(),\r\n              'y': (mousePosition.dy - offset.dy).round(),\r\n            }\r\n                : null,\r\n          }\r\n              : null,\r\n        },\r\n        'page': '/#$currentPage',\r\n      };\r\n\r\n      web.window.parentCrossOrigin?.postMessage(\r\n          {\r\n            'type': 'USER_INTERACTION',\r\n            'payload': interactionData,\r\n          }.jsify(),\r\n          '*'.toJS);\r\n\r\n      // print('Interaction Data: $interactionData');\r\n    } catch (error) {\r\n      print('Error tracking interaction flutter: $error');\r\n    }\r\n  }\r\n\r\n  Offset _getScrollPosition(RenderObject? renderObject) {\r\n    if (renderObject == null) return Offset.zero;\r\n\r\n    final element = _findElementForRenderObject(renderObject);\r\n    if (element == null) return Offset.zero;\r\n\r\n    final scrollableState = Scrollable.maybeOf(element);\r\n    if (scrollableState != null) {\r\n      final position = scrollableState.position;\r\n      return Offset(position.pixels, position.pixels);\r\n    }\r\n\r\n    // Default to zero if not scrollable\r\n    return Offset.zero;\r\n  }\r\n\r\n  void _debouncedMouseMove(PointerHoverEvent event) {\r\n    if (_debounce?.isActive ?? false) _debounce!.cancel();\r\n    _debounce = Timer(const Duration(milliseconds: 10), () {\r\n      _onHover(event);\r\n      trackInteraction('mousemove', event);\r\n    });\r\n  }\r\n\r\n  void _onScroll(PointerSignalEvent event) {\r\n    _scrollDebounce?.cancel();\r\n    _scrollDebounce = Timer(const Duration(milliseconds: 200), () {\r\n      trackInteraction('scrollend', event);\r\n    });\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _debounce?.cancel();\r\n    currentPageNotifier.removeListener(_updateCurrentPage);\r\n    super.dispose();\r\n  }\r\n\r\n  void _onHover(PointerHoverEvent event) {\r\n    final RenderObject? userRender =\r\n    _childKey.currentContext?.findRenderObject();\r\n    if (userRender == null) return;\r\n\r\n    final RenderObject? target =\r\n    _findRenderObjectAtPosition(event.position, userRender);\r\n\r\n    if (target != null && target != userRender) {\r\n      if (_selectedRenderObject != target) {\r\n        final Element? element = _findElementForRenderObject(target);\r\n        setState(() {\r\n          _selectedRenderObject = target;\r\n          _selectedElement = element;\r\n        });\r\n      }\r\n    } else if (_selectedRenderObject != null) {\r\n      setState(() {\r\n        _selectedRenderObject = null;\r\n        _selectedElement = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  RenderObject? _findRenderObjectAtPosition(\r\n      Offset position, RenderObject root) {\r\n    final List<RenderObject> hits = <RenderObject>[];\r\n    _hitTestHelper(hits, position, root, root.getTransformTo(null));\r\n    if (hits.isEmpty) return null;\r\n    hits.sort((a, b) {\r\n      final sizeA = a.semanticBounds.size;\r\n      final sizeB = b.semanticBounds.size;\r\n      return (sizeA.width * sizeA.height).compareTo(sizeB.width * sizeB.height);\r\n    });\r\n    return hits.first;\r\n  }\r\n\r\n  bool _hitTestHelper(List<RenderObject> hits, Offset position,\r\n      RenderObject object, Matrix4 transform) {\r\n    bool hit = false;\r\n    final Matrix4? inverse = Matrix4.tryInvert(transform);\r\n    if (inverse == null) return false;\r\n    final Offset localPosition = MatrixUtils.transformPoint(inverse, position);\r\n    final List<DiagnosticsNode> children = object.debugDescribeChildren();\r\n    for (int i = children.length - 1; i >= 0; i--) {\r\n      final DiagnosticsNode diagnostics = children[i];\r\n      if (diagnostics.style == DiagnosticsTreeStyle.offstage ||\r\n          diagnostics.value is! RenderObject) continue;\r\n      final RenderObject child = diagnostics.value! as RenderObject;\r\n      final Rect? paintClip = object.describeApproximatePaintClip(child);\r\n      if (paintClip != null && !paintClip.contains(localPosition)) continue;\r\n      final Matrix4 childTransform = transform.clone();\r\n      object.applyPaintTransform(child, childTransform);\r\n      if (_hitTestHelper(hits, position, child, childTransform)) hit = true;\r\n    }\r\n    final Rect bounds = object.semanticBounds;\r\n    if (bounds.contains(localPosition)) {\r\n      hit = true;\r\n      hits.add(object);\r\n    }\r\n    return hit;\r\n  }\r\n\r\n  Element? _findElementForRenderObject(RenderObject renderObject) {\r\n    Element? result;\r\n    void visitor(Element element) {\r\n      if (element.renderObject == renderObject) {\r\n        result = element;\r\n        return;\r\n      }\r\n      element.visitChildren(visitor);\r\n    }\r\n\r\n    WidgetsBinding.instance.rootElement?.visitChildren(visitor);\r\n    return result;\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Listener(\r\n      onPointerHover: _debouncedMouseMove,\r\n      onPointerDown: (event) => trackInteraction('click', event),\r\n      onPointerSignal: (event) => _onScroll(event),\r\n      onPointerMove: (event) => trackInteraction('touchmove', event),\r\n      onPointerUp: (event) => trackInteraction('touchend', event),\r\n      child: MouseRegion(\r\n        onEnter: (event) => trackInteraction('mouseenter', event),\r\n        onExit: (event) => trackInteraction('mouseleave', event),\r\n        child: GestureDetector(\r\n          onDoubleTap: () => trackInteraction('dblclick', null),\r\n          onTap: () => trackInteraction('click', null),\r\n          onPanStart: (_) => trackInteraction('touchstart', null),\r\n          onPanUpdate: (_) => trackInteraction('touchmove', null),\r\n          onPanEnd: (_) => trackInteraction('touchend', null),\r\n          child: FocusScope(\r\n            onKeyEvent: (_, event) {\r\n              if(event is KeyDownEvent){\r\n                trackInteraction('keydown', null);\r\n              }\r\n              return KeyEventResult.ignored;\r\n            },\r\n            key: _childKey,\r\n            child: widget.child,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n",
    "main.dart": "import 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../core/app_export.dart';\r\nimport '../widgets/custom_error_widget.dart';\r\n\r\nvoid main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  // 🚨 CRITICAL: Custom error handling - DO NOT REMOVE\r\n  ErrorWidget.builder = (FlutterErrorDetails details) {\r\n    return CustomErrorWidget(\r\n      errorDetails: details,\r\n    );\r\n  };\r\n  // 🚨 CRITICAL: Device orientation lock - DO NOT REMOVE\r\n  Future.wait([\r\n    SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp])\r\n  ]).then((value) {\r\n    runApp(MyApp());\r\n  });\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Sizer(builder: (context, orientation, screenType) {\r\n      return MaterialApp(\r\n        title: 'uniconnect',  \r\n        theme: AppTheme.lightTheme,\r\n        darkTheme: AppTheme.darkTheme,\r\n        themeMode: ThemeMode.light,\r\n        // 🚨 CRITICAL: NEVER REMOVE OR MODIFY\r\n        builder: (context, child) {\r\n          return MediaQuery(\r\n            data: MediaQuery.of(context).copyWith(\r\n              textScaler: TextScaler.linear(1.0),\r\n            ),\r\n            child: child!,\r\n          );\r\n        },\r\n        // 🚨 END CRITICAL SECTION\r\n        debugShowCheckedModeBanner: false,\r\n        routes: AppRoutes.routes,\r\n        initialRoute: AppRoutes.initial,\r\n      );\r\n    });\r\n  }\r\n}\r\n",
    "models": {
      "post_category.dart": "class PostCategory {\r\n  final String id;\r\n  final String name;\r\n  final String? description;\r\n  final String colorCode;\r\n  final bool isSystemCategory;\r\n  final DateTime createdAt;\r\n\r\n  PostCategory({\r\n    required this.id,\r\n    required this.name,\r\n    this.description,\r\n    required this.colorCode,\r\n    required this.isSystemCategory,\r\n    required this.createdAt,\r\n  });\r\n\r\n  factory PostCategory.fromJson(Map<String, dynamic> json) {\r\n    return PostCategory(\r\n      id: json['id'] as String,\r\n      name: json['name'] as String,\r\n      description: json['description'] as String?,\r\n      colorCode: json['color_code'] as String? ?? '#3B82F6',\r\n      isSystemCategory: json['is_system_category'] as bool? ?? false,\r\n      createdAt: DateTime.parse(json['created_at'] as String),\r\n    );\r\n  }\r\n\r\n  Map<String, dynamic> toJson() {\r\n    return {\r\n      'id': id,\r\n      'name': name,\r\n      'description': description,\r\n      'color_code': colorCode,\r\n      'is_system_category': isSystemCategory,\r\n      'created_at': createdAt.toIso8601String(),\r\n    };\r\n  }\r\n\r\n  PostCategory copyWith({\r\n    String? id,\r\n    String? name,\r\n    String? description,\r\n    String? colorCode,\r\n    bool? isSystemCategory,\r\n    DateTime? createdAt,\r\n  }) {\r\n    return PostCategory(\r\n      id: id ?? this.id,\r\n      name: name ?? this.name,\r\n      description: description ?? this.description,\r\n      colorCode: colorCode ?? this.colorCode,\r\n      isSystemCategory: isSystemCategory ?? this.isSystemCategory,\r\n      createdAt: createdAt ?? this.createdAt,\r\n    );\r\n  }\r\n}\r\n",
      "post.dart": "enum PostStatus { active, archived, draft }\r\n\r\nclass Post {\r\n  final String id;\r\n  final String authorId;\r\n  final String title;\r\n  final String content;\r\n  final String? imageUrl;\r\n  final PostStatus status;\r\n  final bool isFeatured;\r\n  final int viewCount;\r\n  final int likeCount;\r\n  final DateTime createdAt;\r\n  final DateTime updatedAt;\r\n\r\n  // Related data that may be loaded with joins\r\n  final String? authorName;\r\n  final List<String>? categories;\r\n  final bool? isLikedByCurrentUser;\r\n\r\n  Post({\r\n    required this.id,\r\n    required this.authorId,\r\n    required this.title,\r\n    required this.content,\r\n    this.imageUrl,\r\n    required this.status,\r\n    required this.isFeatured,\r\n    required this.viewCount,\r\n    required this.likeCount,\r\n    required this.createdAt,\r\n    required this.updatedAt,\r\n    this.authorName,\r\n    this.categories,\r\n    this.isLikedByCurrentUser,\r\n  });\r\n\r\n  factory Post.fromJson(Map<String, dynamic> json) {\r\n    return Post(\r\n      id: json['id'] as String,\r\n      authorId: json['author_id'] as String,\r\n      title: json['title'] as String,\r\n      content: json['content'] as String,\r\n      imageUrl: json['image_url'] as String?,\r\n      status: _parseStatus(json['status'] as String?),\r\n      isFeatured: json['is_featured'] as bool? ?? false,\r\n      viewCount: json['view_count'] as int? ?? 0,\r\n      likeCount: json['like_count'] as int? ?? 0,\r\n      createdAt: DateTime.parse(json['created_at'] as String),\r\n      updatedAt: DateTime.parse(json['updated_at'] as String),\r\n      authorName: json['author_name'] as String?,\r\n      categories: json['categories'] != null\r\n          ? List<String>.from(json['categories'])\r\n          : null,\r\n      isLikedByCurrentUser: json['is_liked_by_current_user'] as bool?,\r\n    );\r\n  }\r\n\r\n  Map<String, dynamic> toJson() {\r\n    return {\r\n      'id': id,\r\n      'author_id': authorId,\r\n      'title': title,\r\n      'content': content,\r\n      'image_url': imageUrl,\r\n      'status': status.name,\r\n      'is_featured': isFeatured,\r\n      'view_count': viewCount,\r\n      'like_count': likeCount,\r\n      'created_at': createdAt.toIso8601String(),\r\n      'updated_at': updatedAt.toIso8601String(),\r\n    };\r\n  }\r\n\r\n  static PostStatus _parseStatus(String? statusStr) {\r\n    switch (statusStr) {\r\n      case 'active':\r\n        return PostStatus.active;\r\n      case 'archived':\r\n        return PostStatus.archived;\r\n      case 'draft':\r\n        return PostStatus.draft;\r\n      default:\r\n        return PostStatus.active;\r\n    }\r\n  }\r\n\r\n  Post copyWith({\r\n    String? id,\r\n    String? authorId,\r\n    String? title,\r\n    String? content,\r\n    String? imageUrl,\r\n    PostStatus? status,\r\n    bool? isFeatured,\r\n    int? viewCount,\r\n    int? likeCount,\r\n    DateTime? createdAt,\r\n    DateTime? updatedAt,\r\n    String? authorName,\r\n    List<String>? categories,\r\n    bool? isLikedByCurrentUser,\r\n  }) {\r\n    return Post(\r\n      id: id ?? this.id,\r\n      authorId: authorId ?? this.authorId,\r\n      title: title ?? this.title,\r\n      content: content ?? this.content,\r\n      imageUrl: imageUrl ?? this.imageUrl,\r\n      status: status ?? this.status,\r\n      isFeatured: isFeatured ?? this.isFeatured,\r\n      viewCount: viewCount ?? this.viewCount,\r\n      likeCount: likeCount ?? this.likeCount,\r\n      createdAt: createdAt ?? this.createdAt,\r\n      updatedAt: updatedAt ?? this.updatedAt,\r\n      authorName: authorName ?? this.authorName,\r\n      categories: categories ?? this.categories,\r\n      isLikedByCurrentUser: isLikedByCurrentUser ?? this.isLikedByCurrentUser,\r\n    );\r\n  }\r\n\r\n  String get timeAgo {\r\n    final now = DateTime.now();\r\n    final difference = now.difference(createdAt);\r\n\r\n    if (difference.inDays > 7) {\r\n      return '${createdAt.day}/${createdAt.month}/${createdAt.year}';\r\n    } else if (difference.inDays > 0) {\r\n      return '${difference.inDays}d ago';\r\n    } else if (difference.inHours > 0) {\r\n      return '${difference.inHours}h ago';\r\n    } else if (difference.inMinutes > 0) {\r\n      return '${difference.inMinutes}m ago';\r\n    } else {\r\n      return 'Just now';\r\n    }\r\n  }\r\n}\r\n",
      "user_profile.dart": "enum UserRole { student, admin }\r\n\r\nclass UserProfile {\r\n  final String id;\r\n  final String email;\r\n  final String fullName;\r\n  final UserRole role;\r\n  final String? universityId;\r\n  final String? department;\r\n  final String? studentId;\r\n  final String? profileImageUrl;\r\n  final DateTime createdAt;\r\n  final DateTime updatedAt;\r\n\r\n  UserProfile({\r\n    required this.id,\r\n    required this.email,\r\n    required this.fullName,\r\n    required this.role,\r\n    this.universityId,\r\n    this.department,\r\n    this.studentId,\r\n    this.profileImageUrl,\r\n    required this.createdAt,\r\n    required this.updatedAt,\r\n  });\r\n\r\n  factory UserProfile.fromJson(Map<String, dynamic> json) {\r\n    return UserProfile(\r\n      id: json['id'] as String,\r\n      email: json['email'] as String,\r\n      fullName: json['full_name'] as String,\r\n      role: _parseRole(json['role'] as String?),\r\n      universityId: json['university_id'] as String?,\r\n      department: json['department'] as String?,\r\n      studentId: json['student_id'] as String?,\r\n      profileImageUrl: json['profile_image_url'] as String?,\r\n      createdAt: DateTime.parse(json['created_at'] as String),\r\n      updatedAt: DateTime.parse(json['updated_at'] as String),\r\n    );\r\n  }\r\n\r\n  Map<String, dynamic> toJson() {\r\n    return {\r\n      'id': id,\r\n      'email': email,\r\n      'full_name': fullName,\r\n      'role': role.name,\r\n      'university_id': universityId,\r\n      'department': department,\r\n      'student_id': studentId,\r\n      'profile_image_url': profileImageUrl,\r\n      'created_at': createdAt.toIso8601String(),\r\n      'updated_at': updatedAt.toIso8601String(),\r\n    };\r\n  }\r\n\r\n  static UserRole _parseRole(String? roleStr) {\r\n    switch (roleStr) {\r\n      case 'admin':\r\n        return UserRole.admin;\r\n      case 'student':\r\n      default:\r\n        return UserRole.student;\r\n    }\r\n  }\r\n\r\n  bool get isAdmin => role == UserRole.admin;\r\n  bool get isStudent => role == UserRole.student;\r\n\r\n  UserProfile copyWith({\r\n    String? id,\r\n    String? email,\r\n    String? fullName,\r\n    UserRole? role,\r\n    String? universityId,\r\n    String? department,\r\n    String? studentId,\r\n    String? profileImageUrl,\r\n    DateTime? createdAt,\r\n    DateTime? updatedAt,\r\n  }) {\r\n    return UserProfile(\r\n      id: id ?? this.id,\r\n      email: email ?? this.email,\r\n      fullName: fullName ?? this.fullName,\r\n      role: role ?? this.role,\r\n      universityId: universityId ?? this.universityId,\r\n      department: department ?? this.department,\r\n      studentId: studentId ?? this.studentId,\r\n      profileImageUrl: profileImageUrl ?? this.profileImageUrl,\r\n      createdAt: createdAt ?? this.createdAt,\r\n      updatedAt: updatedAt ?? this.updatedAt,\r\n    );\r\n  }\r\n}\r\n"
    },
    "presentation": {
      "create_post_screen": {
        "create_post_screen.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../models/post_category.dart';\r\nimport '../../services/auth_service.dart';\r\nimport '../../services/posts_service.dart';\r\n\r\nclass CreatePostScreen extends StatefulWidget {\r\n  const CreatePostScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<CreatePostScreen> createState() => _CreatePostScreenState();\r\n}\r\n\r\nclass _CreatePostScreenState extends State<CreatePostScreen> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  final _titleController = TextEditingController();\r\n  final _contentController = TextEditingController();\r\n  final _imageUrlController = TextEditingController();\r\n\r\n  List<PostCategory> _categories = [];\r\n  List<String> _selectedCategoryIds = [];\r\n  bool _isFeatured = false;\r\n  bool _isLoading = false;\r\n  bool _isLoadingCategories = true;\r\n  String _error = '';\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _checkPermissionsAndLoadData();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _titleController.dispose();\r\n    _contentController.dispose();\r\n    _imageUrlController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _checkPermissionsAndLoadData() async {\r\n    try {\r\n      // Check if user is admin\r\n      final isAdmin = await AuthService.instance.isCurrentUserAdmin();\r\n      if (!isAdmin) {\r\n        if (mounted) {\r\n          ScaffoldMessenger.of(context).showSnackBar(\r\n            const SnackBar(\r\n              content: Text('Only administrators can create posts'),\r\n              backgroundColor: Colors.red,\r\n            ),\r\n          );\r\n          Navigator.pop(context);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Load categories\r\n      await _loadCategories();\r\n    } catch (error) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text('Error: $error'),\r\n            backgroundColor: Colors.red,\r\n          ),\r\n        );\r\n        Navigator.pop(context);\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _loadCategories() async {\r\n    try {\r\n      setState(() {\r\n        _isLoadingCategories = true;\r\n        _error = '';\r\n      });\r\n\r\n      final categories = await PostsService.instance.getCategories();\r\n\r\n      if (mounted) {\r\n        setState(() {\r\n          _categories = categories;\r\n          _isLoadingCategories = false;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        setState(() {\r\n          _error = error.toString();\r\n          _isLoadingCategories = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _createPost() async {\r\n    if (!_formKey.currentState!.validate()) return;\r\n\r\n    setState(() {\r\n      _isLoading = true;\r\n    });\r\n\r\n    try {\r\n      await PostsService.instance.createPost(\r\n        title: _titleController.text.trim(),\r\n        content: _contentController.text.trim(),\r\n        imageUrl: _imageUrlController.text.trim().isEmpty\r\n            ? null\r\n            : _imageUrlController.text.trim(),\r\n        isFeatured: _isFeatured,\r\n        categoryIds:\r\n            _selectedCategoryIds.isNotEmpty ? _selectedCategoryIds : null,\r\n      );\r\n\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text('Post created successfully!'),\r\n            backgroundColor: Colors.green,\r\n          ),\r\n        );\r\n        Navigator.pop(context);\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text(\r\n                'Failed to create post: ${error.toString().replaceAll('Exception: Failed to create post: ', '')}'),\r\n            backgroundColor: Colors.red,\r\n            duration: const Duration(seconds: 4),\r\n          ),\r\n        );\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() {\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Widget _buildCategoriesSection() {\r\n    if (_isLoadingCategories) {\r\n      return Container(\r\n        padding: EdgeInsets.all(4.w),\r\n        decoration: BoxDecoration(\r\n          color: Colors.white,\r\n          borderRadius: BorderRadius.circular(12),\r\n          boxShadow: [\r\n            BoxShadow(\r\n              color: Colors.grey.withAlpha(26),\r\n              spreadRadius: 1,\r\n              blurRadius: 4,\r\n              offset: const Offset(0, 2),\r\n            ),\r\n          ],\r\n        ),\r\n        child: const Center(child: CircularProgressIndicator()),\r\n      );\r\n    }\r\n\r\n    if (_categories.isEmpty) {\r\n      return const SizedBox.shrink();\r\n    }\r\n\r\n    return Container(\r\n      padding: EdgeInsets.all(4.w),\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(12),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.grey.withAlpha(26),\r\n            spreadRadius: 1,\r\n            blurRadius: 4,\r\n            offset: const Offset(0, 2),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          Text(\r\n            'Categories (Optional)',\r\n            style: GoogleFonts.inter(\r\n              fontSize: 14.sp,\r\n              fontWeight: FontWeight.w600,\r\n              color: Colors.black87,\r\n            ),\r\n          ),\r\n          SizedBox(height: 2.h),\r\n          Wrap(\r\n            spacing: 2.w,\r\n            runSpacing: 1.h,\r\n            children: _categories.map((category) {\r\n              final isSelected = _selectedCategoryIds.contains(category.id);\r\n              return GestureDetector(\r\n                onTap: () {\r\n                  setState(() {\r\n                    if (isSelected) {\r\n                      _selectedCategoryIds.remove(category.id);\r\n                    } else {\r\n                      _selectedCategoryIds.add(category.id);\r\n                    }\r\n                  });\r\n                },\r\n                child: Container(\r\n                  padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 1.h),\r\n                  decoration: BoxDecoration(\r\n                    color: isSelected\r\n                        ? Theme.of(context).primaryColor\r\n                        : Colors.grey[100],\r\n                    borderRadius: BorderRadius.circular(8),\r\n                    border: Border.all(\r\n                      color: isSelected\r\n                          ? Theme.of(context).primaryColor\r\n                          : Colors.grey[300]!,\r\n                    ),\r\n                  ),\r\n                  child: Text(\r\n                    category.name,\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 11.sp,\r\n                      fontWeight: FontWeight.w500,\r\n                      color: isSelected ? Colors.white : Colors.grey[700],\r\n                    ),\r\n                  ),\r\n                ),\r\n              );\r\n            }).toList(),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: Colors.grey[50],\r\n      appBar: AppBar(\r\n        backgroundColor: Colors.white,\r\n        elevation: 1,\r\n        leading: IconButton(\r\n          icon: const Icon(Icons.close, color: Colors.black87),\r\n          onPressed: () => Navigator.pop(context),\r\n        ),\r\n        title: Text(\r\n          'Create Post',\r\n          style: GoogleFonts.inter(\r\n            fontSize: 18.sp,\r\n            fontWeight: FontWeight.bold,\r\n            color: Colors.black87,\r\n          ),\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: _isLoading ? null : _createPost,\r\n            child: _isLoading\r\n                ? SizedBox(\r\n                    width: 20,\r\n                    height: 20,\r\n                    child: CircularProgressIndicator(\r\n                      strokeWidth: 2,\r\n                      valueColor: AlwaysStoppedAnimation<Color>(\r\n                        Theme.of(context).primaryColor,\r\n                      ),\r\n                    ),\r\n                  )\r\n                : Text(\r\n                    'Post',\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 14.sp,\r\n                      fontWeight: FontWeight.w600,\r\n                      color: Theme.of(context).primaryColor,\r\n                    ),\r\n                  ),\r\n          ),\r\n          SizedBox(width: 2.w),\r\n        ],\r\n      ),\r\n      body: SingleChildScrollView(\r\n        padding: EdgeInsets.all(4.w),\r\n        child: Form(\r\n          key: _formKey,\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: [\r\n              // Title field\r\n              Container(\r\n                padding: EdgeInsets.all(4.w),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  borderRadius: BorderRadius.circular(12),\r\n                  boxShadow: [\r\n                    BoxShadow(\r\n                      color: Colors.grey.withAlpha(26),\r\n                      spreadRadius: 1,\r\n                      blurRadius: 4,\r\n                      offset: const Offset(0, 2),\r\n                    ),\r\n                  ],\r\n                ),\r\n                child: TextFormField(\r\n                  controller: _titleController,\r\n                  decoration: InputDecoration(\r\n                    labelText: 'Post Title',\r\n                    hintText: 'Enter an engaging title for your post',\r\n                    border: OutlineInputBorder(\r\n                      borderRadius: BorderRadius.circular(8),\r\n                    ),\r\n                    prefixIcon: const Icon(Icons.title),\r\n                  ),\r\n                  validator: (value) {\r\n                    if (value == null || value.trim().isEmpty) {\r\n                      return 'Title is required';\r\n                    }\r\n                    if (value.trim().length < 5) {\r\n                      return 'Title must be at least 5 characters';\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n              ),\r\n\r\n              SizedBox(height: 3.h),\r\n\r\n              // Content field\r\n              Container(\r\n                padding: EdgeInsets.all(4.w),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  borderRadius: BorderRadius.circular(12),\r\n                  boxShadow: [\r\n                    BoxShadow(\r\n                      color: Colors.grey.withAlpha(26),\r\n                      spreadRadius: 1,\r\n                      blurRadius: 4,\r\n                      offset: const Offset(0, 2),\r\n                    ),\r\n                  ],\r\n                ),\r\n                child: TextFormField(\r\n                  controller: _contentController,\r\n                  maxLines: 8,\r\n                  decoration: InputDecoration(\r\n                    labelText: 'Post Content',\r\n                    hintText: 'Write your post content here...',\r\n                    border: OutlineInputBorder(\r\n                      borderRadius: BorderRadius.circular(8),\r\n                    ),\r\n                    alignLabelWithHint: true,\r\n                  ),\r\n                  validator: (value) {\r\n                    if (value == null || value.trim().isEmpty) {\r\n                      return 'Content is required';\r\n                    }\r\n                    if (value.trim().length < 10) {\r\n                      return 'Content must be at least 10 characters';\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n              ),\r\n\r\n              SizedBox(height: 3.h),\r\n\r\n              // Image URL field (optional)\r\n              Container(\r\n                padding: EdgeInsets.all(4.w),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  borderRadius: BorderRadius.circular(12),\r\n                  boxShadow: [\r\n                    BoxShadow(\r\n                      color: Colors.grey.withAlpha(26),\r\n                      spreadRadius: 1,\r\n                      blurRadius: 4,\r\n                      offset: const Offset(0, 2),\r\n                    ),\r\n                  ],\r\n                ),\r\n                child: TextFormField(\r\n                  controller: _imageUrlController,\r\n                  decoration: InputDecoration(\r\n                    labelText: 'Image URL (Optional)',\r\n                    hintText: 'https://example.com/image.jpg',\r\n                    border: OutlineInputBorder(\r\n                      borderRadius: BorderRadius.circular(8),\r\n                    ),\r\n                    prefixIcon: const Icon(Icons.image),\r\n                  ),\r\n                  validator: (value) {\r\n                    if (value != null && value.trim().isNotEmpty) {\r\n                      if (!RegExp(\r\n                              r'^https?://.*\\.(jpg|jpeg|png|gif|webp)(\\?.*)?$',\r\n                              caseSensitive: false)\r\n                          .hasMatch(value.trim())) {\r\n                        return 'Please enter a valid image URL';\r\n                      }\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n              ),\r\n\r\n              SizedBox(height: 3.h),\r\n\r\n              // Categories section\r\n              _buildCategoriesSection(),\r\n\r\n              SizedBox(height: 3.h),\r\n\r\n              // Featured toggle\r\n              Container(\r\n                padding: EdgeInsets.all(4.w),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  borderRadius: BorderRadius.circular(12),\r\n                  boxShadow: [\r\n                    BoxShadow(\r\n                      color: Colors.grey.withAlpha(26),\r\n                      spreadRadius: 1,\r\n                      blurRadius: 4,\r\n                      offset: const Offset(0, 2),\r\n                    ),\r\n                  ],\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    Icon(\r\n                      Icons.star_outline,\r\n                      color: Colors.amber[600],\r\n                    ),\r\n                    SizedBox(width: 3.w),\r\n                    Expanded(\r\n                      child: Column(\r\n                        crossAxisAlignment: CrossAxisAlignment.start,\r\n                        children: [\r\n                          Text(\r\n                            'Featured Post',\r\n                            style: GoogleFonts.inter(\r\n                              fontSize: 14.sp,\r\n                              fontWeight: FontWeight.w600,\r\n                              color: Colors.black87,\r\n                            ),\r\n                          ),\r\n                          Text(\r\n                            'Featured posts appear at the top of the feed',\r\n                            style: GoogleFonts.inter(\r\n                              fontSize: 11.sp,\r\n                              color: Colors.grey[600],\r\n                            ),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                    Switch(\r\n                      value: _isFeatured,\r\n                      onChanged: (value) {\r\n                        setState(() {\r\n                          _isFeatured = value;\r\n                        });\r\n                      },\r\n                      activeColor: Theme.of(context).primaryColor,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n\r\n              SizedBox(height: 4.h),\r\n\r\n              // Create post button\r\n              SizedBox(\r\n                width: double.infinity,\r\n                child: ElevatedButton(\r\n                  onPressed: _isLoading ? null : _createPost,\r\n                  style: ElevatedButton.styleFrom(\r\n                    backgroundColor: Theme.of(context).primaryColor,\r\n                    foregroundColor: Colors.white,\r\n                    padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                    shape: RoundedRectangleBorder(\r\n                      borderRadius: BorderRadius.circular(12),\r\n                    ),\r\n                  ),\r\n                  child: _isLoading\r\n                      ? SizedBox(\r\n                          height: 20,\r\n                          width: 20,\r\n                          child: CircularProgressIndicator(\r\n                            strokeWidth: 2,\r\n                            valueColor:\r\n                                AlwaysStoppedAnimation<Color>(Colors.white),\r\n                          ),\r\n                        )\r\n                      : Text(\r\n                          'Create Post',\r\n                          style: GoogleFonts.inter(\r\n                            fontSize: 14.sp,\r\n                            fontWeight: FontWeight.w600,\r\n                          ),\r\n                        ),\r\n                ),\r\n              ),\r\n\r\n              SizedBox(height: 2.h),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n",
        "widgets": {
          "media_attachment_widget.dart": "import 'dart:io' if (dart.library.io) 'dart:io';\r\n\r\nimport 'package:camera/camera.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:permission_handler/permission_handler.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass MediaAttachmentWidget extends StatefulWidget {\r\n  final List<XFile> selectedImages;\r\n  final Function(List<XFile>) onImagesChanged;\r\n\r\n  const MediaAttachmentWidget({\r\n    Key? key,\r\n    required this.selectedImages,\r\n    required this.onImagesChanged,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<MediaAttachmentWidget> createState() => _MediaAttachmentWidgetState();\r\n}\r\n\r\nclass _MediaAttachmentWidgetState extends State<MediaAttachmentWidget> {\r\n  final ImagePicker _picker = ImagePicker();\r\n  List<CameraDescription>? _cameras;\r\n  CameraController? _cameraController;\r\n  bool _isCameraInitialized = false;\r\n  bool _showCamera = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _initializeCamera();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _cameraController?.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<bool> _requestCameraPermission() async {\r\n    if (kIsWeb) return true;\r\n    return (await Permission.camera.request()).isGranted;\r\n  }\r\n\r\n  Future<void> _initializeCamera() async {\r\n    try {\r\n      _cameras = await availableCameras();\r\n      if (_cameras != null && _cameras!.isNotEmpty) {\r\n        final camera = kIsWeb\r\n            ? _cameras!.firstWhere(\r\n                (c) => c.lensDirection == CameraLensDirection.front,\r\n                orElse: () => _cameras!.first)\r\n            : _cameras!.firstWhere(\r\n                (c) => c.lensDirection == CameraLensDirection.back,\r\n                orElse: () => _cameras!.first);\r\n\r\n        _cameraController = CameraController(\r\n            camera, kIsWeb ? ResolutionPreset.medium : ResolutionPreset.high);\r\n\r\n        await _cameraController!.initialize();\r\n        await _applySettings();\r\n\r\n        if (mounted) {\r\n          setState(() {\r\n            _isCameraInitialized = true;\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // Silent fail - camera not available\r\n    }\r\n  }\r\n\r\n  Future<void> _applySettings() async {\r\n    if (_cameraController == null) return;\r\n\r\n    try {\r\n      await _cameraController!.setFocusMode(FocusMode.auto);\r\n    } catch (e) {}\r\n\r\n    if (!kIsWeb) {\r\n      try {\r\n        await _cameraController!.setFlashMode(FlashMode.auto);\r\n      } catch (e) {}\r\n    }\r\n  }\r\n\r\n  Future<void> _capturePhoto() async {\r\n    if (_cameraController == null || !_cameraController!.value.isInitialized)\r\n      return;\r\n\r\n    try {\r\n      final XFile photo = await _cameraController!.takePicture();\r\n      final updatedImages = List<XFile>.from(widget.selectedImages)..add(photo);\r\n      widget.onImagesChanged(updatedImages);\r\n\r\n      setState(() {\r\n        _showCamera = false;\r\n      });\r\n    } catch (e) {\r\n      // Handle error silently\r\n    }\r\n  }\r\n\r\n  Future<void> _pickFromGallery() async {\r\n    try {\r\n      final List<XFile> images = await _picker.pickMultiImage();\r\n      if (images.isNotEmpty) {\r\n        final updatedImages = List<XFile>.from(widget.selectedImages)\r\n          ..addAll(images);\r\n        widget.onImagesChanged(updatedImages);\r\n      }\r\n    } catch (e) {\r\n      // Handle error silently\r\n    }\r\n  }\r\n\r\n  Future<void> _openCamera() async {\r\n    final hasPermission = await _requestCameraPermission();\r\n    if (hasPermission && _isCameraInitialized) {\r\n      setState(() {\r\n        _showCamera = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  void _removeImage(int index) {\r\n    final updatedImages = List<XFile>.from(widget.selectedImages)\r\n      ..removeAt(index);\r\n    widget.onImagesChanged(updatedImages);\r\n  }\r\n\r\n  void _reorderImages(int oldIndex, int newIndex) {\r\n    if (newIndex > oldIndex) {\r\n      newIndex -= 1;\r\n    }\r\n    final updatedImages = List<XFile>.from(widget.selectedImages);\r\n    final item = updatedImages.removeAt(oldIndex);\r\n    updatedImages.insert(newIndex, item);\r\n    widget.onImagesChanged(updatedImages);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    if (_showCamera && _isCameraInitialized && _cameraController != null) {\r\n      return _buildCameraView();\r\n    }\r\n\r\n    return Container(\r\n      width: double.infinity,\r\n      padding: EdgeInsets.all(4.w),\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.surface,\r\n        borderRadius: BorderRadius.circular(12),\r\n        border: Border.all(\r\n          color: AppTheme.lightTheme.colorScheme.outline.withValues(alpha: 0.3),\r\n        ),\r\n      ),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          Row(\r\n            children: [\r\n              CustomIconWidget(\r\n                iconName: 'photo_library',\r\n                color: AppTheme.lightTheme.colorScheme.primary,\r\n                size: 20,\r\n              ),\r\n              SizedBox(width: 2.w),\r\n              Text(\r\n                'Adjuntar medios',\r\n                style: AppTheme.lightTheme.textTheme.titleSmall,\r\n              ),\r\n            ],\r\n          ),\r\n          SizedBox(height: 3.h),\r\n          Row(\r\n            children: [\r\n              Expanded(\r\n                child: ElevatedButton.icon(\r\n                  onPressed: _pickFromGallery,\r\n                  icon: CustomIconWidget(\r\n                    iconName: 'photo_library',\r\n                    color: AppTheme.lightTheme.colorScheme.onPrimary,\r\n                    size: 18,\r\n                  ),\r\n                  label: Text('Galería'),\r\n                  style: ElevatedButton.styleFrom(\r\n                    padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                  ),\r\n                ),\r\n              ),\r\n              SizedBox(width: 3.w),\r\n              Expanded(\r\n                child: OutlinedButton.icon(\r\n                  onPressed: _isCameraInitialized ? _openCamera : null,\r\n                  icon: CustomIconWidget(\r\n                    iconName: 'camera_alt',\r\n                    color: AppTheme.lightTheme.colorScheme.primary,\r\n                    size: 18,\r\n                  ),\r\n                  label: Text('Cámara'),\r\n                  style: OutlinedButton.styleFrom(\r\n                    padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          if (widget.selectedImages.isNotEmpty) ...[\r\n            SizedBox(height: 3.h),\r\n            Text(\r\n              '${widget.selectedImages.length} imagen${widget.selectedImages.length > 1 ? 'es' : ''} seleccionada${widget.selectedImages.length > 1 ? 's' : ''}',\r\n              style: AppTheme.lightTheme.textTheme.bodySmall,\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            SizedBox(\r\n              height: 20.h,\r\n              child: ReorderableListView.builder(\r\n                scrollDirection: Axis.horizontal,\r\n                itemCount: widget.selectedImages.length,\r\n                onReorder: _reorderImages,\r\n                itemBuilder: (context, index) {\r\n                  final image = widget.selectedImages[index];\r\n                  return Container(\r\n                    key: ValueKey(image.path),\r\n                    margin: EdgeInsets.only(right: 2.w),\r\n                    child: Stack(\r\n                      children: [\r\n                        Container(\r\n                          width: 30.w,\r\n                          height: 18.h,\r\n                          decoration: BoxDecoration(\r\n                            borderRadius: BorderRadius.circular(8),\r\n                            border: Border.all(\r\n                              color: AppTheme.lightTheme.colorScheme.outline\r\n                                  .withValues(alpha: 0.3),\r\n                            ),\r\n                          ),\r\n                          child: ClipRRect(\r\n                            borderRadius: BorderRadius.circular(8),\r\n                            child: kIsWeb\r\n                                ? Image.network(\r\n                                    image.path,\r\n                                    fit: BoxFit.cover,\r\n                                    errorBuilder: (context, error, stackTrace) {\r\n                                      return Container(\r\n                                        color: AppTheme\r\n                                            .lightTheme.colorScheme.surface,\r\n                                        child: Center(\r\n                                          child: CustomIconWidget(\r\n                                            iconName: 'image',\r\n                                            color: AppTheme\r\n                                                .lightTheme.colorScheme.outline,\r\n                                            size: 24,\r\n                                          ),\r\n                                        ),\r\n                                      );\r\n                                    },\r\n                                  )\r\n                                : Image.file(\r\n                                    File(image.path),\r\n                                    fit: BoxFit.cover,\r\n                                    errorBuilder: (context, error, stackTrace) {\r\n                                      return Container(\r\n                                        color: AppTheme\r\n                                            .lightTheme.colorScheme.surface,\r\n                                        child: Center(\r\n                                          child: CustomIconWidget(\r\n                                            iconName: 'image',\r\n                                            color: AppTheme\r\n                                                .lightTheme.colorScheme.outline,\r\n                                            size: 24,\r\n                                          ),\r\n                                        ),\r\n                                      );\r\n                                    },\r\n                                  ),\r\n                          ),\r\n                        ),\r\n                        Positioned(\r\n                          top: 1.w,\r\n                          right: 1.w,\r\n                          child: GestureDetector(\r\n                            onTap: () => _removeImage(index),\r\n                            child: Container(\r\n                              padding: EdgeInsets.all(1.w),\r\n                              decoration: BoxDecoration(\r\n                                color: AppTheme.lightTheme.colorScheme.error,\r\n                                shape: BoxShape.circle,\r\n                              ),\r\n                              child: CustomIconWidget(\r\n                                iconName: 'close',\r\n                                color: AppTheme.lightTheme.colorScheme.onError,\r\n                                size: 16,\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                        Positioned(\r\n                          bottom: 1.w,\r\n                          left: 1.w,\r\n                          child: Container(\r\n                            padding: EdgeInsets.symmetric(\r\n                                horizontal: 2.w, vertical: 0.5.h),\r\n                            decoration: BoxDecoration(\r\n                              color: Colors.black.withValues(alpha: 0.7),\r\n                              borderRadius: BorderRadius.circular(4),\r\n                            ),\r\n                            child: CustomIconWidget(\r\n                              iconName: 'drag_handle',\r\n                              color: Colors.white,\r\n                              size: 14,\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  );\r\n                },\r\n              ),\r\n            ),\r\n          ],\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildCameraView() {\r\n    return Container(\r\n      height: 60.h,\r\n      decoration: BoxDecoration(\r\n        borderRadius: BorderRadius.circular(12),\r\n        color: Colors.black,\r\n      ),\r\n      child: ClipRRect(\r\n        borderRadius: BorderRadius.circular(12),\r\n        child: Stack(\r\n          children: [\r\n            Positioned.fill(\r\n              child: CameraPreview(_cameraController!),\r\n            ),\r\n            Positioned(\r\n              top: 2.h,\r\n              left: 4.w,\r\n              child: GestureDetector(\r\n                onTap: () {\r\n                  setState(() {\r\n                    _showCamera = false;\r\n                  });\r\n                },\r\n                child: Container(\r\n                  padding: EdgeInsets.all(2.w),\r\n                  decoration: BoxDecoration(\r\n                    color: Colors.black.withValues(alpha: 0.5),\r\n                    shape: BoxShape.circle,\r\n                  ),\r\n                  child: CustomIconWidget(\r\n                    iconName: 'close',\r\n                    color: Colors.white,\r\n                    size: 24,\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n            Positioned(\r\n              bottom: 4.h,\r\n              left: 0,\r\n              right: 0,\r\n              child: Center(\r\n                child: GestureDetector(\r\n                  onTap: _capturePhoto,\r\n                  child: Container(\r\n                    width: 20.w,\r\n                    height: 20.w,\r\n                    decoration: BoxDecoration(\r\n                      shape: BoxShape.circle,\r\n                      color: Colors.white,\r\n                      border: Border.all(\r\n                        color: Colors.white,\r\n                        width: 3,\r\n                      ),\r\n                    ),\r\n                    child: Center(\r\n                      child: Container(\r\n                        width: 15.w,\r\n                        height: 15.w,\r\n                        decoration: BoxDecoration(\r\n                          shape: BoxShape.circle,\r\n                          color: Colors.white,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n",
          "post_category_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass PostCategoryWidget extends StatelessWidget {\r\n  final String selectedCategory;\r\n  final Function(String) onCategoryChanged;\r\n\r\n  const PostCategoryWidget({\r\n    Key? key,\r\n    required this.selectedCategory,\r\n    required this.onCategoryChanged,\r\n  }) : super(key: key);\r\n\r\n  static const Map<String, Map<String, dynamic>> categories = {\r\n    'Académico': {\r\n      'color': Color(0xFF2B5CE6),\r\n      'icon': 'school',\r\n    },\r\n    'Social': {\r\n      'color': Color(0xFF8B5CF6),\r\n      'icon': 'people',\r\n    },\r\n    'Deportes': {\r\n      'color': Color(0xFF10B981),\r\n      'icon': 'sports_soccer',\r\n    },\r\n    'Emergencia': {\r\n      'color': Color(0xFFEF4444),\r\n      'icon': 'warning',\r\n    },\r\n    'General': {\r\n      'color': Color(0xFF6B7280),\r\n      'icon': 'info',\r\n    },\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity,\r\n      padding: EdgeInsets.all(4.w),\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.surface,\r\n        borderRadius: BorderRadius.circular(12),\r\n        border: Border.all(\r\n          color: AppTheme.lightTheme.colorScheme.outline.withValues(alpha: 0.3),\r\n        ),\r\n      ),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          Row(\r\n            children: [\r\n              CustomIconWidget(\r\n                iconName: 'category',\r\n                color: AppTheme.lightTheme.colorScheme.primary,\r\n                size: 20,\r\n              ),\r\n              SizedBox(width: 2.w),\r\n              Text(\r\n                'Categoría del evento',\r\n                style: AppTheme.lightTheme.textTheme.titleSmall,\r\n              ),\r\n            ],\r\n          ),\r\n          SizedBox(height: 3.h),\r\n          DropdownButtonFormField<String>(\r\n            value: selectedCategory.isNotEmpty ? selectedCategory : null,\r\n            decoration: InputDecoration(\r\n              hintText: 'Seleccionar categoría',\r\n              prefixIcon: selectedCategory.isNotEmpty\r\n                  ? Padding(\r\n                      padding: EdgeInsets.all(3.w),\r\n                      child: CustomIconWidget(\r\n                        iconName: categories[selectedCategory]!['icon'],\r\n                        color: categories[selectedCategory]!['color'],\r\n                        size: 20,\r\n                      ),\r\n                    )\r\n                  : Padding(\r\n                      padding: EdgeInsets.all(3.w),\r\n                      child: CustomIconWidget(\r\n                        iconName: 'category',\r\n                        color: AppTheme.lightTheme.colorScheme.outline,\r\n                        size: 20,\r\n                      ),\r\n                    ),\r\n              border: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(8),\r\n                borderSide: BorderSide(\r\n                  color: AppTheme.lightTheme.colorScheme.outline\r\n                      .withValues(alpha: 0.3),\r\n                ),\r\n              ),\r\n              enabledBorder: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(8),\r\n                borderSide: BorderSide(\r\n                  color: AppTheme.lightTheme.colorScheme.outline\r\n                      .withValues(alpha: 0.3),\r\n                ),\r\n              ),\r\n              focusedBorder: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(8),\r\n                borderSide: BorderSide(\r\n                  color: AppTheme.lightTheme.colorScheme.primary,\r\n                  width: 2,\r\n                ),\r\n              ),\r\n            ),\r\n            items: categories.entries.map((entry) {\r\n              return DropdownMenuItem<String>(\r\n                value: entry.key,\r\n                child: Row(\r\n                  children: [\r\n                    CustomIconWidget(\r\n                      iconName: entry.value['icon'],\r\n                      color: entry.value['color'],\r\n                      size: 20,\r\n                    ),\r\n                    SizedBox(width: 3.w),\r\n                    Text(\r\n                      entry.key,\r\n                      style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n                        color: entry.value['color'],\r\n                        fontWeight: FontWeight.w500,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              );\r\n            }).toList(),\r\n            onChanged: (String? value) {\r\n              if (value != null) {\r\n                onCategoryChanged(value);\r\n              }\r\n            },\r\n            dropdownColor: AppTheme.lightTheme.colorScheme.surface,\r\n            style: AppTheme.lightTheme.textTheme.bodyMedium,\r\n          ),\r\n          if (selectedCategory.isNotEmpty) ...[\r\n            SizedBox(height: 2.h),\r\n            Container(\r\n              padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 1.h),\r\n              decoration: BoxDecoration(\r\n                color: categories[selectedCategory]!['color']\r\n                    .withValues(alpha: 0.1),\r\n                borderRadius: BorderRadius.circular(8),\r\n                border: Border.all(\r\n                  color: categories[selectedCategory]!['color']\r\n                      .withValues(alpha: 0.3),\r\n                ),\r\n              ),\r\n              child: Row(\r\n                mainAxisSize: MainAxisSize.min,\r\n                children: [\r\n                  CustomIconWidget(\r\n                    iconName: categories[selectedCategory]!['icon'],\r\n                    color: categories[selectedCategory]!['color'],\r\n                    size: 16,\r\n                  ),\r\n                  SizedBox(width: 2.w),\r\n                  Text(\r\n                    selectedCategory,\r\n                    style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                      color: categories[selectedCategory]!['color'],\r\n                      fontWeight: FontWeight.w600,\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ],\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n",
          "post_scheduling_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass PostSchedulingWidget extends StatelessWidget {\r\n  final bool isScheduled;\r\n  final DateTime? scheduledDate;\r\n  final Function(bool) onScheduleToggle;\r\n  final Function(DateTime) onDateTimeChanged;\r\n\r\n  const PostSchedulingWidget({\r\n    Key? key,\r\n    required this.isScheduled,\r\n    this.scheduledDate,\r\n    required this.onScheduleToggle,\r\n    required this.onDateTimeChanged,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity,\r\n      padding: EdgeInsets.all(4.w),\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.surface,\r\n        borderRadius: BorderRadius.circular(12),\r\n        border: Border.all(\r\n          color: AppTheme.lightTheme.colorScheme.outline.withValues(alpha: 0.3),\r\n        ),\r\n      ),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          Row(\r\n            children: [\r\n              CustomIconWidget(\r\n                iconName: 'schedule',\r\n                color: AppTheme.lightTheme.colorScheme.primary,\r\n                size: 20,\r\n              ),\r\n              SizedBox(width: 2.w),\r\n              Expanded(\r\n                child: Text(\r\n                  'Programar publicación',\r\n                  style: AppTheme.lightTheme.textTheme.titleSmall,\r\n                ),\r\n              ),\r\n              Switch(\r\n                value: isScheduled,\r\n                onChanged: onScheduleToggle,\r\n                activeColor: AppTheme.lightTheme.colorScheme.primary,\r\n              ),\r\n            ],\r\n          ),\r\n          if (isScheduled) ...[\r\n            SizedBox(height: 3.h),\r\n            Container(\r\n              padding: EdgeInsets.all(3.w),\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.primaryContainer\r\n                    .withValues(alpha: 0.1),\r\n                borderRadius: BorderRadius.circular(8),\r\n                border: Border.all(\r\n                  color: AppTheme.lightTheme.colorScheme.primary\r\n                      .withValues(alpha: 0.3),\r\n                ),\r\n              ),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Text(\r\n                    'Fecha y hora de publicación',\r\n                    style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                      color: AppTheme.lightTheme.colorScheme.primary,\r\n                      fontWeight: FontWeight.w500,\r\n                    ),\r\n                  ),\r\n                  SizedBox(height: 2.h),\r\n                  Row(\r\n                    children: [\r\n                      Expanded(\r\n                        child: OutlinedButton.icon(\r\n                          onPressed: () => _selectDate(context),\r\n                          icon: CustomIconWidget(\r\n                            iconName: 'calendar_today',\r\n                            color: AppTheme.lightTheme.colorScheme.primary,\r\n                            size: 18,\r\n                          ),\r\n                          label: Text(\r\n                            scheduledDate != null\r\n                                ? '${scheduledDate!.day.toString().padLeft(2, '0')}/${scheduledDate!.month.toString().padLeft(2, '0')}/${scheduledDate!.year}'\r\n                                : 'Seleccionar fecha',\r\n                          ),\r\n                          style: OutlinedButton.styleFrom(\r\n                            padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                            alignment: Alignment.centerLeft,\r\n                          ),\r\n                        ),\r\n                      ),\r\n                      SizedBox(width: 3.w),\r\n                      Expanded(\r\n                        child: OutlinedButton.icon(\r\n                          onPressed: () => _selectTime(context),\r\n                          icon: CustomIconWidget(\r\n                            iconName: 'access_time',\r\n                            color: AppTheme.lightTheme.colorScheme.primary,\r\n                            size: 18,\r\n                          ),\r\n                          label: Text(\r\n                            scheduledDate != null\r\n                                ? '${scheduledDate!.hour.toString().padLeft(2, '0')}:${scheduledDate!.minute.toString().padLeft(2, '0')}'\r\n                                : 'Seleccionar hora',\r\n                          ),\r\n                          style: OutlinedButton.styleFrom(\r\n                            padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                            alignment: Alignment.centerLeft,\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                  if (scheduledDate != null) ...[\r\n                    SizedBox(height: 2.h),\r\n                    Container(\r\n                      padding: EdgeInsets.all(2.w),\r\n                      decoration: BoxDecoration(\r\n                        color: AppTheme.lightTheme.colorScheme.surface,\r\n                        borderRadius: BorderRadius.circular(6),\r\n                      ),\r\n                      child: Row(\r\n                        children: [\r\n                          CustomIconWidget(\r\n                            iconName: 'info',\r\n                            color: AppTheme.lightTheme.colorScheme.primary,\r\n                            size: 16,\r\n                          ),\r\n                          SizedBox(width: 2.w),\r\n                          Expanded(\r\n                            child: Text(\r\n                              'Se publicará el ${_formatDateTime(scheduledDate!)}',\r\n                              style: AppTheme.lightTheme.textTheme.bodySmall\r\n                                  ?.copyWith(\r\n                                color: AppTheme.lightTheme.colorScheme.primary,\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ],\r\n              ),\r\n            ),\r\n          ] else ...[\r\n            SizedBox(height: 2.h),\r\n            Container(\r\n              padding: EdgeInsets.all(3.w),\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.surface\r\n                    .withValues(alpha: 0.5),\r\n                borderRadius: BorderRadius.circular(8),\r\n              ),\r\n              child: Row(\r\n                children: [\r\n                  CustomIconWidget(\r\n                    iconName: 'flash_on',\r\n                    color: AppTheme.lightTheme.colorScheme.tertiary,\r\n                    size: 16,\r\n                  ),\r\n                  SizedBox(width: 2.w),\r\n                  Text(\r\n                    'Se publicará inmediatamente',\r\n                    style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                      color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ],\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n      context: context,\r\n      initialDate: scheduledDate ?? DateTime.now().add(Duration(hours: 1)),\r\n      firstDate: DateTime.now(),\r\n      lastDate: DateTime.now().add(Duration(days: 365)),\r\n      builder: (context, child) {\r\n        return Theme(\r\n          data: Theme.of(context).copyWith(\r\n            colorScheme: AppTheme.lightTheme.colorScheme,\r\n          ),\r\n          child: child!,\r\n        );\r\n      },\r\n    );\r\n\r\n    if (picked != null) {\r\n      final currentTime =\r\n          scheduledDate ?? DateTime.now().add(Duration(hours: 1));\r\n      final newDateTime = DateTime(\r\n        picked.year,\r\n        picked.month,\r\n        picked.day,\r\n        currentTime.hour,\r\n        currentTime.minute,\r\n      );\r\n      onDateTimeChanged(newDateTime);\r\n    }\r\n  }\r\n\r\n  Future<void> _selectTime(BuildContext context) async {\r\n    final TimeOfDay? picked = await showTimePicker(\r\n      context: context,\r\n      initialTime: scheduledDate != null\r\n          ? TimeOfDay.fromDateTime(scheduledDate!)\r\n          : TimeOfDay.fromDateTime(DateTime.now().add(Duration(hours: 1))),\r\n      builder: (context, child) {\r\n        return Theme(\r\n          data: Theme.of(context).copyWith(\r\n            colorScheme: AppTheme.lightTheme.colorScheme,\r\n          ),\r\n          child: child!,\r\n        );\r\n      },\r\n    );\r\n\r\n    if (picked != null) {\r\n      final currentDate =\r\n          scheduledDate ?? DateTime.now().add(Duration(hours: 1));\r\n      final newDateTime = DateTime(\r\n        currentDate.year,\r\n        currentDate.month,\r\n        currentDate.day,\r\n        picked.hour,\r\n        picked.minute,\r\n      );\r\n      onDateTimeChanged(newDateTime);\r\n    }\r\n  }\r\n\r\n  String _formatDateTime(DateTime dateTime) {\r\n    final months = [\r\n      'enero',\r\n      'febrero',\r\n      'marzo',\r\n      'abril',\r\n      'mayo',\r\n      'junio',\r\n      'julio',\r\n      'agosto',\r\n      'septiembre',\r\n      'octubre',\r\n      'noviembre',\r\n      'diciembre'\r\n    ];\r\n\r\n    return '${dateTime.day} de ${months[dateTime.month - 1]} de ${dateTime.year} a las ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';\r\n  }\r\n}\r\n",
          "rich_text_editor_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass RichTextEditorWidget extends StatefulWidget {\r\n  final String content;\r\n  final Function(String) onContentChanged;\r\n  final int maxCharacters;\r\n\r\n  const RichTextEditorWidget({\r\n    Key? key,\r\n    required this.content,\r\n    required this.onContentChanged,\r\n    this.maxCharacters = 500,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<RichTextEditorWidget> createState() => _RichTextEditorWidgetState();\r\n}\r\n\r\nclass _RichTextEditorWidgetState extends State<RichTextEditorWidget> {\r\n  late TextEditingController _controller;\r\n  late FocusNode _focusNode;\r\n  bool _isBold = false;\r\n  bool _isItalic = false;\r\n  bool _showToolbar = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _controller = TextEditingController(text: widget.content);\r\n    _focusNode = FocusNode();\r\n    _focusNode.addListener(() {\r\n      setState(() {\r\n        _showToolbar = _focusNode.hasFocus;\r\n      });\r\n    });\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  void _onTextChanged(String value) {\r\n    if (value.length <= widget.maxCharacters) {\r\n      widget.onContentChanged(value);\r\n    }\r\n  }\r\n\r\n  void _toggleBold() {\r\n    setState(() {\r\n      _isBold = !_isBold;\r\n    });\r\n  }\r\n\r\n  void _toggleItalic() {\r\n    setState(() {\r\n      _isItalic = !_isItalic;\r\n    });\r\n  }\r\n\r\n  void _insertLink() {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => _LinkDialog(\r\n        onLinkInserted: (link) {\r\n          final currentText = _controller.text;\r\n          final selection = _controller.selection;\r\n          final newText = currentText.replaceRange(\r\n            selection.start,\r\n            selection.end,\r\n            link,\r\n          );\r\n          _controller.text = newText;\r\n          _controller.selection = TextSelection.collapsed(\r\n            offset: selection.start + link.length,\r\n          );\r\n          _onTextChanged(newText);\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Color get _characterCountColor {\r\n    final remaining = widget.maxCharacters - _controller.text.length;\r\n    if (remaining < 50) return AppTheme.lightTheme.colorScheme.error;\r\n    if (remaining < 100) return Color(0xFFF59E0B);\r\n    return AppTheme.lightTheme.colorScheme.onSurfaceVariant;\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity,\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.surface,\r\n        borderRadius: BorderRadius.circular(12),\r\n        border: Border.all(\r\n          color: _focusNode.hasFocus\r\n              ? AppTheme.lightTheme.colorScheme.primary\r\n              : AppTheme.lightTheme.colorScheme.outline.withValues(alpha: 0.3),\r\n          width: _focusNode.hasFocus ? 2 : 1,\r\n        ),\r\n      ),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          if (_showToolbar) _buildToolbar(),\r\n          Padding(\r\n            padding: EdgeInsets.all(4.w),\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                TextField(\r\n                  controller: _controller,\r\n                  focusNode: _focusNode,\r\n                  maxLines: null,\r\n                  minLines: 5,\r\n                  maxLength: widget.maxCharacters,\r\n                  onChanged: _onTextChanged,\r\n                  style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n                    fontWeight: _isBold ? FontWeight.bold : FontWeight.normal,\r\n                    fontStyle: _isItalic ? FontStyle.italic : FontStyle.normal,\r\n                  ),\r\n                  decoration: InputDecoration(\r\n                    hintText:\r\n                        'Escribe tu anuncio aquí...\\n\\nComparte información importante sobre eventos del campus, actividades académicas, o noticias relevantes para la comunidad universitaria.',\r\n                    hintStyle:\r\n                        AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n                      color: AppTheme.lightTheme.colorScheme.onSurfaceVariant\r\n                          .withValues(alpha: 0.6),\r\n                      height: 1.5,\r\n                    ),\r\n                    border: InputBorder.none,\r\n                    counterText: '',\r\n                  ),\r\n                ),\r\n                SizedBox(height: 2.h),\r\n                Row(\r\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                  children: [\r\n                    Row(\r\n                      children: [\r\n                        CustomIconWidget(\r\n                          iconName: 'edit',\r\n                          color: AppTheme.lightTheme.colorScheme.primary,\r\n                          size: 16,\r\n                        ),\r\n                        SizedBox(width: 2.w),\r\n                        Text(\r\n                          'Contenido del post',\r\n                          style:\r\n                              AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                            color: AppTheme.lightTheme.colorScheme.primary,\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    Text(\r\n                      '${_controller.text.length}/${widget.maxCharacters}',\r\n                      style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                        color: _characterCountColor,\r\n                        fontWeight: FontWeight.w500,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildToolbar() {\r\n    return Container(\r\n      padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 2.h),\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.primaryContainer\r\n            .withValues(alpha: 0.1),\r\n        borderRadius: BorderRadius.only(\r\n          topLeft: Radius.circular(12),\r\n          topRight: Radius.circular(12),\r\n        ),\r\n        border: Border(\r\n          bottom: BorderSide(\r\n            color:\r\n                AppTheme.lightTheme.colorScheme.outline.withValues(alpha: 0.2),\r\n          ),\r\n        ),\r\n      ),\r\n      child: Row(\r\n        children: [\r\n          Text(\r\n            'Formato:',\r\n            style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n              color: AppTheme.lightTheme.colorScheme.primary,\r\n              fontWeight: FontWeight.w500,\r\n            ),\r\n          ),\r\n          SizedBox(width: 3.w),\r\n          _buildToolbarButton(\r\n            icon: 'format_bold',\r\n            isActive: _isBold,\r\n            onTap: _toggleBold,\r\n            tooltip: 'Negrita',\r\n          ),\r\n          SizedBox(width: 2.w),\r\n          _buildToolbarButton(\r\n            icon: 'format_italic',\r\n            isActive: _isItalic,\r\n            onTap: _toggleItalic,\r\n            tooltip: 'Cursiva',\r\n          ),\r\n          SizedBox(width: 2.w),\r\n          _buildToolbarButton(\r\n            icon: 'link',\r\n            isActive: false,\r\n            onTap: _insertLink,\r\n            tooltip: 'Insertar enlace',\r\n          ),\r\n          Spacer(),\r\n          GestureDetector(\r\n            onTap: () {\r\n              _focusNode.unfocus();\r\n            },\r\n            child: Container(\r\n              padding: EdgeInsets.all(1.w),\r\n              child: CustomIconWidget(\r\n                iconName: 'keyboard_arrow_up',\r\n                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n                size: 20,\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildToolbarButton({\r\n    required String icon,\r\n    required bool isActive,\r\n    required VoidCallback onTap,\r\n    required String tooltip,\r\n  }) {\r\n    return Tooltip(\r\n      message: tooltip,\r\n      child: GestureDetector(\r\n        onTap: onTap,\r\n        child: Container(\r\n          padding: EdgeInsets.all(2.w),\r\n          decoration: BoxDecoration(\r\n            color: isActive\r\n                ? AppTheme.lightTheme.colorScheme.primary.withValues(alpha: 0.2)\r\n                : Colors.transparent,\r\n            borderRadius: BorderRadius.circular(6),\r\n          ),\r\n          child: CustomIconWidget(\r\n            iconName: icon,\r\n            color: isActive\r\n                ? AppTheme.lightTheme.colorScheme.primary\r\n                : AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n            size: 18,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _LinkDialog extends StatefulWidget {\r\n  final Function(String) onLinkInserted;\r\n\r\n  const _LinkDialog({required this.onLinkInserted});\r\n\r\n  @override\r\n  State<_LinkDialog> createState() => _LinkDialogState();\r\n}\r\n\r\nclass _LinkDialogState extends State<_LinkDialog> {\r\n  final TextEditingController _urlController = TextEditingController();\r\n  final TextEditingController _textController = TextEditingController();\r\n\r\n  @override\r\n  void dispose() {\r\n    _urlController.dispose();\r\n    _textController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AlertDialog(\r\n      title: Text(\r\n        'Insertar enlace',\r\n        style: AppTheme.lightTheme.textTheme.titleMedium,\r\n      ),\r\n      content: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          TextField(\r\n            controller: _textController,\r\n            decoration: InputDecoration(\r\n              labelText: 'Texto del enlace',\r\n              hintText: 'Ej: Más información',\r\n            ),\r\n          ),\r\n          SizedBox(height: 2.h),\r\n          TextField(\r\n            controller: _urlController,\r\n            decoration: InputDecoration(\r\n              labelText: 'URL',\r\n              hintText: 'https://ejemplo.com',\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n      actions: [\r\n        TextButton(\r\n          onPressed: () => Navigator.of(context).pop(),\r\n          child: Text('Cancelar'),\r\n        ),\r\n        ElevatedButton(\r\n          onPressed: () {\r\n            final text = _textController.text.trim();\r\n            final url = _urlController.text.trim();\r\n            if (text.isNotEmpty && url.isNotEmpty) {\r\n              widget.onLinkInserted('[$text]($url)');\r\n              Navigator.of(context).pop();\r\n            }\r\n          },\r\n          child: Text('Insertar'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n"
        }
      },
      "login_screen": {
        "login_screen.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:sizer/sizer.dart';\r\nimport '../../services/auth_service.dart';\r\nimport '../../routes/app_routes.dart';\r\nimport '../../models/user_profile.dart';\r\n\r\nclass LoginScreen extends StatefulWidget {\r\n  const LoginScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<LoginScreen> createState() => _LoginScreenState();\r\n}\r\n\r\nclass _LoginScreenState extends State<LoginScreen>\r\n    with SingleTickerProviderStateMixin {\r\n  late TabController _tabController;\r\n\r\n  // Sign In Controllers\r\n  final _signInEmailController = TextEditingController();\r\n  final _signInPasswordController = TextEditingController();\r\n\r\n  // Sign Up Controllers\r\n  final _signUpEmailController = TextEditingController();\r\n  final _signUpPasswordController = TextEditingController();\r\n  final _signUpFullNameController = TextEditingController();\r\n  final _signUpDepartmentController = TextEditingController();\r\n  final _signUpStudentIdController = TextEditingController();\r\n\r\n  final _signInFormKey = GlobalKey<FormState>();\r\n  final _signUpFormKey = GlobalKey<FormState>();\r\n\r\n  bool _isSignInLoading = false;\r\n  bool _isSignUpLoading = false;\r\n  bool _obscureSignInPassword = true;\r\n  bool _obscureSignUpPassword = true;\r\n  UserRole _selectedRole = UserRole.student;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(length: 2, vsync: this);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    _signInEmailController.dispose();\r\n    _signInPasswordController.dispose();\r\n    _signUpEmailController.dispose();\r\n    _signUpPasswordController.dispose();\r\n    _signUpFullNameController.dispose();\r\n    _signUpDepartmentController.dispose();\r\n    _signUpStudentIdController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _handleSignIn() async {\r\n    if (!_signInFormKey.currentState!.validate()) return;\r\n\r\n    setState(() {\r\n      _isSignInLoading = true;\r\n    });\r\n\r\n    try {\r\n      await AuthService.instance.signIn(\r\n        email: _signInEmailController.text.trim(),\r\n        password: _signInPasswordController.text,\r\n      );\r\n\r\n      if (mounted) {\r\n        Navigator.pushReplacementNamed(context, AppRoutes.mainFeed);\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text(\r\n                'Sign in failed: ${error.toString().replaceAll('Exception: Sign-in failed: ', '')}'),\r\n            backgroundColor: Colors.red,\r\n            duration: const Duration(seconds: 4),\r\n          ),\r\n        );\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() {\r\n          _isSignInLoading = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _handleSignUp() async {\r\n    if (!_signUpFormKey.currentState!.validate()) return;\r\n\r\n    setState(() {\r\n      _isSignUpLoading = true;\r\n    });\r\n\r\n    try {\r\n      await AuthService.instance.signUp(\r\n        email: _signUpEmailController.text.trim(),\r\n        password: _signUpPasswordController.text,\r\n        fullName: _signUpFullNameController.text.trim(),\r\n        role: _selectedRole,\r\n        department: _signUpDepartmentController.text.trim().isEmpty\r\n            ? null\r\n            : _signUpDepartmentController.text.trim(),\r\n        studentId: _signUpStudentIdController.text.trim().isEmpty\r\n            ? null\r\n            : _signUpStudentIdController.text.trim(),\r\n      );\r\n\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text('Account created successfully! You can now sign in.'),\r\n            backgroundColor: Colors.green,\r\n            duration: Duration(seconds: 4),\r\n          ),\r\n        );\r\n\r\n        // Switch to sign in tab\r\n        _tabController.animateTo(0);\r\n\r\n        // Clear sign up form\r\n        _signUpEmailController.clear();\r\n        _signUpPasswordController.clear();\r\n        _signUpFullNameController.clear();\r\n        _signUpDepartmentController.clear();\r\n        _signUpStudentIdController.clear();\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text(\r\n                'Sign up failed: ${error.toString().replaceAll('Exception: Sign-up failed: ', '')}'),\r\n            backgroundColor: Colors.red,\r\n            duration: const Duration(seconds: 4),\r\n          ),\r\n        );\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() {\r\n          _isSignUpLoading = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Widget _buildSignInTab() {\r\n    return SingleChildScrollView(\r\n      padding: EdgeInsets.all(4.w),\r\n      child: Form(\r\n        key: _signInFormKey,\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            SizedBox(height: 4.h),\r\n\r\n            Text(\r\n              'Welcome Back!',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 24.sp,\r\n                fontWeight: FontWeight.bold,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              'Sign in to your account to continue',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 14.sp,\r\n                color: Colors.grey[600],\r\n              ),\r\n            ),\r\n\r\n            SizedBox(height: 4.h),\r\n\r\n            // Email field\r\n            TextFormField(\r\n              controller: _signInEmailController,\r\n              keyboardType: TextInputType.emailAddress,\r\n              decoration: InputDecoration(\r\n                labelText: 'Email',\r\n                hintText: 'Enter your email',\r\n                prefixIcon: const Icon(Icons.email_outlined),\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              validator: (value) {\r\n                if (value == null || value.trim().isEmpty) {\r\n                  return 'Email is required';\r\n                }\r\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$')\r\n                    .hasMatch(value)) {\r\n                  return 'Please enter a valid email';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Password field\r\n            TextFormField(\r\n              controller: _signInPasswordController,\r\n              obscureText: _obscureSignInPassword,\r\n              decoration: InputDecoration(\r\n                labelText: 'Password',\r\n                hintText: 'Enter your password',\r\n                prefixIcon: const Icon(Icons.lock_outlined),\r\n                suffixIcon: IconButton(\r\n                  icon: Icon(\r\n                    _obscureSignInPassword\r\n                        ? Icons.visibility\r\n                        : Icons.visibility_off,\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      _obscureSignInPassword = !_obscureSignInPassword;\r\n                    });\r\n                  },\r\n                ),\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              validator: (value) {\r\n                if (value == null || value.isEmpty) {\r\n                  return 'Password is required';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n\r\n            SizedBox(height: 3.h),\r\n\r\n            // Sign In button\r\n            SizedBox(\r\n              width: double.infinity,\r\n              child: ElevatedButton(\r\n                onPressed: _isSignInLoading ? null : _handleSignIn,\r\n                style: ElevatedButton.styleFrom(\r\n                  backgroundColor: Theme.of(context).primaryColor,\r\n                  foregroundColor: Colors.white,\r\n                  padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                  shape: RoundedRectangleBorder(\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                ),\r\n                child: _isSignInLoading\r\n                    ? SizedBox(\r\n                        height: 20,\r\n                        width: 20,\r\n                        child: CircularProgressIndicator(\r\n                          strokeWidth: 2,\r\n                          valueColor:\r\n                              AlwaysStoppedAnimation<Color>(Colors.white),\r\n                        ),\r\n                      )\r\n                    : Text(\r\n                        'Sign In',\r\n                        style: GoogleFonts.inter(\r\n                          fontSize: 14.sp,\r\n                          fontWeight: FontWeight.w600,\r\n                        ),\r\n                      ),\r\n              ),\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Demo credentials info\r\n            Container(\r\n              width: double.infinity,\r\n              padding: EdgeInsets.all(3.w),\r\n              decoration: BoxDecoration(\r\n                color: Colors.blue[50],\r\n                borderRadius: BorderRadius.circular(8),\r\n                border: Border.all(color: Colors.blue[200]!),\r\n              ),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Text(\r\n                    'Demo Credentials:',\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 12.sp,\r\n                      fontWeight: FontWeight.w600,\r\n                      color: Colors.blue[800],\r\n                    ),\r\n                  ),\r\n                  SizedBox(height: 0.5.h),\r\n                  Text(\r\n                    'Admin: admin@university.edu / admin123',\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 11.sp,\r\n                      color: Colors.blue[700],\r\n                    ),\r\n                  ),\r\n                  Text(\r\n                    'Student: john.doe@student.edu / student123',\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 11.sp,\r\n                      color: Colors.blue[700],\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSignUpTab() {\r\n    return SingleChildScrollView(\r\n      padding: EdgeInsets.all(4.w),\r\n      child: Form(\r\n        key: _signUpFormKey,\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            SizedBox(height: 2.h),\r\n\r\n            Text(\r\n              'Create Account',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 24.sp,\r\n                fontWeight: FontWeight.bold,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              'Join the university community',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 14.sp,\r\n                color: Colors.grey[600],\r\n              ),\r\n            ),\r\n\r\n            SizedBox(height: 3.h),\r\n\r\n            // Full Name field\r\n            TextFormField(\r\n              controller: _signUpFullNameController,\r\n              decoration: InputDecoration(\r\n                labelText: 'Full Name',\r\n                hintText: 'Enter your full name',\r\n                prefixIcon: const Icon(Icons.person_outlined),\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              validator: (value) {\r\n                if (value == null || value.trim().isEmpty) {\r\n                  return 'Full name is required';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Email field\r\n            TextFormField(\r\n              controller: _signUpEmailController,\r\n              keyboardType: TextInputType.emailAddress,\r\n              decoration: InputDecoration(\r\n                labelText: 'Email',\r\n                hintText: 'Enter your email',\r\n                prefixIcon: const Icon(Icons.email_outlined),\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              validator: (value) {\r\n                if (value == null || value.trim().isEmpty) {\r\n                  return 'Email is required';\r\n                }\r\n                if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$')\r\n                    .hasMatch(value)) {\r\n                  return 'Please enter a valid email';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Password field\r\n            TextFormField(\r\n              controller: _signUpPasswordController,\r\n              obscureText: _obscureSignUpPassword,\r\n              decoration: InputDecoration(\r\n                labelText: 'Password',\r\n                hintText: 'Create a password',\r\n                prefixIcon: const Icon(Icons.lock_outlined),\r\n                suffixIcon: IconButton(\r\n                  icon: Icon(\r\n                    _obscureSignUpPassword\r\n                        ? Icons.visibility\r\n                        : Icons.visibility_off,\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      _obscureSignUpPassword = !_obscureSignUpPassword;\r\n                    });\r\n                  },\r\n                ),\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              validator: (value) {\r\n                if (value == null || value.isEmpty) {\r\n                  return 'Password is required';\r\n                }\r\n                if (value.length < 6) {\r\n                  return 'Password must be at least 6 characters';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Role selection\r\n            Container(\r\n              width: double.infinity,\r\n              padding: EdgeInsets.all(3.w),\r\n              decoration: BoxDecoration(\r\n                border: Border.all(color: Colors.grey[300]!),\r\n                borderRadius: BorderRadius.circular(12),\r\n              ),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Text(\r\n                    'Role',\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 12.sp,\r\n                      color: Colors.grey[600],\r\n                    ),\r\n                  ),\r\n                  SizedBox(height: 1.h),\r\n                  Row(\r\n                    children: [\r\n                      Expanded(\r\n                        child: RadioListTile<UserRole>(\r\n                          title: Text(\r\n                            'Student',\r\n                            style: GoogleFonts.inter(fontSize: 12.sp),\r\n                          ),\r\n                          value: UserRole.student,\r\n                          groupValue: _selectedRole,\r\n                          onChanged: (value) {\r\n                            setState(() {\r\n                              _selectedRole = value!;\r\n                            });\r\n                          },\r\n                          contentPadding: EdgeInsets.zero,\r\n                        ),\r\n                      ),\r\n                      Expanded(\r\n                        child: RadioListTile<UserRole>(\r\n                          title: Text(\r\n                            'Admin',\r\n                            style: GoogleFonts.inter(fontSize: 12.sp),\r\n                          ),\r\n                          value: UserRole.admin,\r\n                          groupValue: _selectedRole,\r\n                          onChanged: (value) {\r\n                            setState(() {\r\n                              _selectedRole = value!;\r\n                            });\r\n                          },\r\n                          contentPadding: EdgeInsets.zero,\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Department field (optional)\r\n            TextFormField(\r\n              controller: _signUpDepartmentController,\r\n              decoration: InputDecoration(\r\n                labelText: 'Department (Optional)',\r\n                hintText: 'e.g., Computer Science',\r\n                prefixIcon: const Icon(Icons.school_outlined),\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n\r\n            // Student ID field (optional)\r\n            if (_selectedRole == UserRole.student)\r\n              TextFormField(\r\n                controller: _signUpStudentIdController,\r\n                decoration: InputDecoration(\r\n                  labelText: 'Student ID (Optional)',\r\n                  hintText: 'Enter your student ID',\r\n                  prefixIcon: const Icon(Icons.badge_outlined),\r\n                  border: OutlineInputBorder(\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                ),\r\n              ),\r\n\r\n            SizedBox(height: 3.h),\r\n\r\n            // Sign Up button\r\n            SizedBox(\r\n              width: double.infinity,\r\n              child: ElevatedButton(\r\n                onPressed: _isSignUpLoading ? null : _handleSignUp,\r\n                style: ElevatedButton.styleFrom(\r\n                  backgroundColor: Theme.of(context).primaryColor,\r\n                  foregroundColor: Colors.white,\r\n                  padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                  shape: RoundedRectangleBorder(\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                ),\r\n                child: _isSignUpLoading\r\n                    ? SizedBox(\r\n                        height: 20,\r\n                        width: 20,\r\n                        child: CircularProgressIndicator(\r\n                          strokeWidth: 2,\r\n                          valueColor:\r\n                              AlwaysStoppedAnimation<Color>(Colors.white),\r\n                        ),\r\n                      )\r\n                    : Text(\r\n                        'Create Account',\r\n                        style: GoogleFonts.inter(\r\n                          fontSize: 14.sp,\r\n                          fontWeight: FontWeight.w600,\r\n                        ),\r\n                      ),\r\n              ),\r\n            ),\r\n\r\n            SizedBox(height: 2.h),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: Colors.grey[50],\r\n      appBar: AppBar(\r\n        backgroundColor: Colors.transparent,\r\n        elevation: 0,\r\n        leading: IconButton(\r\n          icon: const Icon(Icons.arrow_back, color: Colors.black87),\r\n          onPressed: () => Navigator.pop(context),\r\n        ),\r\n        centerTitle: true,\r\n        title: Text(\r\n          'UniConnect',\r\n          style: GoogleFonts.inter(\r\n            fontSize: 18.sp,\r\n            fontWeight: FontWeight.bold,\r\n            color: Colors.black87,\r\n          ),\r\n        ),\r\n        bottom: TabBar(\r\n          controller: _tabController,\r\n          labelColor: Theme.of(context).primaryColor,\r\n          unselectedLabelColor: Colors.grey,\r\n          indicatorColor: Theme.of(context).primaryColor,\r\n          labelStyle: GoogleFonts.inter(\r\n            fontSize: 14.sp,\r\n            fontWeight: FontWeight.w600,\r\n          ),\r\n          tabs: const [\r\n            Tab(text: 'Sign In'),\r\n            Tab(text: 'Sign Up'),\r\n          ],\r\n        ),\r\n      ),\r\n      body: TabBarView(\r\n        controller: _tabController,\r\n        children: [\r\n          _buildSignInTab(),\r\n          _buildSignUpTab(),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
      },
      "main_feed_screen": {
        "main_feed_screen.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../models/post.dart';\r\nimport '../../models/post_category.dart';\r\nimport '../../routes/app_routes.dart';\r\nimport '../../services/auth_service.dart';\r\nimport '../../services/posts_service.dart';\r\nimport './widgets/empty_feed_widget.dart';\r\nimport './widgets/feed_header_widget.dart';\r\nimport './widgets/feed_tab_bar_widget.dart';\r\nimport './widgets/post_card_widget.dart';\r\nimport './widgets/profile_tab_widget.dart';\r\nimport './widgets/search_tab_widget.dart';\r\n\r\nclass MainFeedScreen extends StatefulWidget {\r\n  const MainFeedScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<MainFeedScreen> createState() => _MainFeedScreenState();\r\n}\r\n\r\nclass _MainFeedScreenState extends State<MainFeedScreen>\r\n    with SingleTickerProviderStateMixin {\r\n  late TabController _tabController;\r\n  List<Post> _posts = [];\r\n  List<Post> _featuredPosts = [];\r\n  List<PostCategory> _categories = [];\r\n  bool _isLoading = true;\r\n  String _error = '';\r\n  bool _isAuthenticated = false;\r\n  String? _selectedCategoryId;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(length: 3, vsync: this);\r\n    _checkAuthState();\r\n    _loadData();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  void _checkAuthState() {\r\n    setState(() {\r\n      _isAuthenticated = AuthService.instance.isAuthenticated;\r\n    });\r\n\r\n    // Listen to auth state changes\r\n    AuthService.instance.authStateChanges.listen((state) {\r\n      if (mounted) {\r\n        setState(() {\r\n          _isAuthenticated = state.session != null;\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  Future<void> _loadData() async {\r\n    try {\r\n      setState(() {\r\n        _isLoading = true;\r\n        _error = '';\r\n      });\r\n\r\n      final results = await Future.wait([\r\n        PostsService.instance.getAllPosts(),\r\n        PostsService.instance.getFeaturedPosts(),\r\n        PostsService.instance.getCategories(),\r\n      ]);\r\n\r\n      if (mounted) {\r\n        setState(() {\r\n          _posts = results[0] as List<Post>;\r\n          _featuredPosts = results[1] as List<Post>;\r\n          _categories = results[2] as List<PostCategory>;\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        setState(() {\r\n          _error = error.toString();\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _loadPostsByCategory(String? categoryId) async {\r\n    try {\r\n      setState(() {\r\n        _isLoading = true;\r\n        _selectedCategoryId = categoryId;\r\n      });\r\n\r\n      List<Post> posts;\r\n      if (categoryId == null) {\r\n        posts = await PostsService.instance.getAllPosts();\r\n      } else {\r\n        posts = await PostsService.instance.getPostsByCategory(categoryId);\r\n      }\r\n\r\n      if (mounted) {\r\n        setState(() {\r\n          _posts = posts;\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        setState(() {\r\n          _error = error.toString();\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  void _onPostLikeChanged(String postId, bool isLiked) {\r\n    setState(() {\r\n      // Actualiza solo el post afectado en la lista principal\r\n      final idx = _posts.indexWhere((p) => p.id == postId);\r\n      if (idx != -1) {\r\n        final post = _posts[idx];\r\n        _posts[idx] = post.copyWith(\r\n          isLikedByCurrentUser: isLiked,\r\n          likeCount: (post.likeCount + (isLiked ? 1 : -1)).clamp(0, 1 << 30),\r\n        );\r\n      }\r\n      // También actualiza en featured si aplica\r\n      final fidx = _featuredPosts.indexWhere((p) => p.id == postId);\r\n      if (fidx != -1) {\r\n        final post = _featuredPosts[fidx];\r\n        _featuredPosts[fidx] = post.copyWith(\r\n          isLikedByCurrentUser: isLiked,\r\n          likeCount: (post.likeCount + (isLiked ? 1 : -1)).clamp(0, 1 << 30),\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  Widget _buildFeedTab() {\r\n    if (_isLoading) {\r\n      return const Center(child: CircularProgressIndicator());\r\n    }\r\n\r\n    if (_error.isNotEmpty) {\r\n      return Center(\r\n          child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\r\n        Icon(Icons.error_outline, size: 48, color: Colors.red[400]),\r\n        SizedBox(height: 2.h),\r\n        Text('Something went wrong',\r\n            style: GoogleFonts.inter(\r\n                fontSize: 16.sp,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87)),\r\n        SizedBox(height: 1.h),\r\n        Text(_error,\r\n            style: GoogleFonts.inter(fontSize: 12.sp, color: Colors.grey[600]),\r\n            textAlign: TextAlign.center),\r\n        SizedBox(height: 2.h),\r\n        ElevatedButton(onPressed: _loadData, child: const Text('Try Again')),\r\n      ]));\r\n    }\r\n\r\n    if (_posts.isEmpty) {\r\n      return const EmptyFeedWidget();\r\n    }\r\n\r\n    return RefreshIndicator(\r\n      onRefresh: () => _selectedCategoryId == null\r\n          ? _loadData()\r\n          : _loadPostsByCategory(_selectedCategoryId),\r\n      child: CustomScrollView(slivers: [\r\n        // Categories filter\r\n        SliverToBoxAdapter(\r\n            child: Container(\r\n                height: 6.h,\r\n                margin: EdgeInsets.symmetric(vertical: 1.h),\r\n                child: ListView(\r\n                    scrollDirection: Axis.horizontal,\r\n                    padding: EdgeInsets.symmetric(horizontal: 4.w),\r\n                    children: [\r\n                      // All posts chip\r\n                      _buildCategoryChip(\r\n                          'All Posts',\r\n                          _selectedCategoryId == null,\r\n                          () => _loadPostsByCategory(null)),\r\n                      SizedBox(width: 2.w),\r\n                      // Category chips\r\n                      ..._categories\r\n                          .map((category) => Padding(\r\n                              padding: EdgeInsets.only(right: 2.w),\r\n                              child: _buildCategoryChip(\r\n                                  category.name,\r\n                                  _selectedCategoryId == category.id,\r\n                                  () => _loadPostsByCategory(category.id))))\r\n                          .toList(),\r\n                    ]))),\r\n\r\n        // Featured posts section (only show when \"All Posts\" is selected)\r\n        if (_selectedCategoryId == null && _featuredPosts.isNotEmpty)\r\n          SliverToBoxAdapter(\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                Padding(\r\n                    padding:\r\n                        EdgeInsets.symmetric(horizontal: 4.w, vertical: 0.4.h),\r\n                    child: Text('Featured Posts',\r\n                        style: GoogleFonts.inter(\r\n                            fontSize: 18.sp,\r\n                            fontWeight: FontWeight.bold,\r\n                            color: Colors.black87))),\r\n                ..._featuredPosts\r\n                    .map((post) => PostCardWidget(\r\n                        post: post,\r\n                        onLikeChanged: (isLiked) =>\r\n                            _onPostLikeChanged(post.id, isLiked)))\r\n                    .toList(),\r\n                Divider(height: 3.h, thickness: 1.5, color: Colors.grey[200]),\r\n              ])),\r\n\r\n        // All posts section\r\n        SliverToBoxAdapter(\r\n            child: Padding(\r\n                padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 0.4.h),\r\n                child: Text(_selectedCategoryId == null ? 'All Posts' : 'Posts',\r\n                    style: GoogleFonts.inter(\r\n                        fontSize: 18.sp,\r\n                        fontWeight: FontWeight.bold,\r\n                        color: Colors.black87)))),\r\n\r\n        // Posts list\r\n        SliverList(\r\n            delegate: SliverChildBuilderDelegate((context, index) {\r\n          final post = _posts[index];\r\n          return PostCardWidget(\r\n              post: post,\r\n              onLikeChanged: (isLiked) => _onPostLikeChanged(post.id, isLiked));\r\n        }, childCount: _posts.length)),\r\n\r\n        // Bottom padding\r\n        SliverToBoxAdapter(child: SizedBox(height: 10.h)),\r\n      ]),\r\n    );\r\n  }\r\n\r\n  Widget _buildCategoryChip(String label, bool isSelected, VoidCallback onTap) {\r\n    return GestureDetector(\r\n      onTap: onTap,\r\n      child: Container(\r\n        padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 0.4.h),\r\n        decoration: BoxDecoration(\r\n          color: isSelected ? Theme.of(context).primaryColor : Colors.grey[100],\r\n          borderRadius: BorderRadius.circular(20),\r\n          border: Border.all(\r\n              color: isSelected\r\n                  ? Theme.of(context).primaryColor\r\n                  : Colors.grey[300]!),\r\n        ),\r\n        child: Center(\r\n          child: Text(\r\n            label,\r\n            style: GoogleFonts.inter(\r\n              fontSize: 11.sp,\r\n              fontWeight: FontWeight.w500,\r\n              color: isSelected ? Colors.white : Colors.grey[700],\r\n            ),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n        backgroundColor: Colors.grey[50],\r\n        body: SafeArea(\r\n            child: Column(children: [\r\n          // Header\r\n          FeedHeaderWidget(onNotificationTap: () {\r\n            Navigator.pushNamed(context, AppRoutes.notifications);\r\n          }),\r\n\r\n          // Tab bar\r\n          FeedTabBarWidget(\r\n            tabController: _tabController,\r\n            tabs: const [\r\n              'Feed',\r\n              'Search',\r\n              'Profile',\r\n            ],\r\n          ),\r\n\r\n          // Tab content\r\n          Expanded(\r\n              child: TabBarView(controller: _tabController, children: [\r\n            // Feed tab\r\n            _buildFeedTab(),\r\n\r\n            // Search tab\r\n            SearchTabWidget(onPostLikeChanged: _onPostLikeChanged),\r\n\r\n            // Profile tab\r\n            ProfileTabWidget(\r\n                isAuthenticated: _isAuthenticated,\r\n                onAuthRequired: () {\r\n                  Navigator.pushNamed(context, AppRoutes.login);\r\n                }),\r\n          ])),\r\n        ])),\r\n\r\n        // Floating action button for creating posts (admin only)\r\n        floatingActionButton: _isAuthenticated\r\n            ? FutureBuilder<bool>(\r\n                future: AuthService.instance.isCurrentUserAdmin(),\r\n                builder: (context, snapshot) {\r\n                  if (snapshot.hasData && snapshot.data!) {\r\n                    return FloatingActionButton(\r\n                        onPressed: () {\r\n                          Navigator.pushNamed(context, AppRoutes.createPost)\r\n                              .then((_) =>\r\n                                  _loadData()); // Refresh after creating post\r\n                        },\r\n                        backgroundColor: Theme.of(context).primaryColor,\r\n                        child: const Icon(Icons.add, color: Colors.white));\r\n                  }\r\n                  return const SizedBox.shrink();\r\n                })\r\n            : null);\r\n  }\r\n}\r\n",
        "widgets": {
          "empty_feed_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass EmptyFeedWidget extends StatelessWidget {\r\n  final VoidCallback? onRefresh;\r\n\r\n  const EmptyFeedWidget({\r\n    Key? key,\r\n    this.onRefresh,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n      child: Padding(\r\n        padding: EdgeInsets.all(8.w),\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Container(\r\n              width: 30.w,\r\n              height: 30.w,\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.primaryContainer,\r\n                borderRadius: BorderRadius.circular(20),\r\n              ),\r\n              child: Center(\r\n                child: CustomIconWidget(\r\n                  iconName: 'feed',\r\n                  color: AppTheme.lightTheme.colorScheme.primary,\r\n                  size: 60,\r\n                ),\r\n              ),\r\n            ),\r\n            SizedBox(height: 4.h),\r\n            Text(\r\n              '¡Bienvenido a UniConnect!',\r\n              style: AppTheme.lightTheme.textTheme.headlineSmall?.copyWith(\r\n                fontWeight: FontWeight.w600,\r\n                color: AppTheme.lightTheme.colorScheme.onSurface,\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'Aquí aparecerán todas las publicaciones y eventos de tu universidad. Mantente conectado con la comunidad académica.',\r\n              style: AppTheme.lightTheme.textTheme.bodyLarge?.copyWith(\r\n                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n                height: 1.5,\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n            SizedBox(height: 4.h),\r\n            ElevatedButton.icon(\r\n              onPressed: onRefresh,\r\n              icon: CustomIconWidget(\r\n                iconName: 'refresh',\r\n                color: Colors.white,\r\n                size: 20,\r\n              ),\r\n              label: Text(\r\n                'Actualizar Feed',\r\n                style: AppTheme.lightTheme.textTheme.labelLarge?.copyWith(\r\n                  color: Colors.white,\r\n                ),\r\n              ),\r\n              style: ElevatedButton.styleFrom(\r\n                backgroundColor: AppTheme.lightTheme.colorScheme.primary,\r\n                padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 2.h),\r\n                shape: RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n",
          "feed_header_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass FeedHeaderWidget extends StatelessWidget {\r\n  final int unreadNotifications;\r\n  final VoidCallback? onNotificationTap;\r\n  final VoidCallback? onLogoTap;\r\n\r\n  const FeedHeaderWidget({\r\n    Key? key,\r\n    this.unreadNotifications = 0,\r\n    this.onNotificationTap,\r\n    this.onLogoTap,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 2.h),\r\n        decoration: BoxDecoration(\r\n            color: AppTheme.lightTheme.colorScheme.surface,\r\n            boxShadow: [\r\n              BoxShadow(\r\n                  color: Colors.black.withValues(alpha: 0.05),\r\n                  blurRadius: 4,\r\n                  offset: const Offset(0, 2)),\r\n            ]),\r\n        child: SafeArea(\r\n            bottom: false,\r\n            child: Row(children: [\r\n              GestureDetector(\r\n                  onTap: onLogoTap,\r\n                  child: Row(children: [\r\n                    _buildUniversityLogo(),\r\n                    SizedBox(width: 3.w),\r\n                    Column(\r\n                        crossAxisAlignment: CrossAxisAlignment.start,\r\n                        children: [\r\n                          Text('UniConnect',\r\n                              style: AppTheme.lightTheme.textTheme.titleLarge\r\n                                  ?.copyWith(\r\n                                      fontWeight: FontWeight.w700,\r\n                                      color: AppTheme\r\n                                          .lightTheme.colorScheme.primary)),\r\n                          Text('Universidad Central',\r\n                              style: AppTheme.lightTheme.textTheme.bodySmall\r\n                                  ?.copyWith(\r\n                                      color: AppTheme.lightTheme.colorScheme\r\n                                          .onSurfaceVariant,\r\n                                      fontSize: 10.sp)),\r\n                        ]),\r\n                  ])),\r\n              const Spacer(),\r\n              _buildNotificationButton(),\r\n            ])));\r\n  }\r\n\r\n  Widget _buildUniversityLogo() {\r\n    return Container(\r\n        width: 12.w,\r\n        height: 12.w,\r\n        decoration: BoxDecoration(\r\n            gradient: LinearGradient(colors: [\r\n              AppTheme.lightTheme.colorScheme.primary,\r\n              AppTheme.lightTheme.colorScheme.tertiary,\r\n            ], begin: Alignment.topLeft, end: Alignment.bottomRight),\r\n            borderRadius: BorderRadius.circular(12),\r\n            boxShadow: [\r\n              BoxShadow(\r\n                  color: AppTheme.lightTheme.colorScheme.primary\r\n                      .withValues(alpha: 0.3),\r\n                  blurRadius: 8,\r\n                  offset: const Offset(0, 2)),\r\n            ]),\r\n        child: Center(\r\n            child: Text('UC',\r\n                style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(\r\n                    color: Colors.white,\r\n                    fontWeight: FontWeight.w800,\r\n                    letterSpacing: 0.5))));\r\n  }\r\n\r\n  Widget _buildNotificationButton() {\r\n    return GestureDetector(\r\n        onTap: onNotificationTap,\r\n        child: Container(\r\n            padding: EdgeInsets.all(2.5.w),\r\n            decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.surfaceContainer,\r\n                borderRadius: BorderRadius.circular(12)),\r\n            child: Stack(children: [\r\n              CustomIconWidget(\r\n                  iconName: 'notifications',\r\n                  color: AppTheme.lightTheme.colorScheme.onSurface,\r\n                  size: 24),\r\n              if (unreadNotifications > 0)\r\n                Positioned(\r\n                    right: 0,\r\n                    top: 0,\r\n                    child: Container(\r\n                        padding: EdgeInsets.all(0.5.w),\r\n                        decoration: BoxDecoration(\r\n                            color: AppTheme.lightTheme.colorScheme.error,\r\n                            borderRadius: BorderRadius.circular(10),\r\n                            border: Border.all(\r\n                                color:\r\n                                    AppTheme.lightTheme.colorScheme.surface)),\r\n                        child: Center(\r\n                            child: Text(\r\n                                unreadNotifications > 99\r\n                                    ? '99+'\r\n                                    : unreadNotifications.toString(),\r\n                                style: AppTheme.lightTheme.textTheme.labelSmall\r\n                                    ?.copyWith(\r\n                                        color: Colors.white,\r\n                                        fontWeight: FontWeight.w600,\r\n                                        fontSize: 8.sp))))),\r\n            ])));\r\n  }\r\n}\r\n",
          "feed_tab_bar_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass FeedTabBarWidget extends StatelessWidget {\r\n  final TabController tabController;\r\n  final List<String> tabs;\r\n\r\n  const FeedTabBarWidget({\r\n    Key? key,\r\n    required this.tabController,\r\n    required this.tabs,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.surface,\r\n        border: Border(\r\n          bottom: BorderSide(\r\n            color: AppTheme.lightTheme.colorScheme.outline,\r\n            width: 0.5,\r\n          ),\r\n        ),\r\n      ),\r\n      child: TabBar(\r\n        controller: tabController,\r\n        tabs: tabs.map((tab) => _buildTab(tab)).toList(),\r\n        labelColor: AppTheme.lightTheme.colorScheme.primary,\r\n        unselectedLabelColor: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n        indicatorColor: AppTheme.lightTheme.colorScheme.primary,\r\n        indicatorWeight: 3,\r\n        indicatorSize: TabBarIndicatorSize.label,\r\n        labelStyle: AppTheme.lightTheme.textTheme.titleSmall?.copyWith(\r\n          fontWeight: FontWeight.w600,\r\n        ),\r\n        unselectedLabelStyle:\r\n            AppTheme.lightTheme.textTheme.titleSmall?.copyWith(\r\n          fontWeight: FontWeight.w400,\r\n        ),\r\n        splashFactory: NoSplash.splashFactory,\r\n        overlayColor: WidgetStateProperty.all(Colors.transparent),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildTab(String tabName) {\r\n    IconData iconData;\r\n    String label;\r\n\r\n    switch (tabName.toLowerCase()) {\r\n      case 'feed':\r\n        iconData = Icons.home;\r\n        label = 'Feed';\r\n        break;\r\n      case 'search':\r\n        iconData = Icons.search;\r\n        label = 'Buscar';\r\n        break;\r\n      case 'profile':\r\n        iconData = Icons.person;\r\n        label = 'Perfil';\r\n        break;\r\n      default:\r\n        iconData = Icons.info;\r\n        label = tabName;\r\n    }\r\n\r\n    return Tab(\r\n      height: 8.h,\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          CustomIconWidget(\r\n            iconName: iconData.toString().split('.').last,\r\n            size: 24,\r\n            color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n          ),\r\n          SizedBox(height: 0.5.h),\r\n          Text(\r\n            label,\r\n            style: AppTheme.lightTheme.textTheme.labelSmall,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n",
          "post_card_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:sizer/sizer.dart';\r\nimport '../../../models/post.dart';\r\nimport '../../../services/posts_service.dart';\r\nimport '../../../services/auth_service.dart';\r\nimport '../../../widgets/custom_image_widget.dart';\r\nimport '../../../widgets/app_snackbar.dart';\r\n\r\nclass PostCardWidget extends StatefulWidget {\r\n  final Post post;\r\n  final VoidCallback? onTap;\r\n  final ValueChanged<bool>? onLikeChanged;\r\n\r\n  const PostCardWidget({\r\n    Key? key,\r\n    required this.post,\r\n    this.onTap,\r\n    this.onLikeChanged,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<PostCardWidget> createState() => _PostCardWidgetState();\r\n}\r\n\r\nclass _PostCardWidgetState extends State<PostCardWidget> {\r\n  bool _isLiking = false;\r\n  late int _likeCount;\r\n  bool _isLiked = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _likeCount = widget.post.likeCount;\r\n    _isLiked = widget.post.isLikedByCurrentUser ?? false;\r\n  }\r\n\r\n  Future<void> _toggleLike() async {\r\n    if (_isLiking || !AuthService.instance.isAuthenticated) return;\r\n\r\n    setState(() {\r\n      _isLiking = true;\r\n      _isLiked = !_isLiked;\r\n      _likeCount += _isLiked ? 1 : -1;\r\n    });\r\n\r\n    try {\r\n      await PostsService.instance.toggleLike(widget.post.id);\r\n      widget.onLikeChanged?.call(_isLiked);\r\n    } catch (error) {\r\n      // Revert changes on error\r\n      setState(() {\r\n        _isLiked = !_isLiked;\r\n        _likeCount += _isLiked ? 1 : -1;\r\n      });\r\n\r\n      if (mounted) {\r\n        showAppSnackBar(context, 'Error al actualizar el like: $error',\r\n            error: true);\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() {\r\n          _isLiking = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        margin: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),\r\n        decoration: BoxDecoration(\r\n            color: Colors.white,\r\n            borderRadius: BorderRadius.circular(12),\r\n            boxShadow: [\r\n              BoxShadow(\r\n                  color: Colors.grey.withAlpha(26),\r\n                  spreadRadius: 1,\r\n                  blurRadius: 4,\r\n                  offset: const Offset(0, 2)),\r\n            ]),\r\n        child: Material(\r\n            color: Colors.transparent,\r\n            child: InkWell(\r\n                onTap: widget.onTap,\r\n                borderRadius: BorderRadius.circular(12),\r\n                child: Padding(\r\n                    padding: EdgeInsets.all(4.w),\r\n                    child: Column(\r\n                        crossAxisAlignment: CrossAxisAlignment.start,\r\n                        children: [\r\n                          // Header with author and timestamp\r\n                          Row(children: [\r\n                            CircleAvatar(\r\n                                radius: 20,\r\n                                backgroundColor: Theme.of(context).primaryColor,\r\n                                child: Text(\r\n                                    (widget.post.authorName ?? 'A')\r\n                                        .substring(0, 1)\r\n                                        .toUpperCase(),\r\n                                    style: GoogleFonts.inter(\r\n                                        color: Colors.white,\r\n                                        fontWeight: FontWeight.bold))),\r\n                            SizedBox(width: 3.w),\r\n                            Expanded(\r\n                                child: Column(\r\n                                    crossAxisAlignment:\r\n                                        CrossAxisAlignment.start,\r\n                                    children: [\r\n                                  Text(widget.post.authorName ?? 'Anonymous',\r\n                                      style: GoogleFonts.inter(\r\n                                          fontSize: 14.sp,\r\n                                          fontWeight: FontWeight.w600,\r\n                                          color: Colors.black87)),\r\n                                  Text(widget.post.timeAgo,\r\n                                      style: GoogleFonts.inter(\r\n                                          fontSize: 11.sp,\r\n                                          color: Colors.grey[600])),\r\n                                ])),\r\n                            if (widget.post.isFeatured)\r\n                              Container(\r\n                                  padding: EdgeInsets.symmetric(\r\n                                      horizontal: 2.w, vertical: 0.5.h),\r\n                                  decoration: BoxDecoration(\r\n                                      color: Colors.amber[100],\r\n                                      borderRadius: BorderRadius.circular(8)),\r\n                                  child: Row(\r\n                                      mainAxisSize: MainAxisSize.min,\r\n                                      children: [\r\n                                        Icon(Icons.star,\r\n                                            size: 12.sp,\r\n                                            color: Colors.amber[800]),\r\n                                        SizedBox(width: 1.w),\r\n                                        Text('Featured',\r\n                                            style: GoogleFonts.inter(\r\n                                                fontSize: 9.sp,\r\n                                                fontWeight: FontWeight.w500,\r\n                                                color: Colors.amber[800])),\r\n                                      ])),\r\n                          ]),\r\n\r\n                          SizedBox(height: 2.h),\r\n\r\n                          // Title\r\n                          Text(widget.post.title,\r\n                              style: GoogleFonts.inter(\r\n                                  fontSize: 16.sp,\r\n                                  fontWeight: FontWeight.bold,\r\n                                  color: Colors.black87)),\r\n\r\n                          SizedBox(height: 1.h),\r\n\r\n                          // Content\r\n                          Text(widget.post.content,\r\n                              style: GoogleFonts.inter(\r\n                                  fontSize: 13.sp,\r\n                                  color: Colors.black54,\r\n                                  height: 1.4),\r\n                              maxLines: widget.post.isFeatured ? null : 3,\r\n                              overflow: widget.post.isFeatured\r\n                                  ? null\r\n                                  : TextOverflow.ellipsis),\r\n\r\n                          // Image if available\r\n                          if (widget.post.imageUrl != null) ...[\r\n                            SizedBox(height: 2.h),\r\n                            ClipRRect(\r\n                                borderRadius: BorderRadius.circular(8),\r\n                                child: CustomImageWidget(\r\n                                    imageUrl: widget.post.imageUrl!,\r\n                                    height: 25.h,\r\n                                    width: double.infinity,\r\n                                    fit: BoxFit.cover)),\r\n                          ],\r\n\r\n                          SizedBox(height: 2.h),\r\n\r\n                          // Actions row\r\n                          Row(children: [\r\n                            // Like button\r\n                            InkWell(\r\n                                onTap: _toggleLike,\r\n                                borderRadius: BorderRadius.circular(20),\r\n                                child: Container(\r\n                                    padding: EdgeInsets.symmetric(\r\n                                        horizontal: 3.w, vertical: 1.h),\r\n                                    child: Row(\r\n                                        mainAxisSize: MainAxisSize.min,\r\n                                        children: [\r\n                                          _isLiking\r\n                                              ? SizedBox(\r\n                                                  width: 16.sp,\r\n                                                  height: 16.sp,\r\n                                                  child: CircularProgressIndicator(\r\n                                                      strokeWidth: 2,\r\n                                                      valueColor:\r\n                                                          AlwaysStoppedAnimation<\r\n                                                                  Color>(\r\n                                                              _isLiked\r\n                                                                  ? Colors.red\r\n                                                                  : Colors\r\n                                                                      .grey)))\r\n                                              : Icon(\r\n                                                  _isLiked\r\n                                                      ? Icons.favorite\r\n                                                      : Icons.favorite_border,\r\n                                                  color: _isLiked\r\n                                                      ? Colors.red\r\n                                                      : Colors.grey,\r\n                                                  size: 16.sp),\r\n                                          SizedBox(width: 1.w),\r\n                                          Text(_likeCount.toString(),\r\n                                              style: GoogleFonts.inter(\r\n                                                  fontSize: 12.sp,\r\n                                                  color: _isLiked\r\n                                                      ? Colors.red\r\n                                                      : Colors.grey,\r\n                                                  fontWeight: FontWeight.w500)),\r\n                                        ]))),\r\n\r\n                            SizedBox(width: 2.w),\r\n\r\n                            // Views count\r\n                            Container(\r\n                                padding: EdgeInsets.symmetric(\r\n                                    horizontal: 3.w, vertical: 1.h),\r\n                                child: Row(\r\n                                    mainAxisSize: MainAxisSize.min,\r\n                                    children: [\r\n                                      Icon(Icons.visibility_outlined,\r\n                                          color: Colors.grey, size: 16.sp),\r\n                                      SizedBox(width: 1.w),\r\n                                      Text(widget.post.viewCount.toString(),\r\n                                          style: GoogleFonts.inter(\r\n                                              fontSize: 12.sp,\r\n                                              color: Colors.grey,\r\n                                              fontWeight: FontWeight.w500)),\r\n                                    ])),\r\n\r\n                            const Spacer(),\r\n\r\n                            // Share button\r\n                            InkWell(\r\n                                onTap: () {\r\n                                  // TODO: Implement share functionality\r\n                                  ScaffoldMessenger.of(context).showSnackBar(\r\n                                      const SnackBar(\r\n                                          content: Text(\r\n                                              'Share functionality coming soon!')));\r\n                                },\r\n                                borderRadius: BorderRadius.circular(20),\r\n                                child: Container(\r\n                                    padding: EdgeInsets.symmetric(\r\n                                        horizontal: 3.w, vertical: 1.h),\r\n                                    child: Icon(Icons.share_outlined,\r\n                                        color: Colors.grey, size: 16.sp))),\r\n                          ]),\r\n                        ])))));\r\n  }\r\n}\r\n",
          "profile_tab_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:sizer/sizer.dart';\r\nimport '../../../models/user_profile.dart';\r\nimport '../../../services/auth_service.dart';\r\n\r\nclass ProfileTabWidget extends StatefulWidget {\r\n  final bool isAuthenticated;\r\n  final VoidCallback onAuthRequired;\r\n\r\n  const ProfileTabWidget({\r\n    Key? key,\r\n    required this.isAuthenticated,\r\n    required this.onAuthRequired,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<ProfileTabWidget> createState() => _ProfileTabWidgetState();\r\n}\r\n\r\nclass _ProfileTabWidgetState extends State<ProfileTabWidget> {\r\n  UserProfile? _userProfile;\r\n  bool _isLoading = false;\r\n  String _error = '';\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    if (widget.isAuthenticated) {\r\n      _loadUserProfile();\r\n    }\r\n  }\r\n\r\n  @override\r\n  void didUpdateWidget(ProfileTabWidget oldWidget) {\r\n    super.didUpdateWidget(oldWidget);\r\n    if (widget.isAuthenticated != oldWidget.isAuthenticated) {\r\n      if (widget.isAuthenticated) {\r\n        _loadUserProfile();\r\n      } else {\r\n        setState(() {\r\n          _userProfile = null;\r\n          _error = '';\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _loadUserProfile() async {\r\n    try {\r\n      setState(() {\r\n        _isLoading = true;\r\n        _error = '';\r\n      });\r\n\r\n      final profile = await AuthService.instance.getCurrentUserProfile();\r\n\r\n      if (mounted) {\r\n        setState(() {\r\n          _userProfile = profile;\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        setState(() {\r\n          _error = error.toString();\r\n          _isLoading = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _signOut() async {\r\n    try {\r\n      await AuthService.instance.signOut();\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text('Signed out successfully'),\r\n            backgroundColor: Colors.green,\r\n          ),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text('Sign out failed: $error'),\r\n            backgroundColor: Colors.red,\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Widget _buildUnauthenticatedView() {\r\n    return Center(\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          Icon(\r\n            Icons.person_outline,\r\n            size: 80,\r\n            color: Colors.grey[400],\r\n          ),\r\n          SizedBox(height: 3.h),\r\n          Text(\r\n            'Welcome to UniConnect',\r\n            style: GoogleFonts.inter(\r\n              fontSize: 20.sp,\r\n              fontWeight: FontWeight.bold,\r\n              color: Colors.black87,\r\n            ),\r\n          ),\r\n          SizedBox(height: 1.h),\r\n          Text(\r\n            'Sign in to view your profile and interact with posts',\r\n            style: GoogleFonts.inter(\r\n              fontSize: 14.sp,\r\n              color: Colors.grey[600],\r\n            ),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n          SizedBox(height: 4.h),\r\n          ElevatedButton(\r\n            onPressed: widget.onAuthRequired,\r\n            style: ElevatedButton.styleFrom(\r\n              backgroundColor: Theme.of(context).primaryColor,\r\n              foregroundColor: Colors.white,\r\n              padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 1.5.h),\r\n              shape: RoundedRectangleBorder(\r\n                borderRadius: BorderRadius.circular(12),\r\n              ),\r\n            ),\r\n            child: Text(\r\n              'Sign In',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 14.sp,\r\n                fontWeight: FontWeight.w600,\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildProfileView() {\r\n    if (_isLoading) {\r\n      return const Center(\r\n        child: CircularProgressIndicator(),\r\n      );\r\n    }\r\n\r\n    if (_error.isNotEmpty) {\r\n      return Center(\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Icon(\r\n              Icons.error_outline,\r\n              size: 48,\r\n              color: Colors.red[400],\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'Error loading profile',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 16.sp,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              _error,\r\n              style: GoogleFonts.inter(\r\n                fontSize: 12.sp,\r\n                color: Colors.grey[600],\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            ElevatedButton(\r\n              onPressed: _loadUserProfile,\r\n              child: const Text('Try Again'),\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n\r\n    if (_userProfile == null) {\r\n      return Center(\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Icon(\r\n              Icons.person_off_outlined,\r\n              size: 48,\r\n              color: Colors.grey[400],\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'Profile not found',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 16.sp,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n\r\n    return SingleChildScrollView(\r\n      padding: EdgeInsets.all(4.w),\r\n      child: Column(\r\n        children: [\r\n          // Profile header\r\n          Container(\r\n            width: double.infinity,\r\n            padding: EdgeInsets.all(6.w),\r\n            decoration: BoxDecoration(\r\n              color: Colors.white,\r\n              borderRadius: BorderRadius.circular(16),\r\n              boxShadow: [\r\n                BoxShadow(\r\n                  color: Colors.grey.withAlpha(26),\r\n                  spreadRadius: 1,\r\n                  blurRadius: 4,\r\n                  offset: const Offset(0, 2),\r\n                ),\r\n              ],\r\n            ),\r\n            child: Column(\r\n              children: [\r\n                // Profile picture\r\n                CircleAvatar(\r\n                  radius: 40,\r\n                  backgroundColor: Theme.of(context).primaryColor,\r\n                  backgroundImage: _userProfile!.profileImageUrl != null\r\n                      ? NetworkImage(_userProfile!.profileImageUrl!)\r\n                      : null,\r\n                  child: _userProfile!.profileImageUrl == null\r\n                      ? Text(\r\n                          _userProfile!.fullName.isNotEmpty\r\n                              ? _userProfile!.fullName\r\n                                  .substring(0, 1)\r\n                                  .toUpperCase()\r\n                              : 'U',\r\n                          style: GoogleFonts.inter(\r\n                            fontSize: 24.sp,\r\n                            fontWeight: FontWeight.bold,\r\n                            color: Colors.white,\r\n                          ),\r\n                        )\r\n                      : null,\r\n                ),\r\n                SizedBox(height: 2.h),\r\n\r\n                // Name and role\r\n                Text(\r\n                  _userProfile!.fullName,\r\n                  style: GoogleFonts.inter(\r\n                    fontSize: 18.sp,\r\n                    fontWeight: FontWeight.bold,\r\n                    color: Colors.black87,\r\n                  ),\r\n                  textAlign: TextAlign.center,\r\n                ),\r\n                SizedBox(height: 0.5.h),\r\n                Container(\r\n                  padding:\r\n                      EdgeInsets.symmetric(horizontal: 3.w, vertical: 0.5.h),\r\n                  decoration: BoxDecoration(\r\n                    color: _userProfile!.isAdmin\r\n                        ? Colors.red[100]\r\n                        : Colors.blue[100],\r\n                    borderRadius: BorderRadius.circular(8),\r\n                  ),\r\n                  child: Text(\r\n                    _userProfile!.isAdmin ? 'Administrator' : 'Student',\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 11.sp,\r\n                      fontWeight: FontWeight.w600,\r\n                      color: _userProfile!.isAdmin\r\n                          ? Colors.red[800]\r\n                          : Colors.blue[800],\r\n                    ),\r\n                  ),\r\n                ),\r\n\r\n                if (_userProfile!.department != null) ...[\r\n                  SizedBox(height: 1.h),\r\n                  Text(\r\n                    _userProfile!.department!,\r\n                    style: GoogleFonts.inter(\r\n                      fontSize: 14.sp,\r\n                      color: Colors.grey[600],\r\n                    ),\r\n                  ),\r\n                ],\r\n              ],\r\n            ),\r\n          ),\r\n\r\n          SizedBox(height: 3.h),\r\n\r\n          // Profile details\r\n          Container(\r\n            width: double.infinity,\r\n            padding: EdgeInsets.all(4.w),\r\n            decoration: BoxDecoration(\r\n              color: Colors.white,\r\n              borderRadius: BorderRadius.circular(16),\r\n              boxShadow: [\r\n                BoxShadow(\r\n                  color: Colors.grey.withAlpha(26),\r\n                  spreadRadius: 1,\r\n                  blurRadius: 4,\r\n                  offset: const Offset(0, 2),\r\n                ),\r\n              ],\r\n            ),\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                Text(\r\n                  'Profile Details',\r\n                  style: GoogleFonts.inter(\r\n                    fontSize: 16.sp,\r\n                    fontWeight: FontWeight.bold,\r\n                    color: Colors.black87,\r\n                  ),\r\n                ),\r\n                SizedBox(height: 2.h),\r\n                _buildDetailRow('Email', _userProfile!.email),\r\n                if (_userProfile!.studentId != null)\r\n                  _buildDetailRow('Student ID', _userProfile!.studentId!),\r\n                if (_userProfile!.universityId != null)\r\n                  _buildDetailRow('University', _userProfile!.universityId!),\r\n                _buildDetailRow('Member since',\r\n                    '${_userProfile!.createdAt.day}/${_userProfile!.createdAt.month}/${_userProfile!.createdAt.year}'),\r\n              ],\r\n            ),\r\n          ),\r\n\r\n          SizedBox(height: 4.h),\r\n\r\n          // Sign out button\r\n          SizedBox(\r\n            width: double.infinity,\r\n            child: ElevatedButton(\r\n              onPressed: _signOut,\r\n              style: ElevatedButton.styleFrom(\r\n                backgroundColor: Colors.red[600],\r\n                foregroundColor: Colors.white,\r\n                padding: EdgeInsets.symmetric(vertical: 1.5.h),\r\n                shape: RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              child: Text(\r\n                'Sign Out',\r\n                style: GoogleFonts.inter(\r\n                  fontSize: 14.sp,\r\n                  fontWeight: FontWeight.w600,\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n\r\n          SizedBox(height: 2.h),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDetailRow(String label, String value) {\r\n    return Padding(\r\n      padding: EdgeInsets.only(bottom: 1.h),\r\n      child: Row(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          SizedBox(\r\n            width: 25.w,\r\n            child: Text(\r\n              label,\r\n              style: GoogleFonts.inter(\r\n                fontSize: 12.sp,\r\n                color: Colors.grey[600],\r\n                fontWeight: FontWeight.w500,\r\n              ),\r\n            ),\r\n          ),\r\n          Expanded(\r\n            child: Text(\r\n              value,\r\n              style: GoogleFonts.inter(\r\n                fontSize: 12.sp,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return widget.isAuthenticated\r\n        ? _buildProfileView()\r\n        : _buildUnauthenticatedView();\r\n  }\r\n}\r\n",
          "search_tab_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../models/post.dart';\r\nimport '../../../services/posts_service.dart';\r\nimport './post_card_widget.dart';\r\n\r\nclass SearchTabWidget extends StatefulWidget {\r\n  final void Function(String postId, bool isLiked)? onPostLikeChanged;\r\n\r\n  const SearchTabWidget({\r\n    Key? key,\r\n    this.onPostLikeChanged,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<SearchTabWidget> createState() => _SearchTabWidgetState();\r\n}\r\n\r\nclass _SearchTabWidgetState extends State<SearchTabWidget> {\r\n  final TextEditingController _searchController = TextEditingController();\r\n  List<Post> _searchResults = [];\r\n  bool _isSearching = false;\r\n  bool _hasSearched = false;\r\n  String _error = '';\r\n\r\n  @override\r\n  void dispose() {\r\n    _searchController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _performSearch(String query) async {\r\n    if (query.trim().isEmpty) {\r\n      setState(() {\r\n        _searchResults = [];\r\n        _hasSearched = false;\r\n        _error = '';\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setState(() {\r\n        _isSearching = true;\r\n        _error = '';\r\n      });\r\n\r\n      final results = await PostsService.instance.searchPosts(query.trim());\r\n      if (mounted) {\r\n        setState(() {\r\n          _searchResults = results;\r\n          _isSearching = false;\r\n          _hasSearched = true;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (mounted) {\r\n        setState(() {\r\n          _error = error.toString();\r\n          _isSearching = false;\r\n          _hasSearched = true;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  Widget _buildSearchResults() {\r\n    if (_isSearching) {\r\n      return const Center(\r\n        child: CircularProgressIndicator(),\r\n      );\r\n    }\r\n\r\n    if (_error.isNotEmpty) {\r\n      return Center(\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Icon(\r\n              Icons.error_outline,\r\n              size: 48,\r\n              color: Colors.red[400],\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'Search failed',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 16.sp,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              _error,\r\n              style: GoogleFonts.inter(\r\n                fontSize: 12.sp,\r\n                color: Colors.grey[600],\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n\r\n    if (!_hasSearched) {\r\n      return Center(\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Icon(\r\n              Icons.search,\r\n              size: 64,\r\n              color: Colors.grey[400],\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'Search Posts',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 18.sp,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              'Enter keywords to find posts',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 14.sp,\r\n                color: Colors.grey[600],\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n\r\n    if (_searchResults.isEmpty) {\r\n      return Center(\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Icon(\r\n              Icons.search_off,\r\n              size: 64,\r\n              color: Colors.grey[400],\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'No Results Found',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 18.sp,\r\n                fontWeight: FontWeight.w600,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              'Try different keywords or browse all posts',\r\n              style: GoogleFonts.inter(\r\n                fontSize: 14.sp,\r\n                color: Colors.grey[600],\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n\r\n    return ListView.builder(\r\n      padding: EdgeInsets.symmetric(vertical: 1.h),\r\n      itemCount: _searchResults.length,\r\n      itemBuilder: (context, index) {\r\n        final post = _searchResults[index];\r\n        return PostCardWidget(\r\n          post: post,\r\n          onLikeChanged: (isLiked) {\r\n            setState(() {\r\n              _searchResults[index] = post.copyWith(\r\n                isLikedByCurrentUser: isLiked,\r\n                likeCount:\r\n                    (post.likeCount + (isLiked ? 1 : -1)).clamp(0, 1 << 30),\r\n              );\r\n            });\r\n            widget.onPostLikeChanged?.call(post.id, isLiked);\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: EdgeInsets.symmetric(horizontal: 4.w),\r\n      child: Column(\r\n        children: [\r\n          // Search bar\r\n          Container(\r\n            margin: EdgeInsets.symmetric(vertical: 2.h),\r\n            decoration: BoxDecoration(\r\n              color: Colors.white,\r\n              borderRadius: BorderRadius.circular(12),\r\n              boxShadow: [\r\n                BoxShadow(\r\n                  color: Colors.grey.withAlpha(26),\r\n                  spreadRadius: 1,\r\n                  blurRadius: 4,\r\n                  offset: const Offset(0, 2),\r\n                ),\r\n              ],\r\n            ),\r\n            child: TextField(\r\n              controller: _searchController,\r\n              onChanged: (value) {\r\n                // Debounce search\r\n                Future.delayed(const Duration(milliseconds: 500), () {\r\n                  if (_searchController.text == value) {\r\n                    _performSearch(value);\r\n                  }\r\n                });\r\n              },\r\n              onSubmitted: _performSearch,\r\n              decoration: InputDecoration(\r\n                hintText: 'Search posts...',\r\n                hintStyle: GoogleFonts.inter(\r\n                  fontSize: 14.sp,\r\n                  color: Colors.grey[500],\r\n                ),\r\n                prefixIcon: Icon(\r\n                  Icons.search,\r\n                  color: Colors.grey[500],\r\n                ),\r\n                suffixIcon: _searchController.text.isNotEmpty\r\n                    ? IconButton(\r\n                        icon: Icon(\r\n                          Icons.clear,\r\n                          color: Colors.grey[500],\r\n                        ),\r\n                        onPressed: () {\r\n                          _searchController.clear();\r\n                          _performSearch('');\r\n                        },\r\n                      )\r\n                    : null,\r\n                border: OutlineInputBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                  borderSide: BorderSide.none,\r\n                ),\r\n                contentPadding: EdgeInsets.symmetric(\r\n                  horizontal: 4.w,\r\n                  vertical: 1.5.h,\r\n                ),\r\n                filled: true,\r\n                fillColor: Colors.white,\r\n              ),\r\n              style: GoogleFonts.inter(\r\n                fontSize: 14.sp,\r\n                color: Colors.black87,\r\n              ),\r\n            ),\r\n          ),\r\n\r\n          // Search results\r\n          Expanded(\r\n            child: _buildSearchResults(),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
      },
      "notifications_screen": {
        "notifications_screen.dart": "import 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../core/app_export.dart';\r\nimport './widgets/empty_notifications_widget.dart';\r\nimport './widgets/notification_card_widget.dart';\r\nimport './widgets/notification_filter_chips_widget.dart';\r\n\r\nclass NotificationsScreen extends StatefulWidget {\r\n  const NotificationsScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\r\n}\r\n\r\nclass _NotificationsScreenState extends State<NotificationsScreen>\r\n    with SingleTickerProviderStateMixin {\r\n  String _selectedFilter = 'all';\r\n  bool _isLoading = false;\r\n  late AnimationController _animationController;\r\n  late Animation<double> _fadeAnimation;\r\n\r\n  // Mock notifications data\r\n  final List<Map<String, dynamic>> _allNotifications = [\r\n    {\r\n      \"id\": 1,\r\n      \"type\": \"emergency\",\r\n      \"senderName\": \"Seguridad Campus\",\r\n      \"senderAvatar\":\r\n          \"https://images.unsplash.com/photo-1560250097-0b93528c311a?w=400&h=400&fit=crop&crop=face\",\r\n      \"title\": \"Alerta de Seguridad\",\r\n      \"message\":\r\n          \"Se ha reportado actividad sospechosa en el edificio de ciencias. Evita el área hasta nuevo aviso.\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(minutes: 15)),\r\n      \"isRead\": false,\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"type\": \"event\",\r\n      \"senderName\": \"Eventos Universitarios\",\r\n      \"senderAvatar\":\r\n          \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face\",\r\n      \"title\": \"Conferencia de Tecnología\",\r\n      \"message\":\r\n          \"Únete a nosotros mañana a las 14:00 en el auditorio principal para una conferencia sobre inteligencia artificial.\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(hours: 2)),\r\n      \"isRead\": false,\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"type\": \"post\",\r\n      \"senderName\": \"Dr. María González\",\r\n      \"senderAvatar\":\r\n          \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face\",\r\n      \"title\": \"Nueva publicación\",\r\n      \"message\":\r\n          \"He compartido material adicional para el examen de matemáticas avanzadas. Revisen la plataforma.\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(hours: 4)),\r\n      \"isRead\": true,\r\n    },\r\n    {\r\n      \"id\": 4,\r\n      \"type\": \"rsvp\",\r\n      \"senderName\": \"Club de Debate\",\r\n      \"senderAvatar\":\r\n          \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face\",\r\n      \"title\": \"Confirmación RSVP\",\r\n      \"message\":\r\n          \"Tu inscripción al torneo de debate del viernes ha sido confirmada. ¡Te esperamos!\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(hours: 6)),\r\n      \"isRead\": true,\r\n    },\r\n    {\r\n      \"id\": 5,\r\n      \"type\": \"system\",\r\n      \"senderName\": \"Sistema UniConnect\",\r\n      \"senderAvatar\": null,\r\n      \"title\": \"Actualización de la aplicación\",\r\n      \"message\":\r\n          \"Nueva versión disponible con mejoras en el rendimiento y corrección de errores.\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(days: 1)),\r\n      \"isRead\": false,\r\n    },\r\n    {\r\n      \"id\": 6,\r\n      \"type\": \"event\",\r\n      \"senderName\": \"Biblioteca Central\",\r\n      \"senderAvatar\":\r\n          \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face\",\r\n      \"title\": \"Horario Extendido\",\r\n      \"message\":\r\n          \"Durante la semana de exámenes, la biblioteca estará abierta 24 horas.\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(days: 2)),\r\n      \"isRead\": true,\r\n    },\r\n    {\r\n      \"id\": 7,\r\n      \"type\": \"post\",\r\n      \"senderName\": \"Coordinación Académica\",\r\n      \"senderAvatar\":\r\n          \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face\",\r\n      \"title\": \"Cambio de horario\",\r\n      \"message\":\r\n          \"La clase de Historia del Arte del martes se ha movido al aula 205. Confirmen su asistencia.\",\r\n      \"timestamp\": DateTime.now().subtract(Duration(days: 3)),\r\n      \"isRead\": true,\r\n    },\r\n  ];\r\n\r\n  List<Map<String, dynamic>> get _filteredNotifications {\r\n    if (_selectedFilter == 'all') {\r\n      return _allNotifications;\r\n    }\r\n    return _allNotifications\r\n        .where((notification) => notification['type'] == _selectedFilter)\r\n        .toList();\r\n  }\r\n\r\n  Map<String, int> get _filterCounts {\r\n    final Map<String, int> counts = {\r\n      'all': _allNotifications.length,\r\n      'post': 0,\r\n      'event': 0,\r\n      'emergency': 0,\r\n      'system': 0,\r\n      'rsvp': 0,\r\n    };\r\n\r\n    for (final notification in _allNotifications) {\r\n      final type = notification['type'] as String;\r\n      counts[type] = (counts[type] ?? 0) + 1;\r\n    }\r\n\r\n    return counts;\r\n  }\r\n\r\n  int get _unreadCount {\r\n    return _allNotifications\r\n        .where((notification) => !(notification['isRead'] as bool? ?? false))\r\n        .length;\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _animationController = AnimationController(\r\n      duration: const Duration(milliseconds: 300),\r\n      vsync: this,\r\n    );\r\n    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(\r\n      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),\r\n    );\r\n    _animationController.forward();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _animationController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: AppTheme.lightTheme.scaffoldBackgroundColor,\r\n      appBar: _buildAppBar(),\r\n      body: FadeTransition(\r\n        opacity: _fadeAnimation,\r\n        child: Column(\r\n          children: [\r\n            _buildFilterChips(),\r\n            Expanded(\r\n              child: _buildNotificationsList(),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  PreferredSizeWidget _buildAppBar() {\r\n    return PreferredSize(\r\n      preferredSize: Size.fromHeight(90),\r\n      child: Container(\r\n        color: AppTheme.lightTheme.colorScheme.surface,\r\n        padding: EdgeInsets.only(top: MediaQuery.of(context).padding.top),\r\n        child: Row(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            // Back button\r\n            Padding(\r\n              padding: EdgeInsets.only(left: 2.w, top: 16),\r\n              child: IconButton(\r\n                onPressed: () => Navigator.pop(context),\r\n                icon: CustomIconWidget(\r\n                  iconName: 'arrow_back',\r\n                  color: AppTheme.lightTheme.colorScheme.onSurface,\r\n                  size: 6.w,\r\n                ),\r\n              ),\r\n            ),\r\n            // Icon + badge + title + subtitle\r\n            Expanded(\r\n              child: Padding(\r\n                padding: EdgeInsets.only(left: 2.w, top: 12, bottom: 8),\r\n                child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  mainAxisSize: MainAxisSize.min,\r\n                  children: [\r\n                    Row(\r\n                      crossAxisAlignment: CrossAxisAlignment.center,\r\n                      children: [\r\n                        Stack(\r\n                          clipBehavior: Clip.none,\r\n                          children: [\r\n                            CustomIconWidget(\r\n                              iconName: 'notifications',\r\n                              color: AppTheme.lightTheme.colorScheme.primary,\r\n                              size: 8.w,\r\n                            ),\r\n                            if (_unreadCount > 0)\r\n                              Positioned(\r\n                                right: -2,\r\n                                top: -4,\r\n                                child: Container(\r\n                                  padding: EdgeInsets.symmetric(\r\n                                      horizontal: 1.5.w, vertical: 0.2.h),\r\n                                  decoration: BoxDecoration(\r\n                                    color:\r\n                                        AppTheme.lightTheme.colorScheme.error,\r\n                                    borderRadius: BorderRadius.circular(12),\r\n                                    border: Border.all(\r\n                                        color: Colors.white, width: 1),\r\n                                  ),\r\n                                  child: Text(\r\n                                    _unreadCount > 99\r\n                                        ? '99+'\r\n                                        : _unreadCount.toString(),\r\n                                    style: AppTheme\r\n                                        .lightTheme.textTheme.labelSmall\r\n                                        ?.copyWith(\r\n                                      color: AppTheme\r\n                                          .lightTheme.colorScheme.onError,\r\n                                      fontWeight: FontWeight.bold,\r\n                                      fontSize: 10.sp,\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                          ],\r\n                        ),\r\n                        SizedBox(width: 2.w),\r\n                        Expanded(\r\n                          child: Text(\r\n                            'Notificaciones',\r\n                            style: AppTheme.lightTheme.textTheme.titleLarge\r\n                                ?.copyWith(\r\n                              fontWeight: FontWeight.bold,\r\n                              fontSize: 18.sp,\r\n                            ),\r\n                            overflow: TextOverflow.ellipsis,\r\n                            maxLines: 1,\r\n                          ),\r\n                        ),\r\n                        if (_unreadCount > 0)\r\n                          Padding(\r\n                            padding: EdgeInsets.only(left: 2.w),\r\n                            child: TextButton(\r\n                              onPressed: _markAllAsRead,\r\n                              child: Text(\r\n                                'Marcar todas',\r\n                                style: AppTheme.lightTheme.textTheme.labelMedium\r\n                                    ?.copyWith(\r\n                                  color:\r\n                                      AppTheme.lightTheme.colorScheme.primary,\r\n                                  fontWeight: FontWeight.w600,\r\n                                ),\r\n                                overflow: TextOverflow.ellipsis,\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        IconButton(\r\n                          onPressed: _showNotificationSettings,\r\n                          icon: CustomIconWidget(\r\n                            iconName: 'settings',\r\n                            color: AppTheme.lightTheme.colorScheme.onSurface,\r\n                            size: 6.w,\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    if (_unreadCount > 0)\r\n                      Padding(\r\n                        padding: EdgeInsets.only(left: 1.5.w, top: 2),\r\n                        child: Text(\r\n                          '$_unreadCount sin leer',\r\n                          style:\r\n                              AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                            color: AppTheme.lightTheme.colorScheme.primary,\r\n                            fontWeight: FontWeight.w500,\r\n                          ),\r\n                        ),\r\n                      ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildFilterChips() {\r\n    return NotificationFilterChipsWidget(\r\n      selectedFilter: _selectedFilter,\r\n      onFilterChanged: (filter) {\r\n        setState(() {\r\n          _selectedFilter = filter;\r\n        });\r\n        HapticFeedback.lightImpact();\r\n      },\r\n      filterCounts: _filterCounts,\r\n    );\r\n  }\r\n\r\n  Widget _buildNotificationsList() {\r\n    if (_isLoading) {\r\n      return Center(\r\n        child: CircularProgressIndicator(\r\n          color: AppTheme.lightTheme.colorScheme.primary,\r\n        ),\r\n      );\r\n    }\r\n\r\n    final filteredNotifications = _filteredNotifications;\r\n\r\n    if (filteredNotifications.isEmpty) {\r\n      return EmptyNotificationsWidget(filterType: _selectedFilter);\r\n    }\r\n\r\n    return RefreshIndicator(\r\n      onRefresh: _refreshNotifications,\r\n      color: AppTheme.lightTheme.colorScheme.primary,\r\n      child: ListView.builder(\r\n        physics: const AlwaysScrollableScrollPhysics(),\r\n        itemCount: filteredNotifications.length,\r\n        itemBuilder: (context, index) {\r\n          final notification = filteredNotifications[index];\r\n          return NotificationCardWidget(\r\n            notification: notification,\r\n            onTap: () => _onNotificationTap(notification),\r\n            onMarkAsRead: () => _markAsRead(notification['id'] as int),\r\n            onDelete: () => _deleteNotification(notification['id'] as int),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _refreshNotifications() async {\r\n    setState(() {\r\n      _isLoading = true;\r\n    });\r\n\r\n    // Simulate network request\r\n    await Future.delayed(const Duration(seconds: 1));\r\n\r\n    setState(() {\r\n      _isLoading = false;\r\n    });\r\n\r\n    HapticFeedback.lightImpact();\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Text('Notificaciones actualizadas'),\r\n        duration: const Duration(seconds: 2),\r\n        behavior: SnackBarBehavior.floating,\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onNotificationTap(Map<String, dynamic> notification) {\r\n    final String type = notification['type'] as String;\r\n    final int id = notification['id'] as int;\r\n\r\n    // Mark as read when tapped\r\n    _markAsRead(id);\r\n\r\n    // Navigate based on notification type\r\n    switch (type) {\r\n      case 'post':\r\n        Navigator.pushNamed(context, '/post-detail-screen');\r\n        break;\r\n      case 'event':\r\n        Navigator.pushNamed(context, '/main-feed-screen');\r\n        break;\r\n      case 'emergency':\r\n        _showEmergencyDetails(notification);\r\n        break;\r\n      case 'system':\r\n        _showSystemUpdate(notification);\r\n        break;\r\n      case 'rsvp':\r\n        Navigator.pushNamed(context, '/main-feed-screen');\r\n        break;\r\n      default:\r\n        Navigator.pushNamed(context, '/main-feed-screen');\r\n    }\r\n  }\r\n\r\n  void _markAsRead(int notificationId) {\r\n    setState(() {\r\n      final index =\r\n          _allNotifications.indexWhere((n) => n['id'] == notificationId);\r\n      if (index != -1) {\r\n        _allNotifications[index]['isRead'] = true;\r\n      }\r\n    });\r\n    HapticFeedback.selectionClick();\r\n  }\r\n\r\n  void _markAllAsRead() {\r\n    setState(() {\r\n      for (final notification in _allNotifications) {\r\n        notification['isRead'] = true;\r\n      }\r\n    });\r\n    HapticFeedback.mediumImpact();\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Text('Todas las notificaciones marcadas como leídas'),\r\n        duration: const Duration(seconds: 2),\r\n        behavior: SnackBarBehavior.floating,\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _deleteNotification(int notificationId) {\r\n    setState(() {\r\n      _allNotifications.removeWhere((n) => n['id'] == notificationId);\r\n    });\r\n    HapticFeedback.mediumImpact();\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Text('Notificación eliminada'),\r\n        duration: const Duration(seconds: 2),\r\n        behavior: SnackBarBehavior.floating,\r\n        action: SnackBarAction(\r\n          label: 'Deshacer',\r\n          onPressed: () {\r\n            // In a real app, you would restore the notification here\r\n          },\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showEmergencyDetails(Map<String, dynamic> notification) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(16),\r\n        ),\r\n        title: Row(\r\n          children: [\r\n            CustomIconWidget(\r\n              iconName: 'warning',\r\n              color: AppTheme.lightTheme.colorScheme.error,\r\n              size: 6.w,\r\n            ),\r\n            SizedBox(width: 2.w),\r\n            Expanded(\r\n              child: Text(\r\n                notification['title'] as String? ?? 'Alerta de Emergencia',\r\n                style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(\r\n                  color: AppTheme.lightTheme.colorScheme.error,\r\n                  fontWeight: FontWeight.w600,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n        content: Text(\r\n          notification['message'] as String? ?? '',\r\n          style: AppTheme.lightTheme.textTheme.bodyMedium,\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: Text('Entendido'),\r\n          ),\r\n          ElevatedButton(\r\n            onPressed: () {\r\n              Navigator.pop(context);\r\n              Navigator.pushNamed(context, '/main-feed-screen');\r\n            },\r\n            style: ElevatedButton.styleFrom(\r\n              backgroundColor: AppTheme.lightTheme.colorScheme.error,\r\n            ),\r\n            child: Text('Ver más detalles'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showSystemUpdate(Map<String, dynamic> notification) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(16),\r\n        ),\r\n        title: Row(\r\n          children: [\r\n            CustomIconWidget(\r\n              iconName: 'system_update',\r\n              color: AppTheme.lightTheme.colorScheme.primary,\r\n              size: 6.w,\r\n            ),\r\n            SizedBox(width: 2.w),\r\n            Expanded(\r\n              child: Text(\r\n                notification['title'] as String? ?? 'Actualización del Sistema',\r\n                style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(\r\n                  fontWeight: FontWeight.w600,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n        content: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              notification['message'] as String? ?? '',\r\n              style: AppTheme.lightTheme.textTheme.bodyMedium,\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            Text(\r\n              'Características nuevas:',\r\n              style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n                fontWeight: FontWeight.w600,\r\n              ),\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              '• Mejor rendimiento en la carga de imágenes\\n• Corrección de errores menores\\n• Nuevas opciones de notificación',\r\n              style: AppTheme.lightTheme.textTheme.bodySmall,\r\n            ),\r\n          ],\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: Text('Más tarde'),\r\n          ),\r\n          ElevatedButton(\r\n            onPressed: () {\r\n              Navigator.pop(context);\r\n              // In a real app, this would trigger the update\r\n              ScaffoldMessenger.of(context).showSnackBar(\r\n                SnackBar(\r\n                  content: Text('Actualización iniciada'),\r\n                  behavior: SnackBarBehavior.floating,\r\n                ),\r\n              );\r\n            },\r\n            child: Text('Actualizar ahora'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showNotificationSettings() {\r\n    showModalBottomSheet(\r\n      context: context,\r\n      isScrollControlled: true,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),\r\n      ),\r\n      builder: (context) => Container(\r\n        padding: EdgeInsets.all(4.w),\r\n        height: 60.h,\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Container(\r\n              width: 10.w,\r\n              height: 0.5.h,\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant\r\n                    .withValues(alpha: 0.3),\r\n                borderRadius: BorderRadius.circular(2),\r\n              ),\r\n              margin: EdgeInsets.only(bottom: 2.h),\r\n              alignment: Alignment.center,\r\n            ),\r\n            Text(\r\n              'Configuración de Notificaciones',\r\n              style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(\r\n                fontWeight: FontWeight.w600,\r\n              ),\r\n            ),\r\n            SizedBox(height: 3.h),\r\n            Expanded(\r\n              child: ListView(\r\n                children: [\r\n                  _buildSettingTile(\r\n                    'Publicaciones',\r\n                    'Recibir notificaciones de nuevas publicaciones',\r\n                    'article',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Eventos',\r\n                    'Notificaciones sobre eventos del campus',\r\n                    'event',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Alertas de Emergencia',\r\n                    'Alertas importantes de seguridad (no se pueden desactivar)',\r\n                    'warning',\r\n                    true,\r\n                    enabled: false,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Actualizaciones del Sistema',\r\n                    'Cambios en la aplicación',\r\n                    'settings',\r\n                    false,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Confirmaciones RSVP',\r\n                    'Confirmaciones de eventos',\r\n                    'event_available',\r\n                    true,\r\n                  ),\r\n                  SizedBox(height: 2.h),\r\n                  Divider(),\r\n                  SizedBox(height: 2.h),\r\n                  Text(\r\n                    'Configuración Avanzada',\r\n                    style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(\r\n                      fontWeight: FontWeight.w600,\r\n                    ),\r\n                  ),\r\n                  SizedBox(height: 1.h),\r\n                  _buildSettingTile(\r\n                    'Horario Silencioso',\r\n                    '22:00 - 08:00',\r\n                    'bedtime',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Vibración',\r\n                    'Vibrar al recibir notificaciones',\r\n                    'vibration',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Sonido',\r\n                    'Reproducir sonido de notificación',\r\n                    'volume_up',\r\n                    true,\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSettingTile(\r\n    String title,\r\n    String subtitle,\r\n    String icon,\r\n    bool value, {\r\n    bool enabled = true,\r\n  }) {\r\n    return ListTile(\r\n      leading: Container(\r\n        padding: EdgeInsets.all(2.w),\r\n        decoration: BoxDecoration(\r\n          color: AppTheme.lightTheme.colorScheme.primary.withValues(alpha: 0.1),\r\n          borderRadius: BorderRadius.circular(8),\r\n        ),\r\n        child: CustomIconWidget(\r\n          iconName: icon,\r\n          color: enabled\r\n              ? AppTheme.lightTheme.colorScheme.primary\r\n              : AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n          size: 5.w,\r\n        ),\r\n      ),\r\n      title: Text(\r\n        title,\r\n        style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n          fontWeight: FontWeight.w500,\r\n          color: enabled\r\n              ? AppTheme.lightTheme.colorScheme.onSurface\r\n              : AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n        ),\r\n      ),\r\n      subtitle: Text(\r\n        subtitle,\r\n        style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n          color: enabled\r\n              ? AppTheme.lightTheme.colorScheme.onSurfaceVariant\r\n              : AppTheme.lightTheme.colorScheme.onSurfaceVariant\r\n                  .withValues(alpha: 0.6),\r\n        ),\r\n      ),\r\n      trailing: Switch(\r\n        value: value,\r\n        onChanged: enabled\r\n            ? (newValue) {\r\n                HapticFeedback.selectionClick();\r\n                // Handle switch change\r\n              }\r\n            : null,\r\n      ),\r\n      contentPadding: EdgeInsets.symmetric(horizontal: 0, vertical: 1.h),\r\n    );\r\n  }\r\n}\r\n",
        "widgets": {
          "empty_notifications_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass EmptyNotificationsWidget extends StatelessWidget {\r\n  final String filterType;\r\n\r\n  const EmptyNotificationsWidget({\r\n    Key? key,\r\n    required this.filterType,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Map<String, dynamic> emptyStateConfig =\r\n        _getEmptyStateConfig(filterType);\r\n\r\n    return Center(\r\n      child: Padding(\r\n        padding: EdgeInsets.all(8.w),\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            Container(\r\n              width: 30.w,\r\n              height: 30.w,\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.primary\r\n                    .withValues(alpha: 0.1),\r\n                shape: BoxShape.circle,\r\n              ),\r\n              child: CustomIconWidget(\r\n                iconName: emptyStateConfig['icon'] as String,\r\n                color: AppTheme.lightTheme.colorScheme.primary,\r\n                size: 15.w,\r\n              ),\r\n            ),\r\n            SizedBox(height: 3.h),\r\n            Text(\r\n              emptyStateConfig['title'] as String,\r\n              style: AppTheme.lightTheme.textTheme.headlineSmall?.copyWith(\r\n                color: AppTheme.lightTheme.colorScheme.onSurface,\r\n                fontWeight: FontWeight.w600,\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n            SizedBox(height: 1.h),\r\n            Text(\r\n              emptyStateConfig['subtitle'] as String,\r\n              style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n              ),\r\n              textAlign: TextAlign.center,\r\n            ),\r\n            SizedBox(height: 4.h),\r\n            _buildActionButtons(context),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildActionButtons(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        ElevatedButton.icon(\r\n          onPressed: () => Navigator.pushNamed(context, '/main-feed-screen'),\r\n          icon: CustomIconWidget(\r\n            iconName: 'home',\r\n            color: AppTheme.lightTheme.colorScheme.onPrimary,\r\n            size: 5.w,\r\n          ),\r\n          label: Text('Ver Feed Principal'),\r\n          style: ElevatedButton.styleFrom(\r\n            padding: EdgeInsets.symmetric(horizontal: 6.w, vertical: 1.5.h),\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(12),\r\n            ),\r\n          ),\r\n        ),\r\n        SizedBox(height: 2.h),\r\n        OutlinedButton.icon(\r\n          onPressed: () => _showNotificationSettings(context),\r\n          icon: CustomIconWidget(\r\n            iconName: 'settings',\r\n            color: AppTheme.lightTheme.colorScheme.primary,\r\n            size: 5.w,\r\n          ),\r\n          label: Text('Configurar Notificaciones'),\r\n          style: OutlinedButton.styleFrom(\r\n            padding: EdgeInsets.symmetric(horizontal: 6.w, vertical: 1.5.h),\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(12),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Map<String, dynamic> _getEmptyStateConfig(String filterType) {\r\n    switch (filterType) {\r\n      case 'post':\r\n        return {\r\n          'icon': 'article',\r\n          'title': 'No hay publicaciones nuevas',\r\n          'subtitle':\r\n              'Cuando haya nuevas publicaciones de la universidad, aparecerán aquí.',\r\n        };\r\n      case 'event':\r\n        return {\r\n          'icon': 'event',\r\n          'title': 'No hay eventos próximos',\r\n          'subtitle': 'Te notificaremos sobre eventos importantes del campus.',\r\n        };\r\n      case 'emergency':\r\n        return {\r\n          'icon': 'warning',\r\n          'title': 'No hay alertas de emergencia',\r\n          'subtitle':\r\n              'Las alertas importantes aparecerán aquí para mantenerte informado.',\r\n        };\r\n      case 'system':\r\n        return {\r\n          'icon': 'settings',\r\n          'title': 'No hay actualizaciones del sistema',\r\n          'subtitle':\r\n              'Te informaremos sobre cambios importantes en la aplicación.',\r\n        };\r\n      default:\r\n        return {\r\n          'icon': 'notifications_none',\r\n          'title': 'No tienes notificaciones',\r\n          'subtitle':\r\n              'Mantente conectado con las actividades del campus. Las notificaciones aparecerán aquí.',\r\n        };\r\n    }\r\n  }\r\n\r\n  void _showNotificationSettings(BuildContext context) {\r\n    showModalBottomSheet(\r\n      context: context,\r\n      isScrollControlled: true,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),\r\n      ),\r\n      builder: (context) => Container(\r\n        padding: EdgeInsets.all(4.w),\r\n        height: 50.h,\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Container(\r\n              width: 10.w,\r\n              height: 0.5.h,\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant\r\n                    .withValues(alpha: 0.3),\r\n                borderRadius: BorderRadius.circular(2),\r\n              ),\r\n              margin: EdgeInsets.only(bottom: 2.h),\r\n              alignment: Alignment.center,\r\n            ),\r\n            Text(\r\n              'Configuración de Notificaciones',\r\n              style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(\r\n                fontWeight: FontWeight.w600,\r\n              ),\r\n            ),\r\n            SizedBox(height: 3.h),\r\n            Expanded(\r\n              child: ListView(\r\n                children: [\r\n                  _buildSettingTile(\r\n                    'Publicaciones',\r\n                    'Recibir notificaciones de nuevas publicaciones',\r\n                    'article',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Eventos',\r\n                    'Notificaciones sobre eventos del campus',\r\n                    'event',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Alertas de Emergencia',\r\n                    'Alertas importantes de seguridad',\r\n                    'warning',\r\n                    true,\r\n                  ),\r\n                  _buildSettingTile(\r\n                    'Actualizaciones del Sistema',\r\n                    'Cambios en la aplicación',\r\n                    'settings',\r\n                    false,\r\n                  ),\r\n                  SizedBox(height: 2.h),\r\n                  Divider(),\r\n                  SizedBox(height: 2.h),\r\n                  _buildSettingTile(\r\n                    'Horario Silencioso',\r\n                    '22:00 - 08:00',\r\n                    'bedtime',\r\n                    true,\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSettingTile(\r\n      String title, String subtitle, String icon, bool value) {\r\n    return ListTile(\r\n      leading: Container(\r\n        padding: EdgeInsets.all(2.w),\r\n        decoration: BoxDecoration(\r\n          color: AppTheme.lightTheme.colorScheme.primary.withValues(alpha: 0.1),\r\n          borderRadius: BorderRadius.circular(8),\r\n        ),\r\n        child: CustomIconWidget(\r\n          iconName: icon,\r\n          color: AppTheme.lightTheme.colorScheme.primary,\r\n          size: 5.w,\r\n        ),\r\n      ),\r\n      title: Text(\r\n        title,\r\n        style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n          fontWeight: FontWeight.w500,\r\n        ),\r\n      ),\r\n      subtitle: Text(\r\n        subtitle,\r\n        style: AppTheme.lightTheme.textTheme.bodySmall,\r\n      ),\r\n      trailing: Switch(\r\n        value: value,\r\n        onChanged: (newValue) {\r\n          // Handle switch change\r\n        },\r\n      ),\r\n      contentPadding: EdgeInsets.symmetric(horizontal: 0, vertical: 1.h),\r\n    );\r\n  }\r\n}\r\n",
          "notification_card_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass NotificationCardWidget extends StatelessWidget {\r\n  final Map<String, dynamic> notification;\r\n  final VoidCallback? onTap;\r\n  final VoidCallback? onMarkAsRead;\r\n  final VoidCallback? onDelete;\r\n\r\n  const NotificationCardWidget({\r\n    Key? key,\r\n    required this.notification,\r\n    this.onTap,\r\n    this.onMarkAsRead,\r\n    this.onDelete,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final bool isRead = notification['isRead'] as bool? ?? false;\r\n    final String type = notification['type'] as String? ?? 'post';\r\n    final bool isEmergency = type == 'emergency';\r\n\r\n    return Dismissible(\r\n      key: Key(notification['id'].toString()),\r\n      background: Container(\r\n        alignment: Alignment.centerLeft,\r\n        padding: EdgeInsets.only(left: 4.w),\r\n        decoration: BoxDecoration(\r\n          color: AppTheme.lightTheme.colorScheme.primary.withValues(alpha: 0.1),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        child: CustomIconWidget(\r\n          iconName: 'mark_email_read',\r\n          color: AppTheme.lightTheme.colorScheme.primary,\r\n          size: 6.w,\r\n        ),\r\n      ),\r\n      secondaryBackground: Container(\r\n        alignment: Alignment.centerRight,\r\n        padding: EdgeInsets.only(right: 4.w),\r\n        decoration: BoxDecoration(\r\n          color: AppTheme.lightTheme.colorScheme.error.withValues(alpha: 0.1),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        child: CustomIconWidget(\r\n          iconName: 'delete',\r\n          color: AppTheme.lightTheme.colorScheme.error,\r\n          size: 6.w,\r\n        ),\r\n      ),\r\n      confirmDismiss: (direction) async {\r\n        if (direction == DismissDirection.startToEnd) {\r\n          onMarkAsRead?.call();\r\n          return false;\r\n        } else {\r\n          return await _showDeleteConfirmation(context);\r\n        }\r\n      },\r\n      child: GestureDetector(\r\n        onTap: onTap,\r\n        onLongPress: () => _showContextMenu(context),\r\n        child: Container(\r\n          margin: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),\r\n          padding: EdgeInsets.all(3.w),\r\n          decoration: BoxDecoration(\r\n            color: isEmergency\r\n                ? AppTheme.lightTheme.colorScheme.error.withValues(alpha: 0.05)\r\n                : AppTheme.lightTheme.colorScheme.surface,\r\n            borderRadius: BorderRadius.circular(12),\r\n            border: Border.all(\r\n              color: isEmergency\r\n                  ? AppTheme.lightTheme.colorScheme.error.withValues(alpha: 0.3)\r\n                  : isRead\r\n                      ? Colors.transparent\r\n                      : AppTheme.lightTheme.colorScheme.primary\r\n                          .withValues(alpha: 0.3),\r\n              width: isEmergency ? 2 : (isRead ? 0 : 1),\r\n            ),\r\n            boxShadow: [\r\n              BoxShadow(\r\n                color: Colors.black.withValues(alpha: 0.05),\r\n                blurRadius: 4,\r\n                offset: const Offset(0, 2),\r\n              ),\r\n            ],\r\n          ),\r\n          child: Row(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: [\r\n              _buildAvatar(),\r\n              SizedBox(width: 3.w),\r\n              Expanded(\r\n                child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    _buildHeader(),\r\n                    SizedBox(height: 1.h),\r\n                    _buildContent(),\r\n                    SizedBox(height: 1.h),\r\n                    _buildFooter(),\r\n                  ],\r\n                ),\r\n              ),\r\n              if (!isRead) _buildUnreadIndicator(),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildAvatar() {\r\n    final String? avatarUrl = notification['senderAvatar'] as String?;\r\n    final String type = notification['type'] as String? ?? 'post';\r\n\r\n    return Container(\r\n      width: 12.w,\r\n      height: 12.w,\r\n      decoration: BoxDecoration(\r\n        shape: BoxShape.circle,\r\n        border: Border.all(\r\n          color: type == 'emergency'\r\n              ? AppTheme.lightTheme.colorScheme.error\r\n              : AppTheme.lightTheme.colorScheme.primary.withValues(alpha: 0.3),\r\n          width: 2,\r\n        ),\r\n      ),\r\n      child: ClipOval(\r\n        child: avatarUrl != null\r\n            ? CustomImageWidget(\r\n                imageUrl: avatarUrl,\r\n                width: 12.w,\r\n                height: 12.w,\r\n                fit: BoxFit.cover,\r\n              )\r\n            : Container(\r\n                color: AppTheme.lightTheme.colorScheme.primary\r\n                    .withValues(alpha: 0.1),\r\n                child: CustomIconWidget(\r\n                  iconName: _getTypeIcon(type),\r\n                  color: type == 'emergency'\r\n                      ? AppTheme.lightTheme.colorScheme.error\r\n                      : AppTheme.lightTheme.colorScheme.primary,\r\n                  size: 6.w,\r\n                ),\r\n              ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildHeader() {\r\n    final String senderName =\r\n        notification['senderName'] as String? ?? 'Universidad';\r\n    final String type = notification['type'] as String? ?? 'post';\r\n    final bool isEmergency = type == 'emergency';\r\n\r\n    return Row(\r\n      children: [\r\n        Expanded(\r\n          child: Text(\r\n            senderName,\r\n            style: AppTheme.lightTheme.textTheme.titleSmall?.copyWith(\r\n              fontWeight: FontWeight.w600,\r\n              color: isEmergency\r\n                  ? AppTheme.lightTheme.colorScheme.error\r\n                  : AppTheme.lightTheme.colorScheme.onSurface,\r\n            ),\r\n            maxLines: 1,\r\n            overflow: TextOverflow.ellipsis,\r\n          ),\r\n        ),\r\n        SizedBox(width: 2.w),\r\n        _buildTypeChip(type),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTypeChip(String type) {\r\n    final Map<String, dynamic> typeConfig = _getTypeConfig(type);\r\n\r\n    return Container(\r\n      padding: EdgeInsets.symmetric(horizontal: 2.w, vertical: 0.5.h),\r\n      decoration: BoxDecoration(\r\n        color: (typeConfig['color'] as Color).withValues(alpha: 0.1),\r\n        borderRadius: BorderRadius.circular(8),\r\n      ),\r\n      child: Text(\r\n        typeConfig['label'] as String,\r\n        style: AppTheme.lightTheme.textTheme.labelSmall?.copyWith(\r\n          color: typeConfig['color'] as Color,\r\n          fontWeight: FontWeight.w500,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildContent() {\r\n    final String title = notification['title'] as String? ?? '';\r\n    final String message = notification['message'] as String? ?? '';\r\n    final bool isRead = notification['isRead'] as bool? ?? false;\r\n\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        if (title.isNotEmpty)\r\n          Text(\r\n            title,\r\n            style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n              fontWeight: isRead ? FontWeight.w400 : FontWeight.w600,\r\n              color: AppTheme.lightTheme.colorScheme.onSurface,\r\n            ),\r\n            maxLines: 2,\r\n            overflow: TextOverflow.ellipsis,\r\n          ),\r\n        if (title.isNotEmpty && message.isNotEmpty) SizedBox(height: 0.5.h),\r\n        if (message.isNotEmpty)\r\n          Text(\r\n            message,\r\n            style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n              color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n            ),\r\n            maxLines: 3,\r\n            overflow: TextOverflow.ellipsis,\r\n          ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildFooter() {\r\n    final DateTime timestamp =\r\n        notification['timestamp'] as DateTime? ?? DateTime.now();\r\n    final String timeAgo = _getTimeAgo(timestamp);\r\n\r\n    return Row(\r\n      children: [\r\n        CustomIconWidget(\r\n          iconName: 'access_time',\r\n          color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n          size: 4.w,\r\n        ),\r\n        SizedBox(width: 1.w),\r\n        Text(\r\n          timeAgo,\r\n          style: AppTheme.lightTheme.textTheme.labelSmall?.copyWith(\r\n            color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildUnreadIndicator() {\r\n    return Container(\r\n      width: 2.w,\r\n      height: 2.w,\r\n      decoration: BoxDecoration(\r\n        color: AppTheme.lightTheme.colorScheme.primary,\r\n        shape: BoxShape.circle,\r\n      ),\r\n    );\r\n  }\r\n\r\n  String _getTypeIcon(String type) {\r\n    switch (type) {\r\n      case 'post':\r\n        return 'article';\r\n      case 'event':\r\n        return 'event';\r\n      case 'emergency':\r\n        return 'warning';\r\n      case 'system':\r\n        return 'settings';\r\n      case 'rsvp':\r\n        return 'event_available';\r\n      default:\r\n        return 'notifications';\r\n    }\r\n  }\r\n\r\n  Map<String, dynamic> _getTypeConfig(String type) {\r\n    switch (type) {\r\n      case 'post':\r\n        return {\r\n          'label': 'Publicación',\r\n          'color': AppTheme.lightTheme.colorScheme.primary,\r\n        };\r\n      case 'event':\r\n        return {\r\n          'label': 'Evento',\r\n          'color': AppTheme.lightTheme.colorScheme.tertiary,\r\n        };\r\n      case 'emergency':\r\n        return {\r\n          'label': 'Emergencia',\r\n          'color': AppTheme.lightTheme.colorScheme.error,\r\n        };\r\n      case 'system':\r\n        return {\r\n          'label': 'Sistema',\r\n          'color': AppTheme.lightTheme.colorScheme.secondary,\r\n        };\r\n      case 'rsvp':\r\n        return {\r\n          'label': 'RSVP',\r\n          'color': Colors.green,\r\n        };\r\n      default:\r\n        return {\r\n          'label': 'General',\r\n          'color': AppTheme.lightTheme.colorScheme.secondary,\r\n        };\r\n    }\r\n  }\r\n\r\n  String _getTimeAgo(DateTime timestamp) {\r\n    final now = DateTime.now();\r\n    final difference = now.difference(timestamp);\r\n\r\n    if (difference.inMinutes < 1) {\r\n      return 'Ahora';\r\n    } else if (difference.inMinutes < 60) {\r\n      return 'hace ${difference.inMinutes}m';\r\n    } else if (difference.inHours < 24) {\r\n      return 'hace ${difference.inHours}h';\r\n    } else if (difference.inDays < 7) {\r\n      return 'hace ${difference.inDays}d';\r\n    } else {\r\n      return '${timestamp.day}/${timestamp.month}/${timestamp.year}';\r\n    }\r\n  }\r\n\r\n  Future<bool> _showDeleteConfirmation(BuildContext context) async {\r\n    return await showDialog<bool>(\r\n          context: context,\r\n          builder: (context) => AlertDialog(\r\n            title: Text(\r\n              'Eliminar notificación',\r\n              style: AppTheme.lightTheme.textTheme.titleMedium,\r\n            ),\r\n            content: Text(\r\n              '¿Estás seguro de que quieres eliminar esta notificación?',\r\n              style: AppTheme.lightTheme.textTheme.bodyMedium,\r\n            ),\r\n            actions: [\r\n              TextButton(\r\n                onPressed: () => Navigator.of(context).pop(false),\r\n                child: Text('Cancelar'),\r\n              ),\r\n              TextButton(\r\n                onPressed: () {\r\n                  Navigator.of(context).pop(true);\r\n                  onDelete?.call();\r\n                },\r\n                child: Text(\r\n                  'Eliminar',\r\n                  style:\r\n                      TextStyle(color: AppTheme.lightTheme.colorScheme.error),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ) ??\r\n        false;\r\n  }\r\n\r\n  void _showContextMenu(BuildContext context) {\r\n    showModalBottomSheet(\r\n      context: context,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),\r\n      ),\r\n      builder: (context) => Container(\r\n        padding: EdgeInsets.all(4.w),\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            Container(\r\n              width: 10.w,\r\n              height: 0.5.h,\r\n              decoration: BoxDecoration(\r\n                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant\r\n                    .withValues(alpha: 0.3),\r\n                borderRadius: BorderRadius.circular(2),\r\n              ),\r\n            ),\r\n            SizedBox(height: 2.h),\r\n            ListTile(\r\n              leading: CustomIconWidget(\r\n                iconName: 'mark_email_read',\r\n                color: AppTheme.lightTheme.colorScheme.primary,\r\n                size: 6.w,\r\n              ),\r\n              title: Text('Marcar como leída'),\r\n              onTap: () {\r\n                Navigator.pop(context);\r\n                onMarkAsRead?.call();\r\n              },\r\n            ),\r\n            ListTile(\r\n              leading: CustomIconWidget(\r\n                iconName: 'delete',\r\n                color: AppTheme.lightTheme.colorScheme.error,\r\n                size: 6.w,\r\n              ),\r\n              title: Text('Eliminar'),\r\n              onTap: () {\r\n                Navigator.pop(context);\r\n                _showDeleteConfirmation(context).then((confirmed) {\r\n                  if (confirmed) onDelete?.call();\r\n                });\r\n              },\r\n            ),\r\n            ListTile(\r\n              leading: CustomIconWidget(\r\n                iconName: 'settings',\r\n                color: AppTheme.lightTheme.colorScheme.secondary,\r\n                size: 6.w,\r\n              ),\r\n              title: Text('Configuración de notificaciones'),\r\n              onTap: () {\r\n                Navigator.pop(context);\r\n                // Navigate to notification settings\r\n              },\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n",
          "notification_filter_chips_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\n\r\nclass NotificationFilterChipsWidget extends StatelessWidget {\r\n  final String selectedFilter;\r\n  final Function(String) onFilterChanged;\r\n  final Map<String, int> filterCounts;\r\n\r\n  const NotificationFilterChipsWidget({\r\n    Key? key,\r\n    required this.selectedFilter,\r\n    required this.onFilterChanged,\r\n    required this.filterCounts,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final List<Map<String, dynamic>> filters = [\r\n      {\r\n        'key': 'all',\r\n        'label': 'Todas',\r\n        'icon': 'notifications',\r\n      },\r\n      {\r\n        'key': 'post',\r\n        'label': 'Publicaciones',\r\n        'icon': 'article',\r\n      },\r\n      {\r\n        'key': 'event',\r\n        'label': 'Eventos',\r\n        'icon': 'event',\r\n      },\r\n      {\r\n        'key': 'emergency',\r\n        'label': 'Emergencia',\r\n        'icon': 'warning',\r\n      },\r\n      {\r\n        'key': 'system',\r\n        'label': 'Sistema',\r\n        'icon': 'settings',\r\n      },\r\n    ];\r\n\r\n    return Container(\r\n      height: 6.h,\r\n      child: ListView.separated(\r\n        scrollDirection: Axis.horizontal,\r\n        padding: EdgeInsets.symmetric(horizontal: 4.w),\r\n        itemCount: filters.length,\r\n        separatorBuilder: (context, index) => SizedBox(width: 2.w),\r\n        itemBuilder: (context, index) {\r\n          final filter = filters[index];\r\n          final String key = filter['key'] as String;\r\n          final String label = filter['label'] as String;\r\n          final String icon = filter['icon'] as String;\r\n          final bool isSelected = selectedFilter == key;\r\n          final int count = filterCounts[key] ?? 0;\r\n\r\n          return GestureDetector(\r\n            onTap: () => onFilterChanged(key),\r\n            child: AnimatedContainer(\r\n              duration: const Duration(milliseconds: 200),\r\n              padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),\r\n              decoration: BoxDecoration(\r\n                color: isSelected\r\n                    ? AppTheme.lightTheme.colorScheme.primary\r\n                    : AppTheme.lightTheme.colorScheme.surface,\r\n                borderRadius: BorderRadius.circular(20),\r\n                border: Border.all(\r\n                  color: isSelected\r\n                      ? AppTheme.lightTheme.colorScheme.primary\r\n                      : AppTheme.lightTheme.colorScheme.outline\r\n                          .withValues(alpha: 0.3),\r\n                  width: 1,\r\n                ),\r\n                boxShadow: isSelected\r\n                    ? [\r\n                        BoxShadow(\r\n                          color: AppTheme.lightTheme.colorScheme.primary\r\n                              .withValues(alpha: 0.3),\r\n                          blurRadius: 8,\r\n                          offset: const Offset(0, 2),\r\n                        ),\r\n                      ]\r\n                    : [\r\n                        BoxShadow(\r\n                          color: Colors.black.withValues(alpha: 0.05),\r\n                          blurRadius: 4,\r\n                          offset: const Offset(0, 1),\r\n                        ),\r\n                      ],\r\n              ),\r\n              child: Row(\r\n                mainAxisSize: MainAxisSize.min,\r\n                children: [\r\n                  CustomIconWidget(\r\n                    iconName: icon,\r\n                    color: isSelected\r\n                        ? AppTheme.lightTheme.colorScheme.onPrimary\r\n                        : key == 'emergency'\r\n                            ? AppTheme.lightTheme.colorScheme.error\r\n                            : AppTheme.lightTheme.colorScheme.onSurface,\r\n                    size: 4.w,\r\n                  ),\r\n                  SizedBox(width: 1.w),\r\n                  Text(\r\n                    label,\r\n                    style: AppTheme.lightTheme.textTheme.labelMedium?.copyWith(\r\n                      color: isSelected\r\n                          ? AppTheme.lightTheme.colorScheme.onPrimary\r\n                          : AppTheme.lightTheme.colorScheme.onSurface,\r\n                      fontWeight:\r\n                          isSelected ? FontWeight.w600 : FontWeight.w500,\r\n                    ),\r\n                  ),\r\n                  if (count > 0) ...[\r\n                    SizedBox(width: 1.w),\r\n                    Container(\r\n                      padding: EdgeInsets.symmetric(\r\n                          horizontal: 1.5.w, vertical: 0.2.h),\r\n                      decoration: BoxDecoration(\r\n                        color: isSelected\r\n                            ? AppTheme.lightTheme.colorScheme.onPrimary\r\n                            : key == 'emergency'\r\n                                ? AppTheme.lightTheme.colorScheme.error\r\n                                : AppTheme.lightTheme.colorScheme.primary,\r\n                        borderRadius: BorderRadius.circular(10),\r\n                      ),\r\n                      child: Text(\r\n                        count > 99 ? '99+' : count.toString(),\r\n                        style:\r\n                            AppTheme.lightTheme.textTheme.labelSmall?.copyWith(\r\n                          color: isSelected\r\n                              ? AppTheme.lightTheme.colorScheme.primary\r\n                              : AppTheme.lightTheme.colorScheme.onPrimary,\r\n                          fontWeight: FontWeight.w600,\r\n                          fontSize: 9.sp,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ],\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
      },
      "splash_screen": {
        "splash_screen.dart": "import 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:sizer/sizer.dart';\r\n\r\nimport '../../../core/app_export.dart';\r\nimport '../../services/supabase_service.dart';\r\n\r\nclass SplashScreen extends StatefulWidget {\r\n  const SplashScreen({super.key});\r\n\r\n  @override\r\n  State<SplashScreen> createState() => _SplashScreenState();\r\n}\r\n\r\nclass _SplashScreenState extends State<SplashScreen>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _animationController;\r\n  late Animation<double> _scaleAnimation;\r\n  late Animation<double> _fadeAnimation;\r\n  bool _isInitializing = true;\r\n  String _statusMessage = 'Inicializando UniConnect...';\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _setupAnimations();\r\n    _initializeApp();\r\n  }\r\n\r\n  void _setupAnimations() {\r\n    _animationController = AnimationController(\r\n      duration: const Duration(milliseconds: 2000),\r\n      vsync: this,\r\n    );\r\n\r\n    _scaleAnimation = Tween<double>(\r\n      begin: 0.8,\r\n      end: 1.0,\r\n    ).animate(CurvedAnimation(\r\n      parent: _animationController,\r\n      curve: Curves.elasticOut,\r\n    ));\r\n\r\n    _fadeAnimation = Tween<double>(\r\n      begin: 0.0,\r\n      end: 1.0,\r\n    ).animate(CurvedAnimation(\r\n      parent: _animationController,\r\n      curve: const Interval(0.0, 0.6, curve: Curves.easeIn),\r\n    ));\r\n\r\n    _animationController.forward();\r\n  }\r\n\r\n  Future<void> _initializeApp() async {\r\n    try {\r\n      setState(() {\r\n        _statusMessage = 'Inicializando servicios...';\r\n      });\r\n      // Inicializar Supabase\r\n      await SupabaseService.initialize();\r\n\r\n      setState(() {\r\n        _statusMessage = 'Verificando autenticación...';\r\n      });\r\n      await Future.delayed(const Duration(milliseconds: 500));\r\n\r\n      setState(() {\r\n        _statusMessage = 'Cargando preferencias...';\r\n      });\r\n      await Future.delayed(const Duration(milliseconds: 400));\r\n\r\n      setState(() {\r\n        _statusMessage = 'Configurando universidad...';\r\n      });\r\n      await Future.delayed(const Duration(milliseconds: 400));\r\n\r\n      setState(() {\r\n        _statusMessage = 'Preparando contenido...';\r\n      });\r\n      await Future.delayed(const Duration(milliseconds: 300));\r\n\r\n      setState(() {\r\n        _isInitializing = false;\r\n        _statusMessage = '¡Listo!';\r\n      });\r\n\r\n      // Wait for animation to complete\r\n      await Future.delayed(const Duration(milliseconds: 300));\r\n\r\n      // Navegar según autenticación\r\n      await _navigateToNextScreen();\r\n    } catch (e) {\r\n      setState(() {\r\n        _isInitializing = false;\r\n        _statusMessage = 'Error de conexión';\r\n      });\r\n      await Future.delayed(const Duration(seconds: 2));\r\n      _showRetryOption();\r\n    }\r\n  }\r\n\r\n  Future<void> _navigateToNextScreen() async {\r\n    // Simulate authentication check\r\n    final bool isAuthenticated = await _checkAuthenticationStatus();\r\n    final bool isFirstTime = await _checkFirstTimeUser();\r\n\r\n    if (!mounted) return;\r\n\r\n    if (isAuthenticated) {\r\n      Navigator.pushReplacementNamed(context, '/main-feed-screen');\r\n    } else if (isFirstTime) {\r\n      // For now, navigate to login as onboarding is not implemented\r\n      Navigator.pushReplacementNamed(context, '/login-screen');\r\n    } else {\r\n      Navigator.pushReplacementNamed(context, '/login-screen');\r\n    }\r\n  }\r\n\r\n  Future<bool> _checkAuthenticationStatus() async {\r\n    // Simulate checking stored authentication token\r\n    await Future.delayed(const Duration(milliseconds: 200));\r\n    // Return false for demo - in real app, check stored credentials\r\n    return false;\r\n  }\r\n\r\n  Future<bool> _checkFirstTimeUser() async {\r\n    // Simulate checking if user has opened app before\r\n    await Future.delayed(const Duration(milliseconds: 100));\r\n    // Return true for demo - in real app, check stored preferences\r\n    return true;\r\n  }\r\n\r\n  void _showRetryOption() {\r\n    if (!mounted) return;\r\n\r\n    showDialog(\r\n      context: context,\r\n      barrierDismissible: false,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          backgroundColor: AppTheme.lightTheme.colorScheme.surface,\r\n          shape: RoundedRectangleBorder(\r\n            borderRadius: BorderRadius.circular(16.0),\r\n          ),\r\n          title: Text(\r\n            'Error de Conexión',\r\n            style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(\r\n              color: AppTheme.lightTheme.colorScheme.onSurface,\r\n            ),\r\n          ),\r\n          content: Text(\r\n            'No se pudo conectar con el servidor. Verifica tu conexión a internet e inténtalo de nuevo.',\r\n            style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(\r\n              color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,\r\n            ),\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              onPressed: () {\r\n                Navigator.of(context).pop();\r\n                Navigator.pushReplacementNamed(context, '/login-screen');\r\n              },\r\n              child: Text(\r\n                'Continuar sin conexión',\r\n                style: TextStyle(\r\n                  color: AppTheme.lightTheme.colorScheme.secondary,\r\n                ),\r\n              ),\r\n            ),\r\n            ElevatedButton(\r\n              onPressed: () {\r\n                Navigator.of(context).pop();\r\n                setState(() {\r\n                  _isInitializing = true;\r\n                  _statusMessage = 'Reintentando...';\r\n                });\r\n                _initializeApp();\r\n              },\r\n              style: ElevatedButton.styleFrom(\r\n                backgroundColor: AppTheme.lightTheme.colorScheme.primary,\r\n                foregroundColor: AppTheme.lightTheme.colorScheme.onPrimary,\r\n              ),\r\n              child: const Text('Reintentar'),\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _animationController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // Set system UI overlay style for branded experience\r\n    SystemChrome.setSystemUIOverlayStyle(\r\n      SystemUiOverlayStyle(\r\n        statusBarColor: Colors.transparent,\r\n        statusBarIconBrightness: Brightness.light,\r\n        systemNavigationBarColor: AppTheme.lightTheme.colorScheme.primary,\r\n        systemNavigationBarIconBrightness: Brightness.light,\r\n      ),\r\n    );\r\n\r\n    return Scaffold(\r\n      body: Container(\r\n        width: double.infinity,\r\n        height: double.infinity,\r\n        decoration: BoxDecoration(\r\n          gradient: LinearGradient(\r\n            begin: Alignment.topLeft,\r\n            end: Alignment.bottomRight,\r\n            colors: [\r\n              AppTheme.lightTheme.colorScheme.primary,\r\n              AppTheme.lightTheme.colorScheme.primary.withOpacity(0.8),\r\n              AppTheme.lightTheme.colorScheme.tertiary.withOpacity(0.6),\r\n            ],\r\n            stops: const [0.0, 0.6, 1.0],\r\n          ),\r\n        ),\r\n        child: SafeArea(\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: [\r\n              // Spacer to push content to center\r\n              const Spacer(flex: 2),\r\n\r\n              // Animated Logo Section\r\n              AnimatedBuilder(\r\n                animation: _animationController,\r\n                builder: (context, child) {\r\n                  return Transform.scale(\r\n                    scale: _scaleAnimation.value,\r\n                    child: FadeTransition(\r\n                      opacity: _fadeAnimation,\r\n                      child: Container(\r\n                        width: 35.w,\r\n                        height: 35.w,\r\n                        decoration: BoxDecoration(\r\n                          color: Colors.white,\r\n                          borderRadius: BorderRadius.circular(20.0),\r\n                          boxShadow: [\r\n                            BoxShadow(\r\n                              color: Colors.black.withOpacity(0.2),\r\n                              blurRadius: 20.0,\r\n                              offset: const Offset(0, 10),\r\n                            ),\r\n                          ],\r\n                        ),\r\n                        child: Column(\r\n                          mainAxisAlignment: MainAxisAlignment.center,\r\n                          children: [\r\n                            CustomIconWidget(\r\n                              iconName: 'school',\r\n                              color: AppTheme.lightTheme.colorScheme.primary,\r\n                              size: 15.w,\r\n                            ),\r\n                            SizedBox(height: 1.h),\r\n                            Text(\r\n                              'UniConnect',\r\n                              style: AppTheme.lightTheme.textTheme.titleLarge\r\n                                  ?.copyWith(\r\n                                color: AppTheme.lightTheme.colorScheme.primary,\r\n                                fontWeight: FontWeight.bold,\r\n                                fontSize: 16.sp,\r\n                              ),\r\n                            ),\r\n                          ],\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  );\r\n                },\r\n              ),\r\n\r\n              SizedBox(height: 8.h),\r\n\r\n              // App Title and Tagline\r\n              FadeTransition(\r\n                opacity: _fadeAnimation,\r\n                child: Column(\r\n                  children: [\r\n                    Text(\r\n                      'UniConnect',\r\n                      style:\r\n                          AppTheme.lightTheme.textTheme.headlineLarge?.copyWith(\r\n                        color: Colors.white,\r\n                        fontWeight: FontWeight.bold,\r\n                        fontSize: 24.sp,\r\n                        letterSpacing: 1.2,\r\n                      ),\r\n                    ),\r\n                    SizedBox(height: 1.h),\r\n                    Text(\r\n                      'Tu comunidad universitaria conectada',\r\n                      style: AppTheme.lightTheme.textTheme.bodyLarge?.copyWith(\r\n                        color: Colors.white.withOpacity(0.9),\r\n                        fontSize: 14.sp,\r\n                        letterSpacing: 0.5,\r\n                      ),\r\n                      textAlign: TextAlign.center,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n\r\n              const Spacer(flex: 2),\r\n\r\n              // Loading Section\r\n              AnimatedBuilder(\r\n                animation: _animationController,\r\n                builder: (context, child) {\r\n                  return FadeTransition(\r\n                    opacity: _fadeAnimation,\r\n                    child: Column(\r\n                      children: [\r\n                        // Loading Indicator\r\n                        _isInitializing\r\n                            ? SizedBox(\r\n                                width: 8.w,\r\n                                height: 8.w,\r\n                                child: CircularProgressIndicator(\r\n                                  strokeWidth: 3.0,\r\n                                  valueColor: AlwaysStoppedAnimation<Color>(\r\n                                    Colors.white.withOpacity(0.9),\r\n                                  ),\r\n                                ),\r\n                              )\r\n                            : CustomIconWidget(\r\n                                iconName: 'check_circle',\r\n                                color: Colors.white,\r\n                                size: 8.w,\r\n                              ),\r\n\r\n                        SizedBox(height: 2.h),\r\n\r\n                        // Status Message\r\n                        Container(\r\n                          constraints: BoxConstraints(maxWidth: 80.w),\r\n                          child: Text(\r\n                            _statusMessage,\r\n                            style: AppTheme.lightTheme.textTheme.bodyMedium\r\n                                ?.copyWith(\r\n                              color: Colors.white.withOpacity(0.8),\r\n                              fontSize: 12.sp,\r\n                              letterSpacing: 0.3,\r\n                            ),\r\n                            textAlign: TextAlign.center,\r\n                            maxLines: 2,\r\n                            overflow: TextOverflow.ellipsis,\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  );\r\n                },\r\n              ),\r\n\r\n              SizedBox(height: 6.h),\r\n\r\n              // University Branding\r\n              FadeTransition(\r\n                opacity: _fadeAnimation,\r\n                child: Container(\r\n                  padding: EdgeInsets.symmetric(horizontal: 8.w),\r\n                  child: Row(\r\n                    mainAxisAlignment: MainAxisAlignment.center,\r\n                    children: [\r\n                      CustomIconWidget(\r\n                        iconName: 'verified',\r\n                        color: Colors.white.withOpacity(0.7),\r\n                        size: 4.w,\r\n                      ),\r\n                      SizedBox(width: 2.w),\r\n                      Flexible(\r\n                        child: Text(\r\n                          'Plataforma oficial universitaria',\r\n                          style:\r\n                              AppTheme.lightTheme.textTheme.bodySmall?.copyWith(\r\n                            color: Colors.white.withOpacity(0.7),\r\n                            fontSize: 10.sp,\r\n                            letterSpacing: 0.2,\r\n                          ),\r\n                          maxLines: 1,\r\n                          overflow: TextOverflow.ellipsis,\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
      }
    },
    "routes": {
      "app_routes.dart": "import 'package:flutter/material.dart';\r\nimport '../presentation/splash_screen/splash_screen.dart';\r\nimport '../presentation/create_post_screen/create_post_screen.dart';\r\nimport '../presentation/login_screen/login_screen.dart';\r\nimport '../presentation/main_feed_screen/main_feed_screen.dart';\r\nimport '../presentation/notifications_screen/notifications_screen.dart';\r\n\r\nclass AppRoutes {\r\n  // TODO: Add your routes here\r\n  static const String initial = '/';\r\n  static const String splash = '/splash-screen';\r\n  static const String createPost = '/create-post-screen';\r\n  static const String login = '/login-screen';\r\n  static const String mainFeed = '/main-feed-screen';\r\n  static const String notifications = '/notifications-screen';\r\n\r\n  static Map<String, WidgetBuilder> routes = {\r\n    initial: (context) => const SplashScreen(),\r\n    splash: (context) => const SplashScreen(),\r\n    createPost: (context) => const CreatePostScreen(),\r\n    login: (context) => const LoginScreen(),\r\n    mainFeed: (context) => const MainFeedScreen(),\r\n    notifications: (context) => const NotificationsScreen(),\r\n    // TODO: Add your other routes here\r\n  };\r\n}\r\n"
    },
    "services": {
      "auth_service.dart": "import '../models/user_profile.dart';\r\nimport '../services/supabase_service.dart';\r\n\r\nclass AuthService {\r\n  static AuthService? _instance;\r\n  static AuthService get instance => _instance ??= AuthService._();\r\n\r\n  AuthService._();\r\n\r\n  dynamic get _client => SupabaseService.instance.client;\r\n\r\n  // Get current user\r\n  dynamic get currentUser => _client.auth.currentUser;\r\n\r\n  // Get current session\r\n  dynamic get currentSession => _client.auth.currentSession;\r\n\r\n  // Check if user is authenticated\r\n  bool get isAuthenticated => currentUser != null;\r\n\r\n  // Sign up with email and password\r\n  Future<dynamic> signUp({\r\n    required String email,\r\n    required String password,\r\n    required String fullName,\r\n    UserRole role = UserRole.student,\r\n    String? department,\r\n    String? studentId,\r\n  }) async {\r\n    try {\r\n      final response = await _client.auth.signUp(\r\n        email: email,\r\n        password: password,\r\n        data: {\r\n          'full_name': fullName,\r\n          'role': role.name,\r\n          'department': department,\r\n          'student_id': studentId,\r\n        },\r\n      );\r\n      return response;\r\n    } catch (error) {\r\n      throw Exception('Sign-up failed: $error');\r\n    }\r\n  }\r\n\r\n  // Sign in with email and password\r\n  Future<dynamic> signIn({\r\n    required String email,\r\n    required String password,\r\n  }) async {\r\n    try {\r\n      final response = await _client.auth.signInWithPassword(\r\n        email: email,\r\n        password: password,\r\n      );\r\n      return response;\r\n    } catch (error) {\r\n      throw Exception('Sign-in failed: $error');\r\n    }\r\n  }\r\n\r\n  // Sign out\r\n  Future<void> signOut() async {\r\n    try {\r\n      await _client.auth.signOut();\r\n    } catch (error) {\r\n      throw Exception('Sign-out failed: $error');\r\n    }\r\n  }\r\n\r\n  // Get current user profile\r\n  Future<UserProfile?> getCurrentUserProfile() async {\r\n    try {\r\n      if (!isAuthenticated) return null;\r\n\r\n      final response = await _client\r\n          .from('user_profiles')\r\n          .select()\r\n          .eq('id', currentUser!.id)\r\n          .single();\r\n\r\n      return UserProfile.fromJson(response);\r\n    } catch (error) {\r\n      throw Exception('Failed to get user profile: $error');\r\n    }\r\n  }\r\n\r\n  // Update user profile\r\n  Future<UserProfile> updateUserProfile({\r\n    String? fullName,\r\n    String? department,\r\n    String? studentId,\r\n    String? profileImageUrl,\r\n  }) async {\r\n    try {\r\n      if (!isAuthenticated) {\r\n        throw Exception('User not authenticated');\r\n      }\r\n\r\n      final updateData = <String, dynamic>{\r\n        'updated_at': DateTime.now().toIso8601String(),\r\n      };\r\n\r\n      if (fullName != null) updateData['full_name'] = fullName;\r\n      if (department != null) updateData['department'] = department;\r\n      if (studentId != null) updateData['student_id'] = studentId;\r\n      if (profileImageUrl != null)\r\n        updateData['profile_image_url'] = profileImageUrl;\r\n\r\n      final response = await _client\r\n          .from('user_profiles')\r\n          .update(updateData)\r\n          .eq('id', currentUser!.id)\r\n          .select()\r\n          .single();\r\n\r\n      return UserProfile.fromJson(response);\r\n    } catch (error) {\r\n      throw Exception('Failed to update profile: $error');\r\n    }\r\n  }\r\n\r\n  // Reset password\r\n  Future<void> resetPassword(String email) async {\r\n    try {\r\n      await _client.auth.resetPasswordForEmail(email);\r\n    } catch (error) {\r\n      throw Exception('Password reset failed: $error');\r\n    }\r\n  }\r\n\r\n  // Listen to auth state changes\r\n  Stream<dynamic> get authStateChanges => _client.auth.onAuthStateChange;\r\n\r\n  // Check if current user is admin\r\n  Future<bool> isCurrentUserAdmin() async {\r\n    try {\r\n      final profile = await getCurrentUserProfile();\r\n      return profile?.isAdmin ?? false;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}",
      "posts_service.dart": "import '../models/post.dart';\r\nimport '../models/post_category.dart';\r\nimport '../services/supabase_service.dart';\r\nimport '../services/auth_service.dart';\r\n\r\nclass PostsService {\r\n  // Buscar posts por texto en título o contenido\r\n  Future<List<Post>> searchPosts(String query, {int limit = 50}) async {\r\n    try {\r\n      final userId = AuthService.instance.currentUser?.id;\r\n      final response = await _client\r\n          .from('posts')\r\n          .select('*, user_profiles!author_id(full_name)')\r\n          .or('title.ilike.%$query%,content.ilike.%$query%')\r\n          .eq('status', 'active')\r\n          .order('created_at', ascending: false)\r\n          .limit(limit);\r\n\r\n      Set<String> likedPostIds = {};\r\n      if (userId != null) {\r\n        final likesResponse = await _client\r\n            .from('post_likes')\r\n            .select('post_id')\r\n            .eq('user_id', userId);\r\n        likedPostIds = (likesResponse as List)\r\n            .map((like) => like['post_id'] as String)\r\n            .toSet();\r\n      }\r\n\r\n      return (response as List).map<Post>((json) {\r\n        final post = Post.fromJson(json);\r\n        final authorName = json['user_profiles']?['full_name'] as String?;\r\n        return post.copyWith(\r\n          authorName: authorName,\r\n          isLikedByCurrentUser: likedPostIds.contains(post.id),\r\n        );\r\n      }).toList();\r\n    } catch (error) {\r\n      throw Exception('Failed to search posts: $error');\r\n    }\r\n  }\r\n\r\n  static PostsService? _instance;\r\n  static PostsService get instance => _instance ??= PostsService._();\r\n\r\n  PostsService._();\r\n\r\n  dynamic get _client => SupabaseService.instance.client;\r\n\r\n  // Get all active posts with author information\r\n  Future<List<Post>> getAllPosts({int limit = 50, int offset = 0}) async {\r\n    try {\r\n      final userId = AuthService.instance.currentUser?.id;\r\n      final response = await _client\r\n          .from('posts')\r\n          .select('*, user_profiles!author_id(full_name)')\r\n          .eq('status', 'active')\r\n          .order('created_at', ascending: false)\r\n          .range(offset, offset + limit - 1);\r\n\r\n      Set<String> likedPostIds = {};\r\n      if (userId != null) {\r\n        final likesResponse = await _client\r\n            .from('post_likes')\r\n            .select('post_id')\r\n            .eq('user_id', userId);\r\n        likedPostIds = (likesResponse as List)\r\n            .map((like) => like['post_id'] as String)\r\n            .toSet();\r\n      }\r\n\r\n      return (response as List).map<Post>((json) {\r\n        final post = Post.fromJson(json);\r\n        final authorName = json['user_profiles']?['full_name'] as String?;\r\n        return post.copyWith(\r\n          authorName: authorName,\r\n          isLikedByCurrentUser: likedPostIds.contains(post.id),\r\n        );\r\n      }).toList();\r\n    } catch (error) {\r\n      throw Exception('Failed to fetch posts: $error');\r\n    }\r\n  }\r\n\r\n  Future<List<Post>> getFeaturedPosts({int limit = 10}) async {\r\n    try {\r\n      final userId = AuthService.instance.currentUser?.id;\r\n      final response = await _client\r\n          .from('posts')\r\n          .select('*, user_profiles!author_id(full_name)')\r\n          .eq('status', 'active')\r\n          .eq('is_featured', true)\r\n          .order('created_at', ascending: false)\r\n          .limit(limit);\r\n\r\n      Set<String> likedPostIds = {};\r\n      if (userId != null) {\r\n        final likesResponse = await _client\r\n            .from('post_likes')\r\n            .select('post_id')\r\n            .eq('user_id', userId);\r\n        likedPostIds = (likesResponse as List)\r\n            .map((like) => like['post_id'] as String)\r\n            .toSet();\r\n      }\r\n\r\n      return (response as List).map<Post>((json) {\r\n        final post = Post.fromJson(json);\r\n        final authorName = json['user_profiles']?['full_name'] as String?;\r\n        return post.copyWith(\r\n          authorName: authorName,\r\n          isLikedByCurrentUser: likedPostIds.contains(post.id),\r\n        );\r\n      }).toList();\r\n    } catch (error) {\r\n      throw Exception('Failed to fetch featured posts: $error');\r\n    }\r\n  }\r\n\r\n  Future<List<Post>> getPostsByCategory(String categoryId,\r\n      {int limit = 50}) async {\r\n    try {\r\n      final userId = AuthService.instance.currentUser?.id;\r\n      final response = await _client\r\n          .from('posts')\r\n          .select(\r\n              '*, user_profiles!author_id(full_name), post_category_assignments!inner(category_id)')\r\n          .eq('status', 'active')\r\n          .eq('post_category_assignments.category_id', categoryId)\r\n          .order('created_at', ascending: false)\r\n          .limit(limit);\r\n\r\n      Set<String> likedPostIds = {};\r\n      if (userId != null) {\r\n        final likesResponse = await _client\r\n            .from('post_likes')\r\n            .select('post_id')\r\n            .eq('user_id', userId);\r\n        likedPostIds = (likesResponse as List)\r\n            .map((like) => like['post_id'] as String)\r\n            .toSet();\r\n      }\r\n\r\n      return (response as List).map<Post>((json) {\r\n        final post = Post.fromJson(json);\r\n        final authorName = json['user_profiles']?['full_name'] as String?;\r\n        return post.copyWith(\r\n          authorName: authorName,\r\n          isLikedByCurrentUser: likedPostIds.contains(post.id),\r\n        );\r\n      }).toList();\r\n    } catch (error) {\r\n      throw Exception('Failed to fetch posts by category: $error');\r\n    }\r\n  }\r\n\r\n  // Create new post (admin only)\r\n  Future<Post> createPost({\r\n    required String title,\r\n    required String content,\r\n    String? imageUrl,\r\n    bool isFeatured = false,\r\n    List<String>? categoryIds,\r\n  }) async {\r\n    try {\r\n      final currentUser = AuthService.instance.currentUser;\r\n      if (currentUser == null) {\r\n        throw Exception('User not authenticated');\r\n      }\r\n\r\n      // Check if user is admin\r\n      final isAdmin = await AuthService.instance.isCurrentUserAdmin();\r\n      if (!isAdmin) {\r\n        throw Exception('Only administrators can create posts');\r\n      }\r\n\r\n      final postData = {\r\n        'author_id': currentUser.id,\r\n        'title': title,\r\n        'content': content,\r\n        'image_url': imageUrl,\r\n        'is_featured': isFeatured,\r\n        'status': 'active',\r\n        'created_at': DateTime.now().toIso8601String(),\r\n        'updated_at': DateTime.now().toIso8601String(),\r\n      };\r\n\r\n      final response =\r\n          await _client.from('posts').insert(postData).select().single();\r\n\r\n      final post = Post.fromJson(response);\r\n\r\n      // Add category associations if provided\r\n      if (categoryIds != null && categoryIds.isNotEmpty) {\r\n        await _assignCategoriesToPost(post.id, categoryIds);\r\n      }\r\n\r\n      return post;\r\n    } catch (error) {\r\n      throw Exception('Failed to create post: $error');\r\n    }\r\n  }\r\n\r\n  // Update post (admin only)\r\n  Future<Post> updatePost(\r\n    String postId, {\r\n    String? title,\r\n    String? content,\r\n    String? imageUrl,\r\n    bool? isFeatured,\r\n    PostStatus? status,\r\n    List<String>? categoryIds,\r\n  }) async {\r\n    try {\r\n      // Check if user is admin\r\n      final isAdmin = await AuthService.instance.isCurrentUserAdmin();\r\n      if (!isAdmin) {\r\n        throw Exception('Only administrators can update posts');\r\n      }\r\n\r\n      final updateData = <String, dynamic>{\r\n        'updated_at': DateTime.now().toIso8601String(),\r\n      };\r\n\r\n      if (title != null) updateData['title'] = title;\r\n      if (content != null) updateData['content'] = content;\r\n      if (imageUrl != null) updateData['image_url'] = imageUrl;\r\n      if (isFeatured != null) updateData['is_featured'] = isFeatured;\r\n      if (status != null) updateData['status'] = status.name;\r\n\r\n      final response = await _client\r\n          .from('posts')\r\n          .update(updateData)\r\n          .eq('id', postId)\r\n          .select()\r\n          .single();\r\n\r\n      // Update category associations if provided\r\n      if (categoryIds != null) {\r\n        await _updatePostCategories(postId, categoryIds);\r\n      }\r\n\r\n      return Post.fromJson(response);\r\n    } catch (error) {\r\n      throw Exception('Failed to update post: $error');\r\n    }\r\n  }\r\n\r\n  // Delete post (admin only)\r\n  Future<void> deletePost(String postId) async {\r\n    try {\r\n      // Check if user is admin\r\n      final isAdmin = await AuthService.instance.isCurrentUserAdmin();\r\n      if (!isAdmin) {\r\n        throw Exception('Only administrators can delete posts');\r\n      }\r\n\r\n      await _client.from('posts').delete().eq('id', postId);\r\n    } catch (error) {\r\n      throw Exception('Failed to delete post: $error');\r\n    }\r\n  }\r\n\r\n  // Like/unlike post\r\n  Future<void> toggleLike(String postId) async {\r\n    try {\r\n      final currentUser = AuthService.instance.currentUser;\r\n      if (currentUser == null) {\r\n        throw Exception('User not authenticated');\r\n      }\r\n\r\n      // Check if already liked\r\n      final existingLike = await _client\r\n          .from('post_likes')\r\n          .select()\r\n          .eq('post_id', postId)\r\n          .eq('user_id', currentUser.id)\r\n          .maybeSingle();\r\n\r\n      if (existingLike != null) {\r\n        // Unlike\r\n        await _client\r\n            .from('post_likes')\r\n            .delete()\r\n            .eq('post_id', postId)\r\n            .eq('user_id', currentUser.id);\r\n      } else {\r\n        // Like\r\n        await _client.from('post_likes').insert({\r\n          'post_id': postId,\r\n          'user_id': currentUser.id,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      throw Exception('Failed to toggle like: $error');\r\n    }\r\n  }\r\n\r\n  // Get categories\r\n  Future<List<PostCategory>> getCategories() async {\r\n    try {\r\n      final response = await _client\r\n          .from('post_categories')\r\n          .select()\r\n          .order('is_system_category', ascending: false)\r\n          .order('name', ascending: true);\r\n\r\n      return response\r\n          .map<PostCategory>((json) => PostCategory.fromJson(json))\r\n          .toList();\r\n    } catch (error) {\r\n      throw Exception('Failed to fetch categories: $error');\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n  Future<void> _assignCategoriesToPost(\r\n      String postId, List<String> categoryIds) async {\r\n    final assignments = categoryIds\r\n        .map((categoryId) => {\r\n              'post_id': postId,\r\n              'category_id': categoryId,\r\n            })\r\n        .toList();\r\n\r\n    await _client.from('post_category_assignments').insert(assignments);\r\n  }\r\n\r\n  Future<void> _updatePostCategories(\r\n      String postId, List<String> categoryIds) async {\r\n    // Delete existing assignments\r\n    await _client\r\n        .from('post_category_assignments')\r\n        .delete()\r\n        .eq('post_id', postId);\r\n\r\n    // Add new assignments\r\n    if (categoryIds.isNotEmpty) {\r\n      await _assignCategoriesToPost(postId, categoryIds);\r\n    }\r\n  }\r\n\r\n  // Real-time subscription for posts\r\n  dynamic subscribeToPostChanges({\r\n    required Function(List<Post>) onPostsChanged,\r\n  }) {\r\n    return _client\r\n        .channel('posts_changes')\r\n        .onPostgresChanges(\r\n          event: 'all',\r\n          schema: 'public',\r\n          table: 'posts',\r\n          callback: (payload) async {\r\n            // Refresh posts when changes occur\r\n            try {\r\n              final posts = await getAllPosts();\r\n              onPostsChanged(posts);\r\n            } catch (error) {\r\n              print('Error refreshing posts: $error');\r\n            }\r\n          },\r\n        )\r\n        .subscribe();\r\n  }\r\n}\r\n",
      "supabase_service.dart": "import 'package:supabase_flutter/supabase_flutter.dart';\r\n\r\nclass SupabaseService {\r\n  static SupabaseService? _instance;\r\n  static SupabaseService get instance => _instance ??= SupabaseService._();\r\n\r\n  SupabaseService._();\r\n\r\n  static const String supabaseUrl =\r\n      String.fromEnvironment('SUPABASE_URL', defaultValue: '');\r\n  static const String supabaseAnonKey =\r\n      String.fromEnvironment('SUPABASE_ANON_KEY', defaultValue: '');\r\n\r\n  // Initialize Supabase - call this in main()\r\n  static Future<void> initialize() async {\r\n    if (supabaseUrl.isEmpty || supabaseAnonKey.isEmpty) {\r\n      throw Exception(\r\n          'ERROR: Las variables de entorno SUPABASE_URL y SUPABASE_ANON_KEY no están definidas.\\n\\n'\r\n          'Debes iniciar la app usando:\\n'\r\n          'flutter run --dart-define=SUPABASE_URL=TU_URL --dart-define=SUPABASE_ANON_KEY=TU_ANON_KEY\\n\\n'\r\n          'Reemplaza TU_URL y TU_ANON_KEY por los valores reales de tu proyecto Supabase.');\r\n    }\r\n\r\n    await Supabase.initialize(\r\n      url: supabaseUrl,\r\n      anonKey: supabaseAnonKey,\r\n    );\r\n  }\r\n\r\n  // Get Supabase client\r\n  SupabaseClient get client => Supabase.instance.client;\r\n}\r\n"
    },
    "theme": {
      "app_theme.dart": "import 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\n\r\n/// A class that contains all theme configurations for the university social networking application.\r\n/// Implements Contemporary Academic Minimalism with Warm Academic Neutrals color palette.\r\nclass AppTheme {\r\n  AppTheme._();\r\n\r\n  // Warm Academic Neutrals Color Palette\r\n  static const Color primaryLight =\r\n      Color(0xFF2B5CE6); // University blue optimized for mobile contrast ratios\r\n  static const Color secondaryLight =\r\n      Color(0xFF6B7280); // Neutral gray for supporting text and inactive states\r\n  static const Color surfaceLight =\r\n      Color(0xFFFFFFFF); // Pure white for content backgrounds\r\n  static const Color backgroundLight =\r\n      Color(0xFFF9FAFB); // Subtle warm gray for app background\r\n  static const Color successLight =\r\n      Color(0xFF10B981); // Green for positive actions and confirmations\r\n  static const Color warningLight =\r\n      Color(0xF59E0B); // Amber for important notifications\r\n  static const Color errorLight =\r\n      Color(0xFFEF4444); // Red for critical alerts and validation errors\r\n  static const Color textPrimaryLight =\r\n      Color(0xFF111827); // Near-black for primary content\r\n  static const Color textSecondaryLight =\r\n      Color(0xFF6B7280); // Medium gray for supporting information\r\n  static const Color accentLight = Color(\r\n      0xFF8B5CF6); // Purple for special highlights and engagement elements\r\n\r\n  // Dark theme variations maintaining the same design principles\r\n  static const Color primaryDark =\r\n      Color(0xFF4F7BF7); // Lighter blue for dark backgrounds\r\n  static const Color secondaryDark =\r\n      Color(0xFF9CA3AF); // Lighter gray for dark theme\r\n  static const Color surfaceDark =\r\n      Color(0xFF1F2937); // Dark surface maintaining readability\r\n  static const Color backgroundDark = Color(0xFF111827); // Deep dark background\r\n  static const Color successDark =\r\n      Color(0xFF34D399); // Lighter green for dark theme\r\n  static const Color warningDark =\r\n      Color(0xFFFBBF24); // Lighter amber for dark theme\r\n  static const Color errorDark =\r\n      Color(0xFFF87171); // Lighter red for dark theme\r\n  static const Color textPrimaryDark =\r\n      Color(0xFFF9FAFB); // Near-white for primary content\r\n  static const Color textSecondaryDark =\r\n      Color(0xFF9CA3AF); // Medium gray for supporting information\r\n  static const Color accentDark =\r\n      Color(0xFFA78BFA); // Lighter purple for dark theme\r\n\r\n  // Border and divider colors\r\n  static const Color borderLight = Color(0xFFE5E7EB); // Minimal 1px borders\r\n  static const Color borderDark = Color(0xFF374151);\r\n  static const Color dividerLight = Color(0xFFE5E7EB);\r\n  static const Color dividerDark = Color(0xFF374151);\r\n\r\n  // Shadow colors for subtle elevation system\r\n  static const Color shadowLight =\r\n      Color(0x1A000000); // 0.1 opacity gray shadows\r\n  static const Color shadowDark = Color(0x1AFFFFFF);\r\n\r\n  /// Light theme implementing Contemporary Academic Minimalism\r\n  static ThemeData lightTheme = ThemeData(\r\n    brightness: Brightness.light,\r\n    colorScheme: ColorScheme(\r\n      brightness: Brightness.light,\r\n      primary: primaryLight,\r\n      onPrimary: surfaceLight,\r\n      primaryContainer: primaryLight.withAlpha(26),\r\n      onPrimaryContainer: primaryLight,\r\n      secondary: secondaryLight,\r\n      onSecondary: surfaceLight,\r\n      secondaryContainer: secondaryLight.withAlpha(26),\r\n      onSecondaryContainer: secondaryLight,\r\n      tertiary: accentLight,\r\n      onTertiary: surfaceLight,\r\n      tertiaryContainer: accentLight.withAlpha(26),\r\n      onTertiaryContainer: accentLight,\r\n      error: errorLight,\r\n      onError: surfaceLight,\r\n      surface: surfaceLight,\r\n      onSurface: textPrimaryLight,\r\n      onSurfaceVariant: textSecondaryLight,\r\n      outline: borderLight,\r\n      outlineVariant: dividerLight,\r\n      shadow: shadowLight,\r\n      scrim: shadowLight,\r\n      inverseSurface: surfaceDark,\r\n      onInverseSurface: textPrimaryDark,\r\n      inversePrimary: primaryDark,\r\n    ),\r\n    scaffoldBackgroundColor: backgroundLight,\r\n    cardColor: surfaceLight,\r\n    dividerColor: dividerLight,\r\n\r\n    // AppBar theme for university branding\r\n    appBarTheme: AppBarTheme(\r\n      backgroundColor: surfaceLight,\r\n      foregroundColor: textPrimaryLight,\r\n      elevation: 1.0, // Subtle elevation for content hierarchy\r\n      shadowColor: shadowLight,\r\n      titleTextStyle: GoogleFonts.inter(\r\n        fontSize: 20,\r\n        fontWeight: FontWeight.w600,\r\n        color: textPrimaryLight,\r\n        letterSpacing: 0.15,\r\n      ),\r\n      iconTheme: IconThemeData(color: textPrimaryLight),\r\n      actionsIconTheme: IconThemeData(color: textPrimaryLight),\r\n    ),\r\n\r\n    // Card theme with restrained shadow values\r\n    cardTheme: CardThemeData(\r\n      color: surfaceLight,\r\n      elevation: 2.0, // Material elevation responding to content importance\r\n      shadowColor: shadowLight,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(12.0),\r\n      ),\r\n      margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),\r\n    ),\r\n\r\n    // Bottom navigation for main app navigation\r\n    bottomNavigationBarTheme: BottomNavigationBarThemeData(\r\n      backgroundColor: surfaceLight,\r\n      selectedItemColor: primaryLight,\r\n      unselectedItemColor: textSecondaryLight,\r\n      elevation: 4.0,\r\n      type: BottomNavigationBarType.fixed,\r\n      selectedLabelStyle: GoogleFonts.inter(\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w500,\r\n      ),\r\n      unselectedLabelStyle: GoogleFonts.inter(\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n    ),\r\n\r\n    // FloatingActionButton with contextual behavior\r\n    floatingActionButtonTheme: FloatingActionButtonThemeData(\r\n      backgroundColor: primaryLight,\r\n      foregroundColor: surfaceLight,\r\n      elevation: 4.0,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(16.0),\r\n      ),\r\n    ),\r\n\r\n    // Button themes maintaining university credibility\r\n    elevatedButtonTheme: ElevatedButtonThemeData(\r\n      style: ElevatedButton.styleFrom(\r\n        foregroundColor: surfaceLight,\r\n        backgroundColor: primaryLight,\r\n        elevation: 2.0,\r\n        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(8.0),\r\n        ),\r\n        textStyle: GoogleFonts.inter(\r\n          fontSize: 14,\r\n          fontWeight: FontWeight.w500,\r\n          letterSpacing: 0.1,\r\n        ),\r\n      ),\r\n    ),\r\n\r\n    outlinedButtonTheme: OutlinedButtonThemeData(\r\n      style: OutlinedButton.styleFrom(\r\n        foregroundColor: primaryLight,\r\n        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\r\n        side: BorderSide(color: borderLight),\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(8.0),\r\n        ),\r\n        textStyle: GoogleFonts.inter(\r\n          fontSize: 14,\r\n          fontWeight: FontWeight.w500,\r\n          letterSpacing: 0.1,\r\n        ),\r\n      ),\r\n    ),\r\n\r\n    textButtonTheme: TextButtonThemeData(\r\n      style: TextButton.styleFrom(\r\n        foregroundColor: primaryLight,\r\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(8.0),\r\n        ),\r\n        textStyle: GoogleFonts.inter(\r\n          fontSize: 14,\r\n          fontWeight: FontWeight.w500,\r\n          letterSpacing: 0.1,\r\n        ),\r\n      ),\r\n    ),\r\n\r\n    // Typography implementing Inter font family\r\n    textTheme: _buildTextTheme(isLight: true),\r\n\r\n    // Input decoration for form clarity\r\n    inputDecorationTheme: InputDecorationTheme(\r\n      fillColor: surfaceLight,\r\n      filled: true,\r\n      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\r\n      border: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: borderLight),\r\n      ),\r\n      enabledBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: borderLight),\r\n      ),\r\n      focusedBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: primaryLight, width: 2.0),\r\n      ),\r\n      errorBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: errorLight),\r\n      ),\r\n      focusedErrorBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: errorLight, width: 2.0),\r\n      ),\r\n      labelStyle: GoogleFonts.inter(\r\n        color: textSecondaryLight,\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n      hintStyle: GoogleFonts.inter(\r\n        color: textSecondaryLight.withAlpha(153),\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n      errorStyle: GoogleFonts.inter(\r\n        color: errorLight,\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n    ),\r\n\r\n    // Interactive elements\r\n    switchTheme: SwitchThemeData(\r\n      thumbColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryLight;\r\n        }\r\n        return textSecondaryLight;\r\n      }),\r\n      trackColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryLight.withAlpha(77);\r\n        }\r\n        return textSecondaryLight.withAlpha(77);\r\n      }),\r\n    ),\r\n\r\n    checkboxTheme: CheckboxThemeData(\r\n      fillColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryLight;\r\n        }\r\n        return Colors.transparent;\r\n      }),\r\n      checkColor: WidgetStateProperty.all(surfaceLight),\r\n      side: BorderSide(color: borderLight),\r\n    ),\r\n\r\n    radioTheme: RadioThemeData(\r\n      fillColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryLight;\r\n        }\r\n        return textSecondaryLight;\r\n      }),\r\n    ),\r\n\r\n    progressIndicatorTheme: ProgressIndicatorThemeData(\r\n      color: primaryLight,\r\n      linearTrackColor: primaryLight.withAlpha(51),\r\n      circularTrackColor: primaryLight.withAlpha(51),\r\n    ),\r\n\r\n    sliderTheme: SliderThemeData(\r\n      activeTrackColor: primaryLight,\r\n      thumbColor: primaryLight,\r\n      overlayColor: primaryLight.withAlpha(51),\r\n      inactiveTrackColor: textSecondaryLight.withAlpha(77),\r\n    ),\r\n\r\n    // Tab bar theme for content organization\r\n    tabBarTheme: TabBarThemeData(\r\n      labelColor: primaryLight,\r\n      unselectedLabelColor: textSecondaryLight,\r\n      indicatorColor: primaryLight,\r\n      indicatorSize: TabBarIndicatorSize.label,\r\n      labelStyle: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w600,\r\n        letterSpacing: 0.1,\r\n      ),\r\n      unselectedLabelStyle: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n        letterSpacing: 0.1,\r\n      ),\r\n    ),\r\n\r\n    tooltipTheme: TooltipThemeData(\r\n      decoration: BoxDecoration(\r\n        color: textPrimaryLight.withAlpha(230),\r\n        borderRadius: BorderRadius.circular(8),\r\n      ),\r\n      textStyle: GoogleFonts.inter(\r\n        color: surfaceLight,\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n    ),\r\n\r\n    snackBarTheme: SnackBarThemeData(\r\n      backgroundColor: textPrimaryLight,\r\n      contentTextStyle: GoogleFonts.inter(\r\n        color: surfaceLight,\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n      actionTextColor: accentLight,\r\n      behavior: SnackBarBehavior.floating,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n      ),\r\n    ), dialogTheme: DialogThemeData(backgroundColor: surfaceLight),\r\n  );\r\n\r\n  /// Dark theme maintaining the same design principles\r\n  static ThemeData darkTheme = ThemeData(\r\n    brightness: Brightness.dark,\r\n    colorScheme: ColorScheme(\r\n      brightness: Brightness.dark,\r\n      primary: primaryDark,\r\n      onPrimary: surfaceDark,\r\n      primaryContainer: primaryDark.withAlpha(51),\r\n      onPrimaryContainer: primaryDark,\r\n      secondary: secondaryDark,\r\n      onSecondary: surfaceDark,\r\n      secondaryContainer: secondaryDark.withAlpha(51),\r\n      onSecondaryContainer: secondaryDark,\r\n      tertiary: accentDark,\r\n      onTertiary: surfaceDark,\r\n      tertiaryContainer: accentDark.withAlpha(51),\r\n      onTertiaryContainer: accentDark,\r\n      error: errorDark,\r\n      onError: surfaceDark,\r\n      surface: surfaceDark,\r\n      onSurface: textPrimaryDark,\r\n      onSurfaceVariant: textSecondaryDark,\r\n      outline: borderDark,\r\n      outlineVariant: dividerDark,\r\n      shadow: shadowDark,\r\n      scrim: shadowDark,\r\n      inverseSurface: surfaceLight,\r\n      onInverseSurface: textPrimaryLight,\r\n      inversePrimary: primaryLight,\r\n    ),\r\n    scaffoldBackgroundColor: backgroundDark,\r\n    cardColor: surfaceDark,\r\n    dividerColor: dividerDark,\r\n    appBarTheme: AppBarTheme(\r\n      backgroundColor: surfaceDark,\r\n      foregroundColor: textPrimaryDark,\r\n      elevation: 1.0,\r\n      shadowColor: shadowDark,\r\n      titleTextStyle: GoogleFonts.inter(\r\n        fontSize: 20,\r\n        fontWeight: FontWeight.w600,\r\n        color: textPrimaryDark,\r\n        letterSpacing: 0.15,\r\n      ),\r\n      iconTheme: IconThemeData(color: textPrimaryDark),\r\n      actionsIconTheme: IconThemeData(color: textPrimaryDark),\r\n    ),\r\n    cardTheme: CardThemeData(\r\n      color: surfaceDark,\r\n      elevation: 2.0,\r\n      shadowColor: shadowDark,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(12.0),\r\n      ),\r\n      margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),\r\n    ),\r\n    bottomNavigationBarTheme: BottomNavigationBarThemeData(\r\n      backgroundColor: surfaceDark,\r\n      selectedItemColor: primaryDark,\r\n      unselectedItemColor: textSecondaryDark,\r\n      elevation: 4.0,\r\n      type: BottomNavigationBarType.fixed,\r\n      selectedLabelStyle: GoogleFonts.inter(\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w500,\r\n      ),\r\n      unselectedLabelStyle: GoogleFonts.inter(\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n    ),\r\n    floatingActionButtonTheme: FloatingActionButtonThemeData(\r\n      backgroundColor: primaryDark,\r\n      foregroundColor: surfaceDark,\r\n      elevation: 4.0,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(16.0),\r\n      ),\r\n    ),\r\n    elevatedButtonTheme: ElevatedButtonThemeData(\r\n      style: ElevatedButton.styleFrom(\r\n        foregroundColor: surfaceDark,\r\n        backgroundColor: primaryDark,\r\n        elevation: 2.0,\r\n        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(8.0),\r\n        ),\r\n        textStyle: GoogleFonts.inter(\r\n          fontSize: 14,\r\n          fontWeight: FontWeight.w500,\r\n          letterSpacing: 0.1,\r\n        ),\r\n      ),\r\n    ),\r\n    outlinedButtonTheme: OutlinedButtonThemeData(\r\n      style: OutlinedButton.styleFrom(\r\n        foregroundColor: primaryDark,\r\n        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\r\n        side: BorderSide(color: borderDark),\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(8.0),\r\n        ),\r\n        textStyle: GoogleFonts.inter(\r\n          fontSize: 14,\r\n          fontWeight: FontWeight.w500,\r\n          letterSpacing: 0.1,\r\n        ),\r\n      ),\r\n    ),\r\n    textButtonTheme: TextButtonThemeData(\r\n      style: TextButton.styleFrom(\r\n        foregroundColor: primaryDark,\r\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(8.0),\r\n        ),\r\n        textStyle: GoogleFonts.inter(\r\n          fontSize: 14,\r\n          fontWeight: FontWeight.w500,\r\n          letterSpacing: 0.1,\r\n        ),\r\n      ),\r\n    ),\r\n    textTheme: _buildTextTheme(isLight: false),\r\n    inputDecorationTheme: InputDecorationTheme(\r\n      fillColor: surfaceDark,\r\n      filled: true,\r\n      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\r\n      border: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: borderDark),\r\n      ),\r\n      enabledBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: borderDark),\r\n      ),\r\n      focusedBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: primaryDark, width: 2.0),\r\n      ),\r\n      errorBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: errorDark),\r\n      ),\r\n      focusedErrorBorder: OutlineInputBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n        borderSide: BorderSide(color: errorDark, width: 2.0),\r\n      ),\r\n      labelStyle: GoogleFonts.inter(\r\n        color: textSecondaryDark,\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n      hintStyle: GoogleFonts.inter(\r\n        color: textSecondaryDark.withAlpha(153),\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n      errorStyle: GoogleFonts.inter(\r\n        color: errorDark,\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n    ),\r\n    switchTheme: SwitchThemeData(\r\n      thumbColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryDark;\r\n        }\r\n        return textSecondaryDark;\r\n      }),\r\n      trackColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryDark.withAlpha(77);\r\n        }\r\n        return textSecondaryDark.withAlpha(77);\r\n      }),\r\n    ),\r\n    checkboxTheme: CheckboxThemeData(\r\n      fillColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryDark;\r\n        }\r\n        return Colors.transparent;\r\n      }),\r\n      checkColor: WidgetStateProperty.all(surfaceDark),\r\n      side: BorderSide(color: borderDark),\r\n    ),\r\n    radioTheme: RadioThemeData(\r\n      fillColor: WidgetStateProperty.resolveWith((states) {\r\n        if (states.contains(WidgetState.selected)) {\r\n          return primaryDark;\r\n        }\r\n        return textSecondaryDark;\r\n      }),\r\n    ),\r\n    progressIndicatorTheme: ProgressIndicatorThemeData(\r\n      color: primaryDark,\r\n      linearTrackColor: primaryDark.withAlpha(51),\r\n      circularTrackColor: primaryDark.withAlpha(51),\r\n    ),\r\n    sliderTheme: SliderThemeData(\r\n      activeTrackColor: primaryDark,\r\n      thumbColor: primaryDark,\r\n      overlayColor: primaryDark.withAlpha(51),\r\n      inactiveTrackColor: textSecondaryDark.withAlpha(77),\r\n    ),\r\n    tabBarTheme: TabBarThemeData(\r\n      labelColor: primaryDark,\r\n      unselectedLabelColor: textSecondaryDark,\r\n      indicatorColor: primaryDark,\r\n      indicatorSize: TabBarIndicatorSize.label,\r\n      labelStyle: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w600,\r\n        letterSpacing: 0.1,\r\n      ),\r\n      unselectedLabelStyle: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n        letterSpacing: 0.1,\r\n      ),\r\n    ),\r\n    tooltipTheme: TooltipThemeData(\r\n      decoration: BoxDecoration(\r\n        color: textPrimaryDark.withAlpha(230),\r\n        borderRadius: BorderRadius.circular(8),\r\n      ),\r\n      textStyle: GoogleFonts.inter(\r\n        color: surfaceDark,\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n    ),\r\n    snackBarTheme: SnackBarThemeData(\r\n      backgroundColor: textPrimaryDark,\r\n      contentTextStyle: GoogleFonts.inter(\r\n        color: surfaceDark,\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n      ),\r\n      actionTextColor: accentDark,\r\n      behavior: SnackBarBehavior.floating,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(8.0),\r\n      ),\r\n    ), dialogTheme: DialogThemeData(backgroundColor: surfaceDark),\r\n  );\r\n\r\n  /// Helper method to build text theme using Inter font family\r\n  static TextTheme _buildTextTheme({required bool isLight}) {\r\n    final Color textPrimary = isLight ? textPrimaryLight : textPrimaryDark;\r\n    final Color textSecondary =\r\n        isLight ? textSecondaryLight : textSecondaryDark;\r\n\r\n    return TextTheme(\r\n      // Display styles for large headings\r\n      displayLarge: GoogleFonts.inter(\r\n        fontSize: 57,\r\n        fontWeight: FontWeight.w700,\r\n        color: textPrimary,\r\n        letterSpacing: -0.25,\r\n        height: 1.12,\r\n      ),\r\n      displayMedium: GoogleFonts.inter(\r\n        fontSize: 45,\r\n        fontWeight: FontWeight.w700,\r\n        color: textPrimary,\r\n        letterSpacing: 0,\r\n        height: 1.16,\r\n      ),\r\n      displaySmall: GoogleFonts.inter(\r\n        fontSize: 36,\r\n        fontWeight: FontWeight.w600,\r\n        color: textPrimary,\r\n        letterSpacing: 0,\r\n        height: 1.22,\r\n      ),\r\n\r\n      // Headline styles for section headers\r\n      headlineLarge: GoogleFonts.inter(\r\n        fontSize: 32,\r\n        fontWeight: FontWeight.w600,\r\n        color: textPrimary,\r\n        letterSpacing: 0,\r\n        height: 1.25,\r\n      ),\r\n      headlineMedium: GoogleFonts.inter(\r\n        fontSize: 28,\r\n        fontWeight: FontWeight.w600,\r\n        color: textPrimary,\r\n        letterSpacing: 0,\r\n        height: 1.29,\r\n      ),\r\n      headlineSmall: GoogleFonts.inter(\r\n        fontSize: 24,\r\n        fontWeight: FontWeight.w600,\r\n        color: textPrimary,\r\n        letterSpacing: 0,\r\n        height: 1.33,\r\n      ),\r\n\r\n      // Title styles for cards and components\r\n      titleLarge: GoogleFonts.inter(\r\n        fontSize: 22,\r\n        fontWeight: FontWeight.w500,\r\n        color: textPrimary,\r\n        letterSpacing: 0,\r\n        height: 1.27,\r\n      ),\r\n      titleMedium: GoogleFonts.inter(\r\n        fontSize: 16,\r\n        fontWeight: FontWeight.w500,\r\n        color: textPrimary,\r\n        letterSpacing: 0.15,\r\n        height: 1.50,\r\n      ),\r\n      titleSmall: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w500,\r\n        color: textPrimary,\r\n        letterSpacing: 0.1,\r\n        height: 1.43,\r\n      ),\r\n\r\n      // Body styles for main content\r\n      bodyLarge: GoogleFonts.inter(\r\n        fontSize: 16,\r\n        fontWeight: FontWeight.w400,\r\n        color: textPrimary,\r\n        letterSpacing: 0.5,\r\n        height: 1.50,\r\n      ),\r\n      bodyMedium: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w400,\r\n        color: textPrimary,\r\n        letterSpacing: 0.25,\r\n        height: 1.43,\r\n      ),\r\n      bodySmall: GoogleFonts.inter(\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w400,\r\n        color: textSecondary,\r\n        letterSpacing: 0.4,\r\n        height: 1.33,\r\n      ),\r\n\r\n      // Label styles for buttons and small text\r\n      labelLarge: GoogleFonts.inter(\r\n        fontSize: 14,\r\n        fontWeight: FontWeight.w500,\r\n        color: textPrimary,\r\n        letterSpacing: 0.1,\r\n        height: 1.43,\r\n      ),\r\n      labelMedium: GoogleFonts.inter(\r\n        fontSize: 12,\r\n        fontWeight: FontWeight.w500,\r\n        color: textSecondary,\r\n        letterSpacing: 0.5,\r\n        height: 1.33,\r\n      ),\r\n      labelSmall: GoogleFonts.inter(\r\n        fontSize: 11,\r\n        fontWeight: FontWeight.w500,\r\n        color: textSecondary,\r\n        letterSpacing: 0.5,\r\n        height: 1.45,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /// Data typography using JetBrains Mono for timestamps and metrics\r\n  static TextStyle dataTextStyle({\r\n    required bool isLight,\r\n    double fontSize = 12,\r\n    FontWeight fontWeight = FontWeight.w400,\r\n  }) {\r\n    final Color textColor = isLight ? textSecondaryLight : textSecondaryDark;\r\n    return GoogleFonts.jetBrainsMono(\r\n      fontSize: fontSize,\r\n      fontWeight: fontWeight,\r\n      color: textColor,\r\n      letterSpacing: 0,\r\n      height: 1.33,\r\n    );\r\n  }\r\n}\r\n"
    },
    "widgets": {
      "app_snackbar.dart": "import 'package:flutter/material.dart';\r\n\r\n/// Muestra un SnackBar global para mensajes de éxito o error.\r\nvoid showAppSnackBar(BuildContext context, String message,\r\n    {bool error = false}) {\r\n  ScaffoldMessenger.of(context).showSnackBar(\r\n    SnackBar(\r\n      content: Text(message),\r\n      backgroundColor: error ? Colors.red : Colors.green,\r\n      behavior: SnackBarBehavior.floating,\r\n      duration: const Duration(seconds: 3),\r\n    ),\r\n  );\r\n}\r\n",
      "custom_error_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_svg/svg.dart';\r\n\r\nimport '../core/app_export.dart';\r\n\r\n// custom_error_widget.dart\r\n\r\nclass CustomErrorWidget extends StatelessWidget {\r\n  final FlutterErrorDetails? errorDetails;\r\n  final String? errorMessage;\r\n\r\n  const CustomErrorWidget({\r\n    Key? key,\r\n    this.errorDetails,\r\n    this.errorMessage,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: const Color(0xFFFAFAFA),\r\n      body: SafeArea(\r\n          child: Center(\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(24.0),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            crossAxisAlignment: CrossAxisAlignment.center,\r\n            children: [\r\n              SvgPicture.asset(\r\n                'assets/images/sad_face.svg',\r\n                height: 42,\r\n                width: 42,\r\n              ),\r\n              const SizedBox(height: 8),\r\n              Text(\r\n                \"Something went wrong\",\r\n                style: const TextStyle(\r\n                  fontSize: 24,\r\n                  fontWeight: FontWeight.w500,\r\n                  color: Color(0xFF262626),\r\n                ),\r\n              ),\r\n              const SizedBox(height: 4),\r\n              SizedBox(\r\n                child: const Text(\r\n                  'We encountered an unexpected error while processing your request.',\r\n                  textAlign: TextAlign.center,\r\n                  style: TextStyle(\r\n                    fontSize: 16,\r\n                    color: Color(0xFF525252), // neutral-600\r\n                  ),\r\n                ),\r\n              ),\r\n              const SizedBox(height: 24),\r\n              ElevatedButton.icon(\r\n                onPressed: () {\r\n                  bool canBeBack = Navigator.canPop(context);\r\n                  if (canBeBack) {\r\n                    Navigator.of(context).pop();\r\n                  } else {\r\n                    Navigator.pushNamed(context, AppRoutes.initial);\r\n                  }\r\n                },\r\n                icon:\r\n                    const Icon(Icons.arrow_back, size: 18, color: Colors.white),\r\n                label: const Text('Back'),\r\n                style: ElevatedButton.styleFrom(\r\n                  backgroundColor: AppTheme.lightTheme.primaryColor,\r\n                  foregroundColor: Colors.white,\r\n                  padding:\r\n                      const EdgeInsets.symmetric(horizontal: 16, vertical: 10),\r\n                  shape: RoundedRectangleBorder(\r\n                    borderRadius: BorderRadius.circular(8),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      )),\r\n    );\r\n  }\r\n}\r\n",
      "custom_icon_widget.dart": "import 'package:flutter/material.dart';\r\n\r\nclass CustomIconWidget extends StatelessWidget {\r\n  final String iconName;\r\n  final double size;\r\n  final Color? color;\r\n\r\n  const CustomIconWidget(\r\n      {Key? key, required this.iconName, this.size = 24, this.color})\r\n      : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // Map of available icons\r\n    final Map<String, IconData> iconMap = {\r\n      // A\r\n      'abc': Icons.abc,\r\n      'ac_unit': Icons.ac_unit,\r\n      'access_alarm': Icons.access_alarm,\r\n      'access_alarms': Icons.access_alarms,\r\n      'access_time': Icons.access_time,\r\n      'access_time_filled': Icons.access_time_filled,\r\n      'access_time_rounded': Icons.access_time_rounded,\r\n      'accessibility': Icons.accessibility,\r\n      'accessibility_new': Icons.accessibility_new,\r\n      'accessible': Icons.accessible,\r\n      'accessible_forward': Icons.accessible_forward,\r\n      'account_balance': Icons.account_balance,\r\n      'account_balance_wallet': Icons.account_balance_wallet,\r\n      'account_box': Icons.account_box,\r\n      'account_circle': Icons.account_circle,\r\n      'account_tree': Icons.account_tree,\r\n      'ad_units': Icons.ad_units,\r\n      'adb': Icons.adb,\r\n      'add': Icons.add,\r\n      'add_a_photo': Icons.add_a_photo,\r\n      'add_alarm': Icons.add_alarm,\r\n      'add_alert': Icons.add_alert,\r\n      'add_box': Icons.add_box,\r\n      'add_business': Icons.add_business,\r\n      'add_call': Icons.add_call,\r\n      'add_card': Icons.add_card,\r\n      'add_chart': Icons.add_chart,\r\n      'add_circle': Icons.add_circle,\r\n      'add_circle_outline': Icons.add_circle_outline,\r\n      'add_comment': Icons.add_comment,\r\n      'add_home': Icons.add_home,\r\n      'add_home_work': Icons.add_home_work,\r\n      'add_ic_call': Icons.add_ic_call,\r\n      'add_link': Icons.add_link,\r\n      'add_location': Icons.add_location,\r\n      'add_location_alt': Icons.add_location_alt,\r\n      'add_moderator': Icons.add_moderator,\r\n      'add_photo_alternate': Icons.add_photo_alternate,\r\n      'add_reaction': Icons.add_reaction,\r\n      'add_road': Icons.add_road,\r\n      'add_shopping_cart': Icons.add_shopping_cart,\r\n      'add_task': Icons.add_task,\r\n      'add_to_drive': Icons.add_to_drive,\r\n      'add_to_home_screen': Icons.add_to_home_screen,\r\n      'add_to_photos': Icons.add_to_photos,\r\n      'add_to_queue': Icons.add_to_queue,\r\n      'addchart': Icons.addchart,\r\n      'adjust': Icons.adjust,\r\n      'admin_panel_settings': Icons.admin_panel_settings,\r\n      'adobe': Icons.adobe,\r\n      'ads_click': Icons.ads_click,\r\n      'agriculture': Icons.agriculture,\r\n      'air': Icons.air,\r\n      'airline_seat_flat': Icons.airline_seat_flat,\r\n      'airline_seat_flat_angled': Icons.airline_seat_flat_angled,\r\n      'airline_seat_individual_suite': Icons.airline_seat_individual_suite,\r\n      'airline_seat_legroom_extra': Icons.airline_seat_legroom_extra,\r\n      'airline_seat_legroom_normal': Icons.airline_seat_legroom_normal,\r\n      'airline_seat_legroom_reduced': Icons.airline_seat_legroom_reduced,\r\n      'airline_seat_recline_extra': Icons.airline_seat_recline_extra,\r\n      'airline_seat_recline_normal': Icons.airline_seat_recline_normal,\r\n      'airline_stops': Icons.airline_stops,\r\n      'airlines': Icons.airlines,\r\n      'airplane_ticket': Icons.airplane_ticket,\r\n      'airplanemode_active': Icons.airplanemode_active,\r\n      'airplanemode_inactive': Icons.airplanemode_inactive,\r\n      'airplay': Icons.airplay,\r\n      'airport_shuttle': Icons.airport_shuttle,\r\n      'alarm': Icons.alarm,\r\n      'alarm_add': Icons.alarm_add,\r\n      'alarm_off': Icons.alarm_off,\r\n      'alarm_on': Icons.alarm_on,\r\n      'album': Icons.album,\r\n      'align_horizontal_center': Icons.align_horizontal_center,\r\n      'align_horizontal_left': Icons.align_horizontal_left,\r\n      'align_horizontal_right': Icons.align_horizontal_right,\r\n      'align_vertical_bottom': Icons.align_vertical_bottom,\r\n      'align_vertical_center': Icons.align_vertical_center,\r\n      'align_vertical_top': Icons.align_vertical_top,\r\n      'all_inbox': Icons.all_inbox,\r\n      'all_inclusive': Icons.all_inclusive,\r\n      'all_out': Icons.all_out,\r\n      'alt_route': Icons.alt_route,\r\n      'alternate_email': Icons.alternate_email,\r\n      'analytics': Icons.analytics,\r\n      'anchor': Icons.anchor,\r\n      'android': Icons.android,\r\n      'animation': Icons.animation,\r\n      'announcement': Icons.announcement,\r\n      'aod': Icons.aod,\r\n      'apartment': Icons.apartment,\r\n      'api': Icons.api,\r\n      'app_blocking': Icons.app_blocking,\r\n      'app_registration': Icons.app_registration,\r\n      'app_settings_alt': Icons.app_settings_alt,\r\n      'app_shortcut': Icons.app_shortcut,\r\n      'approval': Icons.approval,\r\n      'apps': Icons.apps,\r\n      'apps_outage': Icons.apps_outage,\r\n      'architecture': Icons.architecture,\r\n      'archive': Icons.archive,\r\n      'area_chart': Icons.area_chart,\r\n      'arrow_back': Icons.arrow_back,\r\n      'arrow_back_ios': Icons.arrow_back_ios,\r\n      'arrow_back_ios_new': Icons.arrow_back_ios_new,\r\n      'arrow_circle_down': Icons.arrow_circle_down,\r\n      'arrow_circle_left': Icons.arrow_circle_left,\r\n      'arrow_circle_right': Icons.arrow_circle_right,\r\n      'arrow_circle_up': Icons.arrow_circle_up,\r\n      'arrow_downward': Icons.arrow_downward,\r\n      'arrow_drop_down': Icons.arrow_drop_down,\r\n      'arrow_drop_down_circle': Icons.arrow_drop_down_circle,\r\n      'arrow_drop_up': Icons.arrow_drop_up,\r\n      'arrow_forward': Icons.arrow_forward,\r\n      'arrow_forward_ios': Icons.arrow_forward_ios,\r\n      'arrow_forward_rounded': Icons.arrow_forward_rounded,\r\n      'arrow_left': Icons.arrow_left,\r\n      'arrow_outward': Icons.arrow_outward,\r\n      'arrow_right': Icons.arrow_right,\r\n      'arrow_right_alt': Icons.arrow_right_alt,\r\n      'arrow_upward': Icons.arrow_upward,\r\n      'art_track': Icons.art_track,\r\n      'article': Icons.article,\r\n      'aspect_ratio': Icons.aspect_ratio,\r\n      'assessment': Icons.assessment,\r\n      'assignment': Icons.assignment,\r\n      'assignment_ind': Icons.assignment_ind,\r\n      'assignment_late': Icons.assignment_late,\r\n      'assignment_return': Icons.assignment_return,\r\n      'assignment_returned': Icons.assignment_returned,\r\n      'assignment_turned_in': Icons.assignment_turned_in,\r\n      'assist_walker': Icons.assist_walker,\r\n      'assistant': Icons.assistant,\r\n      'assistant_direction': Icons.assistant_direction,\r\n      'assistant_photo': Icons.assistant_photo,\r\n      'assured_workload': Icons.assured_workload,\r\n      'atm': Icons.atm,\r\n      'attach_email': Icons.attach_email,\r\n      'attach_file': Icons.attach_file,\r\n      'attach_money': Icons.attach_money,\r\n      'attachment': Icons.attachment,\r\n      'attractions': Icons.attractions,\r\n      'attribution': Icons.attribution,\r\n      'audio_file': Icons.audio_file,\r\n      'audiotrack': Icons.audiotrack,\r\n      'auto_awesome': Icons.auto_awesome,\r\n      'auto_awesome_mosaic': Icons.auto_awesome_mosaic,\r\n      'auto_awesome_motion': Icons.auto_awesome_motion,\r\n      'auto_delete': Icons.auto_delete,\r\n      'auto_fix_high': Icons.auto_fix_high,\r\n      'auto_fix_normal': Icons.auto_fix_normal,\r\n      'auto_fix_off': Icons.auto_fix_off,\r\n      'auto_graph': Icons.auto_graph,\r\n      'auto_mode': Icons.auto_mode,\r\n      'auto_stories': Icons.auto_stories,\r\n      'autofps_select': Icons.autofps_select,\r\n      'autorenew': Icons.autorenew,\r\n      'av_timer': Icons.av_timer,\r\n\r\n      // B\r\n      'baby_changing_station': Icons.baby_changing_station,\r\n      'back_hand': Icons.back_hand,\r\n      'backpack': Icons.backpack,\r\n      'backspace': Icons.backspace,\r\n      'backup': Icons.backup,\r\n      'backup_table': Icons.backup_table,\r\n      'badge': Icons.badge,\r\n      'bakery_dining': Icons.bakery_dining,\r\n      'balance': Icons.balance,\r\n      'balcony': Icons.balcony,\r\n      'ballot': Icons.ballot,\r\n      'bar_chart': Icons.bar_chart,\r\n      'batch_prediction': Icons.batch_prediction,\r\n      'bathroom': Icons.bathroom,\r\n      'bathtub': Icons.bathtub,\r\n      'battery_0_bar': Icons.battery_0_bar,\r\n      'battery_1_bar': Icons.battery_1_bar,\r\n      'battery_2_bar': Icons.battery_2_bar,\r\n      'battery_3_bar': Icons.battery_3_bar,\r\n      'battery_4_bar': Icons.battery_4_bar,\r\n      'battery_5_bar': Icons.battery_5_bar,\r\n      'battery_6_bar': Icons.battery_6_bar,\r\n      'battery_alert': Icons.battery_alert,\r\n      'battery_charging_full': Icons.battery_charging_full,\r\n      'battery_full': Icons.battery_full,\r\n      'battery_saver': Icons.battery_saver,\r\n      'battery_std': Icons.battery_std,\r\n      'battery_unknown': Icons.battery_unknown,\r\n      'beach_access': Icons.beach_access,\r\n      'bed': Icons.bed,\r\n      'bedroom_baby': Icons.bedroom_baby,\r\n      'bedroom_child': Icons.bedroom_child,\r\n      'bedroom_parent': Icons.bedroom_parent,\r\n      'bedtime': Icons.bedtime,\r\n      'bedtime_off': Icons.bedtime_off,\r\n      'beenhere': Icons.beenhere,\r\n      'bento': Icons.bento,\r\n      'bike_scooter': Icons.bike_scooter,\r\n      'biotech': Icons.biotech,\r\n      'blender': Icons.blender,\r\n      'blind': Icons.blind,\r\n      'blinds': Icons.blinds,\r\n      'blinds_closed': Icons.blinds_closed,\r\n      'block': Icons.block,\r\n      'bloodtype': Icons.bloodtype,\r\n      'bluetooth': Icons.bluetooth,\r\n      'bluetooth_audio': Icons.bluetooth_audio,\r\n      'bluetooth_connected': Icons.bluetooth_connected,\r\n      'bluetooth_disabled': Icons.bluetooth_disabled,\r\n      'bluetooth_drive': Icons.bluetooth_drive,\r\n      'bluetooth_searching': Icons.bluetooth_searching,\r\n      'blur_circular': Icons.blur_circular,\r\n      'blur_linear': Icons.blur_linear,\r\n      'blur_off': Icons.blur_off,\r\n      'blur_on': Icons.blur_on,\r\n      'bolt': Icons.bolt,\r\n      'book': Icons.book,\r\n      'book_online': Icons.book_online,\r\n      'bookmark': Icons.bookmark,\r\n      'bookmark_add': Icons.bookmark_add,\r\n      'bookmark_added': Icons.bookmark_added,\r\n      'bookmark_border': Icons.bookmark_border,\r\n      'bookmark_outline': Icons.bookmark_outline,\r\n      'bookmark_remove': Icons.bookmark_remove,\r\n      'bookmarks': Icons.bookmarks,\r\n      'border_all': Icons.border_all,\r\n      'border_bottom': Icons.border_bottom,\r\n      'border_clear': Icons.border_clear,\r\n      'border_color': Icons.border_color,\r\n      'border_horizontal': Icons.border_horizontal,\r\n      'border_inner': Icons.border_inner,\r\n      'border_left': Icons.border_left,\r\n      'border_outer': Icons.border_outer,\r\n      'border_right': Icons.border_right,\r\n      'border_style': Icons.border_style,\r\n      'border_top': Icons.border_top,\r\n      'border_vertical': Icons.border_vertical,\r\n      'boy': Icons.boy,\r\n      'branding_watermark': Icons.branding_watermark,\r\n      'breakfast_dining': Icons.breakfast_dining,\r\n      'brightness_1': Icons.brightness_1,\r\n      'brightness_2': Icons.brightness_2,\r\n      'brightness_3': Icons.brightness_3,\r\n      'brightness_4': Icons.brightness_4,\r\n      'brightness_5': Icons.brightness_5,\r\n      'brightness_6': Icons.brightness_6,\r\n      'brightness_7': Icons.brightness_7,\r\n      'brightness_auto': Icons.brightness_auto,\r\n      'brightness_high': Icons.brightness_high,\r\n      'brightness_low': Icons.brightness_low,\r\n      'brightness_medium': Icons.brightness_medium,\r\n      'broken_image': Icons.broken_image,\r\n      'browse_gallery': Icons.browse_gallery,\r\n      'browser_not_supported': Icons.browser_not_supported,\r\n      'browser_updated': Icons.browser_updated,\r\n      'brunch_dining': Icons.brunch_dining,\r\n      'brush': Icons.brush,\r\n      'bubble_chart': Icons.bubble_chart,\r\n      'bug_report': Icons.bug_report,\r\n      'build': Icons.build,\r\n      'build_circle': Icons.build_circle,\r\n      'bungalow': Icons.bungalow,\r\n      'burst_mode': Icons.burst_mode,\r\n      'bus_alert': Icons.bus_alert,\r\n      'business': Icons.business,\r\n      'business_center': Icons.business_center,\r\n\r\n      // C\r\n      'cabin': Icons.cabin,\r\n      'cable': Icons.cable,\r\n      'cached': Icons.cached,\r\n      'cake': Icons.cake,\r\n      'calculate': Icons.calculate,\r\n      'calendar_month': Icons.calendar_month,\r\n      'calendar_today': Icons.calendar_today,\r\n      'calendar_view_day': Icons.calendar_view_day,\r\n      'calendar_view_month': Icons.calendar_view_month,\r\n      'calendar_view_week': Icons.calendar_view_week,\r\n      'call': Icons.call,\r\n      'call_end': Icons.call_end,\r\n      'call_made': Icons.call_made,\r\n      'call_merge': Icons.call_merge,\r\n      'call_missed': Icons.call_missed,\r\n      'call_missed_outgoing': Icons.call_missed_outgoing,\r\n      'call_received': Icons.call_received,\r\n      'call_split': Icons.call_split,\r\n      'call_to_action': Icons.call_to_action,\r\n      'camera': Icons.camera,\r\n      'camera_alt': Icons.camera_alt,\r\n      'camera_enhance': Icons.camera_enhance,\r\n      'camera_front': Icons.camera_front,\r\n      'camera_indoor': Icons.camera_indoor,\r\n      'camera_outdoor': Icons.camera_outdoor,\r\n      'camera_rear': Icons.camera_rear,\r\n      'camera_roll': Icons.camera_roll,\r\n      'cameraswitch': Icons.cameraswitch,\r\n      'campaign': Icons.campaign,\r\n      'cancel': Icons.cancel,\r\n      'cancel_presentation': Icons.cancel_presentation,\r\n      'cancel_schedule_send': Icons.cancel_schedule_send,\r\n      'candlestick_chart': Icons.candlestick_chart,\r\n      'car_crash': Icons.car_crash,\r\n      'car_rental': Icons.car_rental,\r\n      'car_repair': Icons.car_repair,\r\n      'card_giftcard': Icons.card_giftcard,\r\n      'card_membership': Icons.card_membership,\r\n      'card_travel': Icons.card_travel,\r\n      'carpenter': Icons.carpenter,\r\n      'cases': Icons.cases,\r\n      'casino': Icons.casino,\r\n      'cast': Icons.cast,\r\n      'cast_connected': Icons.cast_connected,\r\n      'cast_for_education': Icons.cast_for_education,\r\n      'castle': Icons.castle,\r\n      'catching_pokemon': Icons.catching_pokemon,\r\n      'category': Icons.category,\r\n      'celebration': Icons.celebration,\r\n      'cell_tower': Icons.cell_tower,\r\n      'cell_wifi': Icons.cell_wifi,\r\n      'center_focus_strong': Icons.center_focus_strong,\r\n      'center_focus_weak': Icons.center_focus_weak,\r\n      'chair': Icons.chair,\r\n      'chair_alt': Icons.chair_alt,\r\n      'chalet': Icons.chalet,\r\n      'change_circle': Icons.change_circle,\r\n      'change_history': Icons.change_history,\r\n      'charging_station': Icons.charging_station,\r\n      'chat': Icons.chat,\r\n      'chat_bubble': Icons.chat_bubble,\r\n      'chat_bubble_outline': Icons.chat_bubble_outline,\r\n      'check': Icons.check,\r\n      'check_box': Icons.check_box,\r\n      'check_box_outline_blank': Icons.check_box_outline_blank,\r\n      'check_circle': Icons.check_circle,\r\n      'check_circle_outline': Icons.check_circle_outline,\r\n      'checklist': Icons.checklist,\r\n      'checklist_rtl': Icons.checklist_rtl,\r\n      'checkroom': Icons.checkroom,\r\n      'chevron_left': Icons.chevron_left,\r\n      'chevron_right': Icons.chevron_right,\r\n      'child_care': Icons.child_care,\r\n      'child_friendly': Icons.child_friendly,\r\n      'chrome_reader_mode': Icons.chrome_reader_mode,\r\n      'church': Icons.church,\r\n      'circle': Icons.circle,\r\n      'circle_notifications': Icons.circle_notifications,\r\n      'class_': Icons.class_,\r\n      'clean_hands': Icons.clean_hands,\r\n      'cleaning_services': Icons.cleaning_services,\r\n      'clear': Icons.clear,\r\n      'clear_all': Icons.clear_all,\r\n      'close': Icons.close,\r\n      'close_fullscreen': Icons.close_fullscreen,\r\n      'closed_caption': Icons.closed_caption,\r\n      'closed_caption_disabled': Icons.closed_caption_disabled,\r\n      'closed_caption_off': Icons.closed_caption_off,\r\n      'cloud': Icons.cloud,\r\n      'cloud_circle': Icons.cloud_circle,\r\n      'cloud_done': Icons.cloud_done,\r\n      'cloud_download': Icons.cloud_download,\r\n      'cloud_off': Icons.cloud_off,\r\n      'cloud_queue': Icons.cloud_queue,\r\n      'cloud_sync': Icons.cloud_sync,\r\n      'cloud_upload': Icons.cloud_upload,\r\n      'co2': Icons.co2,\r\n      'co_present': Icons.co_present,\r\n      'code': Icons.code,\r\n      'code_off': Icons.code_off,\r\n      'coffee': Icons.coffee,\r\n      'coffee_maker': Icons.coffee_maker,\r\n      'collections': Icons.collections,\r\n      'collections_bookmark': Icons.collections_bookmark,\r\n      'color_lens': Icons.color_lens,\r\n      'colorize': Icons.colorize,\r\n      'comment': Icons.comment,\r\n      'comment_bank': Icons.comment_bank,\r\n      'comments_disabled': Icons.comments_disabled,\r\n      'commit': Icons.commit,\r\n      'commute': Icons.commute,\r\n      'compare': Icons.compare,\r\n      'compare_arrows': Icons.compare_arrows,\r\n      'compass_calibration': Icons.compass_calibration,\r\n      'compost': Icons.compost,\r\n      'compress': Icons.compress,\r\n      'computer': Icons.computer,\r\n      'confirmation_num': Icons.confirmation_num,\r\n      'confirmation_number': Icons.confirmation_number,\r\n      'connect_without_contact': Icons.connect_without_contact,\r\n      'connected_tv': Icons.connected_tv,\r\n      'connecting_airports': Icons.connecting_airports,\r\n      'construction': Icons.construction,\r\n      'contact_emergency': Icons.contact_emergency,\r\n      'contact_mail': Icons.contact_mail,\r\n      'contact_page': Icons.contact_page,\r\n      'contact_phone': Icons.contact_phone,\r\n      'contact_support': Icons.contact_support,\r\n      'contactless': Icons.contactless,\r\n      'contacts': Icons.contacts,\r\n      'content_copy': Icons.content_copy,\r\n      'content_cut': Icons.content_cut,\r\n      'content_paste': Icons.content_paste,\r\n      'content_paste_go': Icons.content_paste_go,\r\n      'content_paste_off': Icons.content_paste_off,\r\n      'content_paste_search': Icons.content_paste_search,\r\n      'contrast': Icons.contrast,\r\n      'control_camera': Icons.control_camera,\r\n      'control_point': Icons.control_point,\r\n      'control_point_duplicate': Icons.control_point_duplicate,\r\n      'cookie': Icons.cookie,\r\n      'copy_all': Icons.copy_all,\r\n      'copyright': Icons.copyright,\r\n      'coronavirus': Icons.coronavirus,\r\n      'corporate_fare': Icons.corporate_fare,\r\n      'cottage': Icons.cottage,\r\n      'countertops': Icons.countertops,\r\n      'create': Icons.create,\r\n      'create_new_folder': Icons.create_new_folder,\r\n      'credit_card': Icons.credit_card,\r\n      'credit_card_off': Icons.credit_card_off,\r\n      'credit_score': Icons.credit_score,\r\n      'crib': Icons.crib,\r\n      'crisis_alert': Icons.crisis_alert,\r\n      'crop': Icons.crop,\r\n      'crop_16_9': Icons.crop_16_9,\r\n      'crop_3_2': Icons.crop_3_2,\r\n      'crop_5_4': Icons.crop_5_4,\r\n      'crop_7_5': Icons.crop_7_5,\r\n      'crop_din': Icons.crop_din,\r\n      'crop_free': Icons.crop_free,\r\n      'crop_landscape': Icons.crop_landscape,\r\n      'crop_original': Icons.crop_original,\r\n      'crop_portrait': Icons.crop_portrait,\r\n      'crop_rotate': Icons.crop_rotate,\r\n      'crop_square': Icons.crop_square,\r\n      'cruelty_free': Icons.cruelty_free,\r\n      'css': Icons.css,\r\n      'currency_bitcoin': Icons.currency_bitcoin,\r\n      'currency_exchange': Icons.currency_exchange,\r\n      'currency_franc': Icons.currency_franc,\r\n      'currency_lira': Icons.currency_lira,\r\n      'currency_pound': Icons.currency_pound,\r\n      'currency_ruble': Icons.currency_ruble,\r\n      'currency_rupee': Icons.currency_rupee,\r\n      'currency_yen': Icons.currency_yen,\r\n      'currency_yuan': Icons.currency_yuan,\r\n      'curtains': Icons.curtains,\r\n      'curtains_closed': Icons.curtains_closed,\r\n\r\n      // D\r\n      'dangerous': Icons.dangerous,\r\n      'dark_mode': Icons.dark_mode,\r\n      'dark_mode_outlined': Icons.dark_mode_outlined,\r\n      'dashboard': Icons.dashboard,\r\n      'dashboard_customize': Icons.dashboard_customize,\r\n      'data_array': Icons.data_array,\r\n      'data_exploration': Icons.data_exploration,\r\n      'data_object': Icons.data_object,\r\n      'data_saver_off': Icons.data_saver_off,\r\n      'data_saver_on': Icons.data_saver_on,\r\n      'data_thresholding': Icons.data_thresholding,\r\n      'data_usage': Icons.data_usage,\r\n      'date_range': Icons.date_range,\r\n      'deblur': Icons.deblur,\r\n      'deck': Icons.deck,\r\n      'dehaze': Icons.dehaze,\r\n      'delete': Icons.delete,\r\n      'delete_forever': Icons.delete_forever,\r\n      'delete_outline': Icons.delete_outline,\r\n      'delete_sweep': Icons.delete_sweep,\r\n      'delivery_dining': Icons.delivery_dining,\r\n      'density_large': Icons.density_large,\r\n      'density_medium': Icons.density_medium,\r\n      'density_small': Icons.density_small,\r\n      'departure_board': Icons.departure_board,\r\n      'description': Icons.description,\r\n      'deselect': Icons.deselect,\r\n      'design_services': Icons.design_services,\r\n      'desk': Icons.desk,\r\n      'desktop_access_disabled': Icons.desktop_access_disabled,\r\n      'desktop_mac': Icons.desktop_mac,\r\n      'desktop_windows': Icons.desktop_windows,\r\n      'details': Icons.details,\r\n      'developer_board': Icons.developer_board,\r\n      'developer_board_off': Icons.developer_board_off,\r\n      'developer_mode': Icons.developer_mode,\r\n      'device_hub': Icons.device_hub,\r\n      'device_thermostat': Icons.device_thermostat,\r\n      'device_unknown': Icons.device_unknown,\r\n      'devices': Icons.devices,\r\n      'devices_fold': Icons.devices_fold,\r\n      'devices_other': Icons.devices_other,\r\n      'dew_point': Icons.dew_point,\r\n      'dialer_sip': Icons.dialer_sip,\r\n      'dialpad': Icons.dialpad,\r\n      'diamond': Icons.diamond,\r\n      'difference': Icons.difference,\r\n      'dining': Icons.dining,\r\n      'dinner_dining': Icons.dinner_dining,\r\n      'directions': Icons.directions,\r\n      'directions_bike': Icons.directions_bike,\r\n      'directions_boat': Icons.directions_boat,\r\n      'directions_boat_filled': Icons.directions_boat_filled,\r\n      'directions_bus': Icons.directions_bus,\r\n      'directions_bus_filled': Icons.directions_bus_filled,\r\n      'directions_car': Icons.directions_car,\r\n      'directions_car_filled': Icons.directions_car_filled,\r\n      'directions_ferry': Icons.directions_ferry,\r\n      'directions_off': Icons.directions_off,\r\n      'directions_railway': Icons.directions_railway,\r\n      'directions_railway_filled': Icons.directions_railway_filled,\r\n      'directions_run': Icons.directions_run,\r\n      'directions_subway': Icons.directions_subway,\r\n      'directions_subway_filled': Icons.directions_subway_filled,\r\n      'directions_transit': Icons.directions_transit,\r\n      'directions_transit_filled': Icons.directions_transit_filled,\r\n      'directions_walk': Icons.directions_walk,\r\n      'dirty_lens': Icons.dirty_lens,\r\n      'disabled_by_default': Icons.disabled_by_default,\r\n      'disabled_visible': Icons.disabled_visible,\r\n      'disc_full': Icons.disc_full,\r\n      'discord': Icons.discord,\r\n      'discount': Icons.discount,\r\n      'display_settings': Icons.display_settings,\r\n      'diversity_1': Icons.diversity_1,\r\n      'diversity_2': Icons.diversity_2,\r\n      'diversity_3': Icons.diversity_3,\r\n      'dns': Icons.dns,\r\n      'do_disturb': Icons.do_disturb,\r\n      'do_disturb_alt': Icons.do_disturb_alt,\r\n      'do_disturb_off': Icons.do_disturb_off,\r\n      'do_disturb_on': Icons.do_disturb_on,\r\n      'do_not_disturb': Icons.do_not_disturb,\r\n      'do_not_disturb_alt': Icons.do_not_disturb_alt,\r\n      'do_not_disturb_off': Icons.do_not_disturb_off,\r\n      'do_not_disturb_on': Icons.do_not_disturb_on,\r\n      'do_not_disturb_on_total_silence': Icons.do_not_disturb_on_total_silence,\r\n      'do_not_step': Icons.do_not_step,\r\n      'do_not_touch': Icons.do_not_touch,\r\n      'dock': Icons.dock,\r\n      'document_scanner': Icons.document_scanner,\r\n      'domain': Icons.domain,\r\n      'domain_add': Icons.domain_add,\r\n      'domain_disabled': Icons.domain_disabled,\r\n      'domain_verification': Icons.domain_verification,\r\n      'done': Icons.done,\r\n      'done_all': Icons.done_all,\r\n      'done_outline': Icons.done_outline,\r\n      'donut_large': Icons.donut_large,\r\n      'donut_small': Icons.donut_small,\r\n      'door_back': Icons.door_back_door,\r\n      'door_front': Icons.door_front_door,\r\n      'door_sliding': Icons.door_sliding,\r\n      'doorbell': Icons.doorbell,\r\n      'double_arrow': Icons.double_arrow,\r\n      'downhill_skiing': Icons.downhill_skiing,\r\n      'download': Icons.download,\r\n      'download_done': Icons.download_done,\r\n      'download_for_offline': Icons.download_for_offline,\r\n      'downloading': Icons.downloading,\r\n      'drafts': Icons.drafts,\r\n      'drag_handle': Icons.drag_handle,\r\n      'drag_indicator': Icons.drag_indicator,\r\n      'draw': Icons.draw,\r\n      'drive_eta': Icons.drive_eta,\r\n      'drive_file_move': Icons.drive_file_move,\r\n      'drive_file_move_outline': Icons.drive_file_move_outline,\r\n      'drive_file_move_rtl': Icons.drive_file_move_rtl,\r\n      'drive_file_rename_outline': Icons.drive_file_rename_outline,\r\n      'drive_folder_upload': Icons.drive_folder_upload,\r\n      'dry': Icons.dry,\r\n      'dry_cleaning': Icons.dry_cleaning,\r\n      'duo': Icons.duo,\r\n      'dvr': Icons.dvr,\r\n      'dynamic_feed': Icons.dynamic_feed,\r\n      'dynamic_form': Icons.dynamic_form,\r\n\r\n      // E\r\n      'e_mobiledata': Icons.e_mobiledata,\r\n      'earbuds': Icons.earbuds,\r\n      'earbuds_battery': Icons.earbuds_battery,\r\n      'east': Icons.east,\r\n      'eco': Icons.eco,\r\n      'edgesensor_high': Icons.edgesensor_high,\r\n      'edgesensor_low': Icons.edgesensor_low,\r\n      'edit': Icons.edit,\r\n      'edit_attributes': Icons.edit_attributes,\r\n      'edit_calendar': Icons.edit_calendar,\r\n      'edit_document': Icons.edit_document,\r\n      'edit_location': Icons.edit_location,\r\n      'edit_location_alt': Icons.edit_location_alt,\r\n      'edit_note': Icons.edit_note,\r\n      'edit_notifications': Icons.edit_notifications,\r\n      'edit_off': Icons.edit_off,\r\n      'edit_outlined': Icons.edit_outlined,\r\n      'edit_road': Icons.edit_road,\r\n      'egg': Icons.egg,\r\n      'egg_alt': Icons.egg_alt,\r\n      'eject': Icons.eject,\r\n      'elderly': Icons.elderly,\r\n      'elderly_woman': Icons.elderly_woman,\r\n      'electric_bike': Icons.electric_bike,\r\n      'electric_bolt': Icons.electric_bolt,\r\n      'electric_car': Icons.electric_car,\r\n      'electric_meter': Icons.electric_meter,\r\n      'electric_moped': Icons.electric_moped,\r\n      'electric_rickshaw': Icons.electric_rickshaw,\r\n      'electric_scooter': Icons.electric_scooter,\r\n      'electrical_services': Icons.electrical_services,\r\n      'elevator': Icons.elevator,\r\n      'email': Icons.email,\r\n      'emergency': Icons.emergency,\r\n      'emergency_recording': Icons.emergency_recording,\r\n      'emergency_share': Icons.emergency_share,\r\n      'emoji_emotions': Icons.emoji_emotions,\r\n      'emoji_events': Icons.emoji_events,\r\n      'emoji_flags': Icons.emoji_flags,\r\n      'emoji_food_beverage': Icons.emoji_food_beverage,\r\n      'emoji_nature': Icons.emoji_nature,\r\n      'emoji_objects': Icons.emoji_objects,\r\n      'emoji_people': Icons.emoji_people,\r\n      'emoji_symbols': Icons.emoji_symbols,\r\n      'emoji_transportation': Icons.emoji_transportation,\r\n      'engineering': Icons.engineering,\r\n      'enhance_photo_translate': Icons.enhance_photo_translate,\r\n      'enhanced_encryption': Icons.enhanced_encryption,\r\n      'equalizer': Icons.equalizer,\r\n      'error': Icons.error,\r\n      'error_outline': Icons.error_outline,\r\n      'escalator': Icons.escalator,\r\n      'escalator_warning': Icons.escalator_warning,\r\n      'euro': Icons.euro,\r\n      'euro_symbol': Icons.euro_symbol,\r\n      'ev_station': Icons.ev_station,\r\n      'event': Icons.event,\r\n      'event_available': Icons.event_available,\r\n      'event_busy': Icons.event_busy,\r\n      'event_note': Icons.event_note,\r\n      'event_repeat': Icons.event_repeat,\r\n      'event_seat': Icons.event_seat,\r\n      'exit_to_app': Icons.exit_to_app,\r\n      'expand': Icons.expand,\r\n      'expand_circle_down': Icons.expand_circle_down,\r\n      'expand_less': Icons.expand_less,\r\n      'expand_more': Icons.expand_more,\r\n      'explicit': Icons.explicit,\r\n      'explore': Icons.explore,\r\n      'explore_off': Icons.explore_off,\r\n      'exposure': Icons.exposure,\r\n      'exposure_neg_1': Icons.exposure_neg_1,\r\n      'exposure_neg_2': Icons.exposure_neg_2,\r\n      'exposure_plus_1': Icons.exposure_plus_1,\r\n      'exposure_plus_2': Icons.exposure_plus_2,\r\n      'exposure_zero': Icons.exposure_zero,\r\n      'extension': Icons.extension,\r\n      'extension_off': Icons.extension_off,\r\n\r\n      // F\r\n      'face': Icons.face,\r\n      'face_2': Icons.face_2,\r\n      'face_3': Icons.face_3,\r\n      'face_4': Icons.face_4,\r\n      'face_5': Icons.face_5,\r\n      'face_6': Icons.face_6,\r\n      'face_retouching_natural': Icons.face_retouching_natural,\r\n      'face_retouching_off': Icons.face_retouching_off,\r\n      'fact_check': Icons.fact_check,\r\n      'factory': Icons.factory,\r\n      'family_restroom': Icons.family_restroom,\r\n      'fast_forward': Icons.fast_forward,\r\n      'fast_rewind': Icons.fast_rewind,\r\n      'fastfood': Icons.fastfood,\r\n      'favorite': Icons.favorite,\r\n      'favorite_border': Icons.favorite_border,\r\n      'favorite_outline': Icons.favorite_outline,\r\n      'fax': Icons.fax,\r\n      'featured_play_list': Icons.featured_play_list,\r\n      'featured_video': Icons.featured_video,\r\n      'feed': Icons.feed,\r\n      'feedback': Icons.feedback,\r\n      'female': Icons.female,\r\n      'fence': Icons.fence,\r\n      'festival': Icons.festival,\r\n      'fiber_dvr': Icons.fiber_dvr,\r\n      'fiber_manual_record': Icons.fiber_manual_record,\r\n      'fiber_new': Icons.fiber_new,\r\n      'fiber_pin': Icons.fiber_pin,\r\n      'fiber_smart_record': Icons.fiber_smart_record,\r\n      'file_copy': Icons.file_copy,\r\n      'file_download': Icons.file_download,\r\n      'file_download_done': Icons.file_download_done,\r\n      'file_download_off': Icons.file_download_off,\r\n      'file_open': Icons.file_open,\r\n      'file_present': Icons.file_present,\r\n      'file_upload': Icons.file_upload,\r\n      'filter': Icons.filter,\r\n      'filter_1': Icons.filter_1,\r\n      'filter_2': Icons.filter_2,\r\n      'filter_3': Icons.filter_3,\r\n      'filter_4': Icons.filter_4,\r\n      'filter_5': Icons.filter_5,\r\n      'filter_6': Icons.filter_6,\r\n      'filter_7': Icons.filter_7,\r\n      'filter_8': Icons.filter_8,\r\n      'filter_9': Icons.filter_9,\r\n      'filter_9_plus': Icons.filter_9_plus,\r\n      'filter_alt': Icons.filter_alt,\r\n      'filter_alt_off': Icons.filter_alt_off,\r\n      'filter_b_and_w': Icons.filter_b_and_w,\r\n      'filter_center_focus': Icons.filter_center_focus,\r\n      'filter_drama': Icons.filter_drama,\r\n      'filter_frames': Icons.filter_frames,\r\n      'filter_hdr': Icons.filter_hdr,\r\n      'filter_list': Icons.filter_list,\r\n      'filter_list_alt': Icons.filter_list_alt,\r\n      'filter_list_off': Icons.filter_list_off,\r\n      'filter_none': Icons.filter_none,\r\n      'filter_tilt_shift': Icons.filter_tilt_shift,\r\n      'filter_vintage': Icons.filter_vintage,\r\n      'find_in_page': Icons.find_in_page,\r\n      'find_replace': Icons.find_replace,\r\n      'fingerprint': Icons.fingerprint,\r\n      'fire_extinguisher': Icons.fire_extinguisher,\r\n      'fire_hydrant': Icons.fire_hydrant,\r\n      'fire_truck': Icons.fire_truck,\r\n      'fireplace': Icons.fireplace,\r\n      'first_page': Icons.first_page,\r\n      'fit_screen': Icons.fit_screen,\r\n      'fitness_center': Icons.fitness_center,\r\n      'flag': Icons.flag,\r\n      'flag_circle': Icons.flag_circle,\r\n      'flaky': Icons.flaky,\r\n      'flare': Icons.flare,\r\n      'flash_auto': Icons.flash_auto,\r\n      'flash_off': Icons.flash_off,\r\n      'flash_on': Icons.flash_on,\r\n      'flashlight_off': Icons.flashlight_off,\r\n      'flashlight_on': Icons.flashlight_on,\r\n      'flatware': Icons.flatware,\r\n      'flight': Icons.flight,\r\n      'flight_class': Icons.flight_class,\r\n      'flight_land': Icons.flight_land,\r\n      'flight_takeoff': Icons.flight_takeoff,\r\n      'flip': Icons.flip,\r\n      'flip_camera_android': Icons.flip_camera_android,\r\n      'flip_camera_ios': Icons.flip_camera_ios,\r\n      'flip_to_back': Icons.flip_to_back,\r\n      'flip_to_front': Icons.flip_to_front,\r\n      'flood': Icons.flood,\r\n      'fluorescent': Icons.fluorescent,\r\n      'flutter_dash': Icons.flutter_dash,\r\n      'fmd_bad': Icons.fmd_bad,\r\n      'fmd_good': Icons.fmd_good,\r\n      'folder': Icons.folder,\r\n      'folder_copy': Icons.folder_copy,\r\n      'folder_delete': Icons.folder_delete,\r\n      'folder_off': Icons.folder_off,\r\n      'folder_open': Icons.folder_open,\r\n      'folder_shared': Icons.folder_shared,\r\n      'folder_special': Icons.folder_special,\r\n      'folder_zip': Icons.folder_zip,\r\n      'follow_the_signs': Icons.follow_the_signs,\r\n      'font_download': Icons.font_download,\r\n      'font_download_off': Icons.font_download_off,\r\n      'food_bank': Icons.food_bank,\r\n      'forest': Icons.forest,\r\n      'fork_left': Icons.fork_left,\r\n      'fork_right': Icons.fork_right,\r\n      'format_align_center': Icons.format_align_center,\r\n      'format_align_justify': Icons.format_align_justify,\r\n      'format_align_left': Icons.format_align_left,\r\n      'format_align_right': Icons.format_align_right,\r\n      'format_bold': Icons.format_bold,\r\n      'format_clear': Icons.format_clear,\r\n      'format_color_fill': Icons.format_color_fill,\r\n      'format_color_reset': Icons.format_color_reset,\r\n      'format_color_text': Icons.format_color_text,\r\n      'format_indent_decrease': Icons.format_indent_decrease,\r\n      'format_indent_increase': Icons.format_indent_increase,\r\n      'format_italic': Icons.format_italic,\r\n      'format_line_spacing': Icons.format_line_spacing,\r\n      'format_list_bulleted': Icons.format_list_bulleted,\r\n      'format_list_numbered': Icons.format_list_numbered,\r\n      'format_list_numbered_rtl': Icons.format_list_numbered_rtl,\r\n      'format_overline': Icons.format_overline,\r\n      'format_paint': Icons.format_paint,\r\n      'format_quote': Icons.format_quote,\r\n      'format_shapes': Icons.format_shapes,\r\n      'format_size': Icons.format_size,\r\n      'format_strikethrough': Icons.format_strikethrough,\r\n      'format_textdirection_l_to_r': Icons.format_textdirection_l_to_r,\r\n      'format_textdirection_r_to_l': Icons.format_textdirection_r_to_l,\r\n      'format_underlined': Icons.format_underlined,\r\n      'forum': Icons.forum,\r\n      'forward': Icons.forward,\r\n      'forward_10': Icons.forward_10,\r\n      'forward_30': Icons.forward_30,\r\n      'forward_5': Icons.forward_5,\r\n      'forward_to_inbox': Icons.forward_to_inbox,\r\n      'foundation': Icons.foundation,\r\n      'free_breakfast': Icons.free_breakfast,\r\n      'free_cancellation': Icons.free_cancellation,\r\n      'front_hand': Icons.front_hand,\r\n      'fullscreen': Icons.fullscreen,\r\n      'fullscreen_exit': Icons.fullscreen_exit,\r\n      'functions': Icons.functions,\r\n\r\n      // G\r\n      'g_mobiledata': Icons.g_mobiledata,\r\n      'g_translate': Icons.g_translate,\r\n      'gamepad': Icons.gamepad,\r\n      'games': Icons.games,\r\n      'garage': Icons.garage,\r\n      'gas_meter': Icons.gas_meter,\r\n      'gavel': Icons.gavel,\r\n      'generating_tokens': Icons.generating_tokens,\r\n      'gesture': Icons.gesture,\r\n      'get_app': Icons.get_app,\r\n      'gif': Icons.gif,\r\n      'gif_box': Icons.gif_box,\r\n      'girl': Icons.girl,\r\n      'gite': Icons.gite,\r\n      'golf_course': Icons.golf_course,\r\n      'gpp_bad': Icons.gpp_bad,\r\n      'gpp_good': Icons.gpp_good,\r\n      'gpp_maybe': Icons.gpp_maybe,\r\n      'gps_fixed': Icons.gps_fixed,\r\n      'gps_not_fixed': Icons.gps_not_fixed,\r\n      'gps_off': Icons.gps_off,\r\n      'grade': Icons.grade,\r\n      'gradient': Icons.gradient,\r\n      'grading': Icons.grading,\r\n      'grain': Icons.grain,\r\n      'graphic_eq': Icons.graphic_eq,\r\n      'grass': Icons.grass,\r\n      'grid_3x3': Icons.grid_3x3,\r\n      'grid_4x4': Icons.grid_4x4,\r\n      'grid_goldenratio': Icons.grid_goldenratio,\r\n      'grid_off': Icons.grid_off,\r\n      'grid_on': Icons.grid_on,\r\n      'grid_view': Icons.grid_view,\r\n      'group': Icons.group,\r\n      'group_add': Icons.group_add,\r\n      'group_off': Icons.group_off,\r\n      'group_remove': Icons.group_remove,\r\n      'group_work': Icons.group_work,\r\n      'groups': Icons.groups,\r\n      'groups_2': Icons.groups_2,\r\n      'groups_3': Icons.groups_3,\r\n      'h_mobiledata': Icons.h_mobiledata,\r\n      'h_plus_mobiledata': Icons.h_plus_mobiledata,\r\n\r\n      // H\r\n      'hail': Icons.hail,\r\n      'handshake': Icons.handshake,\r\n      'handyman': Icons.handyman,\r\n      'hardware': Icons.hardware,\r\n      'hd': Icons.hd,\r\n      'hdr_auto': Icons.hdr_auto,\r\n      'hdr_auto_select': Icons.hdr_auto_select,\r\n      'hdr_enhanced_select': Icons.hdr_enhanced_select,\r\n      'hdr_off': Icons.hdr_off,\r\n      'hdr_off_select': Icons.hdr_off_select,\r\n      'hdr_on': Icons.hdr_on,\r\n      'hdr_on_select': Icons.hdr_on_select,\r\n      'hdr_plus': Icons.hdr_plus,\r\n      'hdr_strong': Icons.hdr_strong,\r\n      'hdr_weak': Icons.hdr_weak,\r\n      'headphones': Icons.headphones,\r\n      'headphones_battery': Icons.headphones_battery,\r\n      'headset': Icons.headset,\r\n      'headset_mic': Icons.headset_mic,\r\n      'headset_off': Icons.headset_off,\r\n      'healing': Icons.healing,\r\n      'health_and_safety': Icons.health_and_safety,\r\n      'hearing': Icons.hearing,\r\n      'hearing_disabled': Icons.hearing_disabled,\r\n      'heart_broken': Icons.heart_broken,\r\n      'heat_pump': Icons.heat_pump,\r\n      'height': Icons.height,\r\n      'help': Icons.help,\r\n      'help_center': Icons.help_center,\r\n      'help_outline': Icons.help_outline,\r\n      'hevc': Icons.hevc,\r\n      'hexagon': Icons.hexagon,\r\n      'hide_image': Icons.hide_image,\r\n      'hide_source': Icons.hide_source,\r\n      'high_quality': Icons.high_quality,\r\n      'highlight': Icons.highlight,\r\n      'highlight_alt': Icons.highlight_alt,\r\n      'highlight_off': Icons.highlight_off,\r\n      'highlight_remove': Icons.highlight_remove,\r\n      'hiking': Icons.hiking,\r\n      'history': Icons.history,\r\n      'history_edu': Icons.history_edu,\r\n      'history_toggle_off': Icons.history_toggle_off,\r\n      'hive': Icons.hive,\r\n      'hls': Icons.hls,\r\n      'hls_off': Icons.hls_off,\r\n      'holiday_village': Icons.holiday_village,\r\n      'home': Icons.home,\r\n      'home_filled': Icons.home_filled,\r\n      'home_max': Icons.home_max,\r\n      'home_mini': Icons.home_mini,\r\n      'home_outlined': Icons.home_outlined,\r\n      'home_repair_service': Icons.home_repair_service,\r\n      'home_work': Icons.home_work,\r\n      'horizontal_distribute': Icons.horizontal_distribute,\r\n      'horizontal_rule': Icons.horizontal_rule,\r\n      'horizontal_split': Icons.horizontal_split,\r\n      'hot_tub': Icons.hot_tub,\r\n      'hotel': Icons.hotel,\r\n      'hotel_class': Icons.hotel_class,\r\n      'hourglass_bottom': Icons.hourglass_bottom,\r\n      'hourglass_disabled': Icons.hourglass_disabled,\r\n      'hourglass_empty': Icons.hourglass_empty,\r\n      'hourglass_full': Icons.hourglass_full,\r\n      'hourglass_top': Icons.hourglass_top,\r\n      'house': Icons.house,\r\n      'house_siding': Icons.house_siding,\r\n      'houseboat': Icons.houseboat,\r\n      'how_to_reg': Icons.how_to_reg,\r\n      'how_to_vote': Icons.how_to_vote,\r\n      'html': Icons.html,\r\n      'http': Icons.http,\r\n      'https': Icons.https,\r\n      'hub': Icons.hub,\r\n      'hvac': Icons.hvac,\r\n\r\n      // I\r\n      'ice_skating': Icons.ice_skating,\r\n      'icecream': Icons.icecream,\r\n      'image': Icons.image,\r\n      'image_aspect_ratio': Icons.image_aspect_ratio,\r\n      'image_not_supported': Icons.image_not_supported,\r\n      'image_search': Icons.image_search,\r\n      'imagesearch_roller': Icons.imagesearch_roller,\r\n      'import_contacts': Icons.import_contacts,\r\n      'import_export': Icons.import_export,\r\n      'important_devices': Icons.important_devices,\r\n      'inbox': Icons.inbox,\r\n      'incomplete_circle': Icons.incomplete_circle,\r\n      'indeterminate_check_box': Icons.indeterminate_check_box,\r\n      'info': Icons.info,\r\n      'info_outline': Icons.info_outline,\r\n      'input': Icons.input,\r\n      'insert_chart': Icons.insert_chart,\r\n      'insert_chart_outlined': Icons.insert_chart_outlined,\r\n      'insert_comment': Icons.insert_comment,\r\n      'insert_drive_file': Icons.insert_drive_file,\r\n      'insert_emoticon': Icons.insert_emoticon,\r\n      'insert_invitation': Icons.insert_invitation,\r\n      'insert_link': Icons.insert_link,\r\n      'insert_page_break': Icons.insert_page_break,\r\n      'insert_photo': Icons.insert_photo,\r\n      'insights': Icons.insights,\r\n      'install_desktop': Icons.install_desktop,\r\n      'install_mobile': Icons.install_mobile,\r\n      'integration_instructions': Icons.integration_instructions,\r\n      'interests': Icons.interests,\r\n      'interpreter_mode': Icons.interpreter_mode,\r\n      'inventory': Icons.inventory,\r\n      'inventory_2': Icons.inventory_2,\r\n      'invert_colors': Icons.invert_colors,\r\n      'invert_colors_off': Icons.invert_colors_off,\r\n      'ios_share': Icons.ios_share,\r\n      'iron': Icons.iron,\r\n      'iso': Icons.iso,\r\n\r\n      // J\r\n      'javascript': Icons.javascript,\r\n      'join_full': Icons.join_full,\r\n      'join_inner': Icons.join_inner,\r\n      'join_left': Icons.join_left,\r\n      'join_right': Icons.join_right,\r\n      'joystick': Icons.gamepad,\r\n      'jpeg': Icons.image,\r\n      'kayaking': Icons.kayaking,\r\n\r\n      // K\r\n      'kebab_dining': Icons.kebab_dining,\r\n      'key': Icons.key,\r\n      'key_off': Icons.key_off,\r\n      'keyboard': Icons.keyboard,\r\n      'keyboard_alt': Icons.keyboard_alt,\r\n      'keyboard_arrow_down': Icons.keyboard_arrow_down,\r\n      'keyboard_arrow_left': Icons.keyboard_arrow_left,\r\n      'keyboard_arrow_right': Icons.keyboard_arrow_right,\r\n      'keyboard_arrow_up': Icons.keyboard_arrow_up,\r\n      'keyboard_backspace': Icons.keyboard_backspace,\r\n      'keyboard_capslock': Icons.keyboard_capslock,\r\n      'keyboard_command_key': Icons.keyboard_command_key,\r\n      'keyboard_control_key': Icons.keyboard_control_key,\r\n      'keyboard_double_arrow_down': Icons.keyboard_double_arrow_down,\r\n      'keyboard_double_arrow_left': Icons.keyboard_double_arrow_left,\r\n      'keyboard_double_arrow_right': Icons.keyboard_double_arrow_right,\r\n      'keyboard_double_arrow_up': Icons.keyboard_double_arrow_up,\r\n      'keyboard_hide': Icons.keyboard_hide,\r\n      'keyboard_option_key': Icons.keyboard_option_key,\r\n      'keyboard_return': Icons.keyboard_return,\r\n      'keyboard_tab': Icons.keyboard_tab,\r\n      'keyboard_voice': Icons.keyboard_voice,\r\n      'king_bed': Icons.king_bed,\r\n      'kitchen': Icons.kitchen,\r\n      'kitesurfing': Icons.kitesurfing,\r\n\r\n      // L\r\n      'label': Icons.label,\r\n      'label_important': Icons.label_important,\r\n      'label_important_outline': Icons.label_important_outline,\r\n      'label_off': Icons.label_off,\r\n      'label_outline': Icons.label_outline,\r\n      'lan': Icons.lan,\r\n      'landscape': Icons.landscape,\r\n      'landslide': Icons.landslide,\r\n      'language': Icons.language,\r\n      'laptop': Icons.laptop,\r\n      'laptop_chromebook': Icons.laptop_chromebook,\r\n      'laptop_mac': Icons.laptop_mac,\r\n      'laptop_windows': Icons.laptop_windows,\r\n      'last_page': Icons.last_page,\r\n      'launch': Icons.launch,\r\n      'layers': Icons.layers,\r\n      'layers_clear': Icons.layers_clear,\r\n      'leaderboard': Icons.leaderboard,\r\n      'leak_add': Icons.leak_add,\r\n      'leak_remove': Icons.leak_remove,\r\n      'legend_toggle': Icons.legend_toggle,\r\n      'lens': Icons.lens,\r\n      'lens_blur': Icons.lens_blur,\r\n      'library_add': Icons.library_add,\r\n      'library_add_check': Icons.library_add_check,\r\n      'library_books': Icons.library_books,\r\n      'library_music': Icons.library_music,\r\n      'light': Icons.light,\r\n      'light_mode': Icons.light_mode,\r\n      'lightbulb': Icons.lightbulb,\r\n      'lightbulb_outline': Icons.lightbulb_outline,\r\n      'line_axis': Icons.line_axis,\r\n      'line_style': Icons.line_style,\r\n      'line_weight': Icons.line_weight,\r\n      'linear_scale': Icons.linear_scale,\r\n      'link': Icons.link,\r\n      'link_off': Icons.link_off,\r\n      'linked_camera': Icons.linked_camera,\r\n      'liquor': Icons.liquor,\r\n      'list': Icons.list,\r\n      'list_alt': Icons.list_alt,\r\n      'live_help': Icons.live_help,\r\n      'live_tv': Icons.live_tv,\r\n      'living': Icons.living,\r\n      'local_activity': Icons.local_activity,\r\n      'local_airport': Icons.local_airport,\r\n      'local_atm': Icons.local_atm,\r\n      'local_bar': Icons.local_bar,\r\n      'local_cafe': Icons.local_cafe,\r\n      'local_car_wash': Icons.local_car_wash,\r\n      'local_convenience_store': Icons.local_convenience_store,\r\n      'local_dining': Icons.local_dining,\r\n      'local_drink': Icons.local_drink,\r\n      'local_fire_department': Icons.local_fire_department,\r\n      'local_fire_department_outlined': Icons.local_fire_department_outlined,\r\n      'local_florist': Icons.local_florist,\r\n      'local_gas_station': Icons.local_gas_station,\r\n      'local_grocery_store': Icons.local_grocery_store,\r\n      'local_hospital': Icons.local_hospital,\r\n      'local_hotel': Icons.local_hotel,\r\n      'local_laundry_service': Icons.local_laundry_service,\r\n      'local_library': Icons.local_library,\r\n      'local_mall': Icons.local_mall,\r\n      'local_movies': Icons.local_movies,\r\n      'local_offer': Icons.local_offer,\r\n      'local_parking': Icons.local_parking,\r\n      'local_pharmacy': Icons.local_pharmacy,\r\n      'local_phone': Icons.local_phone,\r\n      'local_pizza': Icons.local_pizza,\r\n      'local_play': Icons.local_play,\r\n      'local_police': Icons.local_police,\r\n      'local_post_office': Icons.local_post_office,\r\n      'local_printshop': Icons.local_printshop,\r\n      'local_see': Icons.local_see,\r\n      'local_shipping': Icons.local_shipping,\r\n      'local_taxi': Icons.local_taxi,\r\n      'location_city': Icons.location_city,\r\n      'location_disabled': Icons.location_disabled,\r\n      'location_history': Icons.location_history,\r\n      'location_off': Icons.location_off,\r\n      'location_on': Icons.location_on,\r\n      'location_pin': Icons.location_pin,\r\n      'location_searching': Icons.location_searching,\r\n      'lock': Icons.lock,\r\n      'lock_clock': Icons.lock_clock,\r\n      'lock_open': Icons.lock_open,\r\n      'lock_outline': Icons.lock_outline,\r\n      'lock_person': Icons.lock_person,\r\n      'lock_reset': Icons.lock_reset,\r\n      'login': Icons.login,\r\n      'logo_dev': Icons.logo_dev,\r\n      'logout': Icons.logout,\r\n      'looks': Icons.looks,\r\n      'looks_3': Icons.looks_3,\r\n      'looks_4': Icons.looks_4,\r\n      'looks_5': Icons.looks_5,\r\n      'looks_6': Icons.looks_6,\r\n      'looks_one': Icons.looks_one,\r\n      'looks_two': Icons.looks_two,\r\n      'loop': Icons.loop,\r\n      'loupe': Icons.loupe,\r\n      'low_priority': Icons.low_priority,\r\n      'loyalty': Icons.loyalty,\r\n      'lte_mobiledata': Icons.lte_mobiledata,\r\n      'lte_plus_mobiledata': Icons.lte_plus_mobiledata,\r\n      'luggage': Icons.luggage,\r\n      'lunch_dining': Icons.lunch_dining,\r\n\r\n      // M\r\n      'mail': Icons.mail,\r\n      'mail_lock': Icons.mail_lock,\r\n      'mail_outline': Icons.mail_outline,\r\n      'male': Icons.male,\r\n      'man': Icons.man,\r\n      'manage_accounts': Icons.manage_accounts,\r\n      'manage_history': Icons.manage_history,\r\n      'manage_search': Icons.manage_search,\r\n      'map': Icons.map,\r\n      'maps_home_work': Icons.maps_home_work,\r\n      'maps_ugc': Icons.maps_ugc,\r\n      'margin': Icons.margin,\r\n      'mark_as_unread': Icons.mark_as_unread,\r\n      'mark_chat_read': Icons.mark_chat_read,\r\n      'mark_chat_unread': Icons.mark_chat_unread,\r\n      'mark_email_read': Icons.mark_email_read,\r\n      'mark_email_unread': Icons.mark_email_unread,\r\n      'mark_unread_chat_alt': Icons.mark_unread_chat_alt,\r\n      'markunread': Icons.markunread,\r\n      'markunread_mailbox': Icons.markunread_mailbox,\r\n      'masks': Icons.masks,\r\n      'maximize': Icons.maximize,\r\n      'media_bluetooth_off': Icons.media_bluetooth_off,\r\n      'media_bluetooth_on': Icons.media_bluetooth_on,\r\n      'mediation': Icons.mediation,\r\n      'medical_information': Icons.medical_information,\r\n      'medical_services': Icons.medical_services,\r\n      'medication': Icons.medication,\r\n      'medication_liquid': Icons.medication_liquid,\r\n      'meeting_room': Icons.meeting_room,\r\n      'memory': Icons.memory,\r\n      'menu': Icons.menu,\r\n      'menu_book': Icons.menu_book,\r\n      'menu_open': Icons.menu_open,\r\n      'merge': Icons.merge,\r\n      'merge_type': Icons.merge_type,\r\n      'message': Icons.message,\r\n      'messenger': Icons.messenger,\r\n      'messenger_outline': Icons.messenger_outline,\r\n      'mic': Icons.mic,\r\n      'mic_external_off': Icons.mic_external_off,\r\n      'mic_external_on': Icons.mic_external_on,\r\n      'mic_none': Icons.mic_none,\r\n      'mic_off': Icons.mic_off,\r\n      'microwave': Icons.microwave,\r\n      'military_tech': Icons.military_tech,\r\n      'minimize': Icons.minimize,\r\n      'minor_crash': Icons.minor_crash,\r\n      'miscellaneous_services': Icons.miscellaneous_services,\r\n      'missed_video_call': Icons.missed_video_call,\r\n      'mms': Icons.mms,\r\n      'mobile_friendly': Icons.mobile_friendly,\r\n      'mobile_off': Icons.mobile_off,\r\n      'mobile_screen_share': Icons.mobile_screen_share,\r\n      'mobiledata_off': Icons.mobiledata_off,\r\n      'mode': Icons.mode,\r\n      'mode_comment': Icons.mode_comment,\r\n      'mode_edit': Icons.mode_edit,\r\n      'mode_edit_outline': Icons.mode_edit_outline,\r\n      'mode_fan_off': Icons.mode_fan_off,\r\n      'mode_night': Icons.mode_night,\r\n      'mode_of_travel': Icons.mode_of_travel,\r\n      'mode_standby': Icons.mode_standby,\r\n      'model_training': Icons.model_training,\r\n      'monetization_on': Icons.monetization_on,\r\n      'money': Icons.money,\r\n      'money_off': Icons.money_off,\r\n      'money_off_csred': Icons.money_off_csred,\r\n      'monitor': Icons.monitor,\r\n      'monitor_heart': Icons.monitor_heart,\r\n      'monitor_weight': Icons.monitor_weight,\r\n      'monochrome_photos': Icons.monochrome_photos,\r\n      'mood': Icons.mood,\r\n      'mood_bad': Icons.mood_bad,\r\n      'moped': Icons.moped,\r\n      'more': Icons.more,\r\n      'more_horiz': Icons.more_horiz,\r\n      'more_time': Icons.more_time,\r\n      'more_vert': Icons.more_vert,\r\n      'mosque': Icons.mosque,\r\n      'motion_photos_auto': Icons.motion_photos_auto,\r\n      'motion_photos_off': Icons.motion_photos_off,\r\n      'motion_photos_on': Icons.motion_photos_on,\r\n      'motion_photos_pause': Icons.motion_photos_pause,\r\n      'motion_photos_paused': Icons.motion_photos_paused,\r\n      'motorcycle': Icons.motorcycle,\r\n      'mouse': Icons.mouse,\r\n      'move_down': Icons.move_down,\r\n      'move_to_inbox': Icons.move_to_inbox,\r\n      'move_up': Icons.move_up,\r\n      'movie': Icons.movie,\r\n      'movie_creation': Icons.movie_creation,\r\n      'movie_filter': Icons.movie_filter,\r\n      'moving': Icons.moving,\r\n      'mp': Icons.mp,\r\n      'multiline_chart': Icons.multiline_chart,\r\n      'multiple_stop': Icons.multiple_stop,\r\n      'museum': Icons.museum,\r\n      'music_note': Icons.music_note,\r\n      'music_off': Icons.music_off,\r\n      'music_video': Icons.music_video,\r\n      'my_library_add': Icons.my_library_add,\r\n      'my_library_books': Icons.my_library_books,\r\n      'my_library_music': Icons.my_library_music,\r\n      'my_location': Icons.my_location,\r\n\r\n      // N\r\n      'nat': Icons.nat,\r\n      'nature': Icons.nature,\r\n      'nature_people': Icons.nature_people,\r\n      'navigate_before': Icons.navigate_before,\r\n      'navigate_next': Icons.navigate_next,\r\n      'navigation': Icons.navigation,\r\n      'near_me': Icons.near_me,\r\n      'near_me_disabled': Icons.near_me_disabled,\r\n      'nearby_error': Icons.nearby_error,\r\n      'nearby_off': Icons.nearby_off,\r\n      'nest_cam_wired_stand': Icons.nest_cam_wired_stand,\r\n      'network_cell': Icons.network_cell,\r\n      'network_check': Icons.network_check,\r\n      'network_locked': Icons.network_locked,\r\n      'network_ping': Icons.network_ping,\r\n      'network_wifi': Icons.network_wifi,\r\n      'network_wifi_1_bar': Icons.network_wifi_1_bar,\r\n      'network_wifi_2_bar': Icons.network_wifi_2_bar,\r\n      'network_wifi_3_bar': Icons.network_wifi_3_bar,\r\n      'new_label': Icons.new_label,\r\n      'new_releases': Icons.new_releases,\r\n      'newspaper': Icons.newspaper,\r\n      'next_plan': Icons.next_plan,\r\n      'next_week': Icons.next_week,\r\n      'nfc': Icons.nfc,\r\n      'night_shelter': Icons.night_shelter,\r\n      'nightlife': Icons.nightlife,\r\n      'nightlight': Icons.nightlight,\r\n      'nightlight_round': Icons.nightlight_round,\r\n      'nights_stay': Icons.nights_stay,\r\n      'no_accounts': Icons.no_accounts,\r\n      'no_adult_content': Icons.no_adult_content,\r\n      'no_backpack': Icons.no_backpack,\r\n      'no_cell': Icons.no_cell,\r\n      'no_crash': Icons.no_crash,\r\n      'no_drinks': Icons.no_drinks,\r\n      'no_encryption': Icons.no_encryption,\r\n      'no_encryption_gmailerrorred': Icons.no_encryption_gmailerrorred,\r\n      'no_flash': Icons.no_flash,\r\n      'no_food': Icons.no_food,\r\n      'no_luggage': Icons.no_luggage,\r\n      'no_meals': Icons.no_meals,\r\n      'no_meeting_room': Icons.no_meeting_room,\r\n      'no_photography': Icons.no_photography,\r\n      'no_sim': Icons.no_sim,\r\n      'no_stroller': Icons.no_stroller,\r\n      'no_transfer': Icons.no_transfer,\r\n      'noise_aware': Icons.noise_aware,\r\n      'noise_control_off': Icons.noise_control_off,\r\n      'nordic_walking': Icons.nordic_walking,\r\n      'north': Icons.north,\r\n      'north_east': Icons.north_east,\r\n      'north_west': Icons.north_west,\r\n      'not_accessible': Icons.not_accessible,\r\n      'not_interested': Icons.not_interested,\r\n      'not_listed_location': Icons.not_listed_location,\r\n      'not_started': Icons.not_started,\r\n      'note': Icons.note,\r\n      'note_add': Icons.note_add,\r\n      'note_alt': Icons.note_alt,\r\n      'notes': Icons.notes,\r\n      'notification_add': Icons.notification_add,\r\n      'notification_important': Icons.notification_important,\r\n      'notifications': Icons.notifications,\r\n      'notifications_active': Icons.notifications_active,\r\n      'notifications_none': Icons.notifications_none,\r\n      'notifications_off': Icons.notifications_off,\r\n      'notifications_on': Icons.notifications_on,\r\n      'notifications_outlined': Icons.notifications_outlined,\r\n      'notifications_paused': Icons.notifications_paused,\r\n      'now_wallpaper': Icons.now_wallpaper,\r\n      'now_widgets': Icons.now_widgets,\r\n      'numbers': Icons.numbers,\r\n\r\n      // O\r\n      'offline_bolt': Icons.offline_bolt,\r\n      'offline_pin': Icons.offline_pin,\r\n      'offline_share': Icons.offline_share,\r\n      'oil_barrel': Icons.oil_barrel,\r\n      'on_device_training': Icons.on_device_training,\r\n      'ondemand_video': Icons.ondemand_video,\r\n      'one_k': Icons.one_k,\r\n      'one_k_plus': Icons.one_k_plus,\r\n      'one_x_mobiledata': Icons.one_x_mobiledata,\r\n      'online_prediction': Icons.online_prediction,\r\n      'opacity': Icons.opacity,\r\n      'open_in_browser': Icons.open_in_browser,\r\n      'open_in_full': Icons.open_in_full,\r\n      'open_in_new': Icons.open_in_new,\r\n      'open_in_new_off': Icons.open_in_new_off,\r\n      'open_with': Icons.open_with,\r\n      'other_houses': Icons.other_houses,\r\n      'outbound': Icons.outbound,\r\n      'outbox': Icons.outbox,\r\n      'outdoor_grill': Icons.outdoor_grill,\r\n      'outgoing_mail': Icons.outgoing_mail,\r\n      'outlet': Icons.outlet,\r\n      'outlined_flag': Icons.outlined_flag,\r\n      'output': Icons.output,\r\n      'padding': Icons.padding,\r\n\r\n      // P\r\n      'pages': Icons.pages,\r\n      'pageview': Icons.pageview,\r\n      'paid': Icons.paid,\r\n      'palette': Icons.palette,\r\n      'pan_tool': Icons.pan_tool,\r\n      'pan_tool_alt': Icons.pan_tool_alt,\r\n      'panorama': Icons.panorama,\r\n      'panorama_fish_eye': Icons.panorama_fish_eye,\r\n      'panorama_horizontal': Icons.panorama_horizontal,\r\n      'panorama_horizontal_select': Icons.panorama_horizontal_select,\r\n      'panorama_photosphere': Icons.panorama_photosphere,\r\n      'panorama_photosphere_select': Icons.panorama_photosphere_select,\r\n      'panorama_vertical': Icons.panorama_vertical,\r\n      'panorama_vertical_select': Icons.panorama_vertical_select,\r\n      'panorama_wide_angle': Icons.panorama_wide_angle,\r\n      'panorama_wide_angle_select': Icons.panorama_wide_angle_select,\r\n      'paragliding': Icons.paragliding,\r\n      'park': Icons.park,\r\n      'party_mode': Icons.party_mode,\r\n      'password': Icons.password,\r\n      'paste': Icons.paste,\r\n      'pattern': Icons.pattern,\r\n      'pause': Icons.pause,\r\n      'pause_circle': Icons.pause_circle,\r\n      'pause_circle_filled': Icons.pause_circle_filled,\r\n      'pause_circle_outline': Icons.pause_circle_outline,\r\n      'pause_presentation': Icons.pause_presentation,\r\n      'payment': Icons.payment,\r\n      'payments': Icons.payments,\r\n      'paypal': Icons.paypal,\r\n      'pedal_bike': Icons.pedal_bike,\r\n      'pending': Icons.pending,\r\n      'pending_actions': Icons.pending_actions,\r\n      'pentagon': Icons.pentagon,\r\n      'people': Icons.people,\r\n      'people_alt': Icons.people_alt,\r\n      'people_outline': Icons.people_outline,\r\n      'percent': Icons.percent,\r\n      'perm_camera_mic': Icons.perm_camera_mic,\r\n      'perm_contact_calendar': Icons.perm_contact_calendar,\r\n      'perm_data_setting': Icons.perm_data_setting,\r\n      'perm_device_information': Icons.perm_device_information,\r\n      'perm_identity': Icons.perm_identity,\r\n      'perm_media': Icons.perm_media,\r\n      'perm_phone_msg': Icons.perm_phone_msg,\r\n      'perm_scan_wifi': Icons.perm_scan_wifi,\r\n      'person': Icons.person,\r\n      'person_2': Icons.person_2,\r\n      'person_3': Icons.person_3,\r\n      'person_4': Icons.person_4,\r\n      'person_add': Icons.person_add,\r\n      'person_add_alt': Icons.person_add_alt,\r\n      'person_add_alt_1': Icons.person_add_alt_1,\r\n      'person_add_disabled': Icons.person_add_disabled,\r\n      'person_off': Icons.person_off,\r\n      'person_outline': Icons.person_outline,\r\n      'person_pin': Icons.person_pin,\r\n      'person_pin_circle': Icons.person_pin_circle,\r\n      'person_remove': Icons.person_remove,\r\n      'person_remove_alt_1': Icons.person_remove_alt_1,\r\n      'person_search': Icons.person_search,\r\n      'personal_injury': Icons.personal_injury,\r\n      'personal_video': Icons.personal_video,\r\n      'pest_control': Icons.pest_control,\r\n      'pest_control_rodent': Icons.pest_control_rodent,\r\n      'pets': Icons.pets,\r\n      'phishing': Icons.phishing,\r\n      'phone': Icons.phone,\r\n      'phone_android': Icons.phone_android,\r\n      'phone_bluetooth_speaker': Icons.phone_bluetooth_speaker,\r\n      'phone_callback': Icons.phone_callback,\r\n      'phone_disabled': Icons.phone_disabled,\r\n      'phone_enabled': Icons.phone_enabled,\r\n      'phone_forwarded': Icons.phone_forwarded,\r\n      'phone_in_talk': Icons.phone_in_talk,\r\n      'phone_iphone': Icons.phone_iphone,\r\n      'phone_locked': Icons.phone_locked,\r\n      'phone_missed': Icons.phone_missed,\r\n      'phone_paused': Icons.phone_paused,\r\n      'phonelink': Icons.phonelink,\r\n      'phonelink_erase': Icons.phonelink_erase,\r\n      'phonelink_lock': Icons.phonelink_lock,\r\n      'phonelink_off': Icons.phonelink_off,\r\n      'phonelink_ring': Icons.phonelink_ring,\r\n      'phonelink_setup': Icons.phonelink_setup,\r\n      'photo': Icons.photo,\r\n      'photo_album': Icons.photo_album,\r\n      'photo_camera': Icons.photo_camera,\r\n      'photo_camera_back': Icons.photo_camera_back,\r\n      'photo_camera_front': Icons.photo_camera_front,\r\n      'photo_filter': Icons.photo_filter,\r\n      'photo_library': Icons.photo_library,\r\n      'photo_size_select_actual': Icons.photo_size_select_actual,\r\n      'photo_size_select_large': Icons.photo_size_select_large,\r\n      'photo_size_select_small': Icons.photo_size_select_small,\r\n      'php': Icons.php,\r\n      'piano': Icons.piano,\r\n      'piano_off': Icons.piano_off,\r\n      'picture_as_pdf': Icons.picture_as_pdf,\r\n      'picture_in_picture': Icons.picture_in_picture,\r\n      'picture_in_picture_alt': Icons.picture_in_picture_alt,\r\n      'pie_chart': Icons.pie_chart,\r\n      'pie_chart_outline': Icons.pie_chart_outline,\r\n      'pin': Icons.pin,\r\n      'pin_drop': Icons.pin_drop,\r\n      'pin_end': Icons.pin_end,\r\n      'pin_invoke': Icons.pin_invoke,\r\n      'pinch': Icons.pinch,\r\n      'pivot_table_chart': Icons.pivot_table_chart,\r\n      'pix': Icons.pix,\r\n      'place': Icons.place,\r\n      'plagiarism': Icons.plagiarism,\r\n      'play_arrow': Icons.play_arrow,\r\n      'play_circle': Icons.play_circle,\r\n      'play_circle_fill': Icons.play_circle_fill,\r\n      'play_circle_filled': Icons.play_circle_filled,\r\n      'play_circle_outline': Icons.play_circle_outline,\r\n      'play_disabled': Icons.play_disabled,\r\n      'play_for_work': Icons.play_for_work,\r\n      'play_lesson': Icons.play_lesson,\r\n      'playlist_add': Icons.playlist_add,\r\n      'playlist_add_check': Icons.playlist_add_check,\r\n      'playlist_add_check_circle': Icons.playlist_add_check_circle,\r\n      'playlist_add_circle': Icons.playlist_add_circle,\r\n      'playlist_play': Icons.playlist_play,\r\n      'playlist_remove': Icons.playlist_remove,\r\n      'plumbing': Icons.plumbing,\r\n      'plus_one': Icons.plus_one,\r\n      'podcasts': Icons.podcasts,\r\n      'point_of_sale': Icons.point_of_sale,\r\n      'policy': Icons.policy,\r\n      'poll': Icons.poll,\r\n      'polyline': Icons.polyline,\r\n      'polymer': Icons.polymer,\r\n      'pool': Icons.pool,\r\n      'portable_wifi_off': Icons.portable_wifi_off,\r\n      'portrait': Icons.portrait,\r\n      'post_add': Icons.post_add,\r\n      'power': Icons.power,\r\n      'power_input': Icons.power_input,\r\n      'power_off': Icons.power_off,\r\n      'power_settings_new': Icons.power_settings_new,\r\n      'precision_manufacturing': Icons.precision_manufacturing,\r\n      'pregnant_woman': Icons.pregnant_woman,\r\n      'present_to_all': Icons.present_to_all,\r\n      'preview': Icons.preview,\r\n      'price_change': Icons.price_change,\r\n      'price_check': Icons.price_check,\r\n      'print': Icons.print,\r\n      'print_disabled': Icons.print_disabled,\r\n      'priority_high': Icons.priority_high,\r\n      'privacy_tip': Icons.privacy_tip,\r\n      'privacy_tip_outlined': Icons.privacy_tip_outlined,\r\n      'private_connectivity': Icons.private_connectivity,\r\n      'production_quantity_limits': Icons.production_quantity_limits,\r\n      'propane': Icons.propane,\r\n      'propane_tank': Icons.propane_tank,\r\n      'psychology': Icons.psychology,\r\n      'psychology_alt': Icons.psychology_alt,\r\n      'public': Icons.public,\r\n      'public_off': Icons.public_off,\r\n      'publish': Icons.publish,\r\n      'published_with_changes': Icons.published_with_changes,\r\n      'punch_clock': Icons.punch_clock,\r\n      'push_pin': Icons.push_pin,\r\n      'qr_code': Icons.qr_code,\r\n\r\n      // Q\r\n      'qr_code_2': Icons.qr_code_2,\r\n      'qr_code_scanner': Icons.qr_code_scanner,\r\n      'query_builder': Icons.query_builder,\r\n      'query_stats': Icons.query_stats,\r\n      'question_answer': Icons.question_answer,\r\n      'question_mark': Icons.question_mark,\r\n      'queue': Icons.queue,\r\n      'queue_music': Icons.queue_music,\r\n      'queue_play_next': Icons.queue_play_next,\r\n      'quickreply': Icons.quickreply,\r\n      'quiz': Icons.quiz,\r\n\r\n      // R\r\n      'r_mobiledata': Icons.r_mobiledata,\r\n      'radar': Icons.radar,\r\n      'radio': Icons.radio,\r\n      'radio_button_checked': Icons.radio_button_checked,\r\n      'radio_button_off': Icons.radio_button_off,\r\n      'radio_button_on': Icons.radio_button_on,\r\n      'radio_button_unchecked': Icons.radio_button_unchecked,\r\n      'railway_alert': Icons.railway_alert,\r\n      'ramen_dining': Icons.ramen_dining,\r\n      'ramp_left': Icons.ramp_left,\r\n      'ramp_right': Icons.ramp_right,\r\n      'rate_review': Icons.rate_review,\r\n      'raw_off': Icons.raw_off,\r\n      'raw_on': Icons.raw_on,\r\n      'read_more': Icons.read_more,\r\n      'real_estate_agent': Icons.real_estate_agent,\r\n      'receipt': Icons.receipt,\r\n      'receipt_long': Icons.receipt_long,\r\n      'recent_actors': Icons.recent_actors,\r\n      'recommend': Icons.recommend,\r\n      'record_voice_over': Icons.record_voice_over,\r\n      'rectangle': Icons.rectangle,\r\n      'recycling': Icons.recycling,\r\n      'redeem': Icons.redeem,\r\n      'redo': Icons.redo,\r\n      'reduce_capacity': Icons.reduce_capacity,\r\n      'refresh': Icons.refresh,\r\n      'remember_me': Icons.remember_me,\r\n      'remove': Icons.remove,\r\n      'remove_circle': Icons.remove_circle,\r\n      'remove_circle_outline': Icons.remove_circle_outline,\r\n      'remove_done': Icons.remove_done,\r\n      'remove_from_queue': Icons.remove_from_queue,\r\n      'remove_moderator': Icons.remove_moderator,\r\n      'remove_red_eye': Icons.remove_red_eye,\r\n      'remove_red_eye_outlined': Icons.remove_red_eye_outlined,\r\n      'remove_shopping_cart': Icons.remove_shopping_cart,\r\n      'reorder': Icons.reorder,\r\n      'repartition': Icons.repartition,\r\n      'repeat': Icons.repeat,\r\n      'repeat_on': Icons.repeat_on,\r\n      'repeat_one': Icons.repeat_one,\r\n      'repeat_one_on': Icons.repeat_one_on,\r\n      'replay': Icons.replay,\r\n      'replay_10': Icons.replay_10,\r\n      'replay_30': Icons.replay_30,\r\n      'replay_5': Icons.replay_5,\r\n      'replay_circle_filled': Icons.replay_circle_filled,\r\n      'reply': Icons.reply,\r\n      'reply_all': Icons.reply_all,\r\n      'report': Icons.report,\r\n      'report_gmailerrorred': Icons.report_gmailerrorred,\r\n      'report_off': Icons.report_off,\r\n      'report_problem': Icons.report_problem,\r\n      'request_page': Icons.request_page,\r\n      'request_quote': Icons.request_quote,\r\n      'reset_tv': Icons.reset_tv,\r\n      'restart_alt': Icons.restart_alt,\r\n      'restaurant': Icons.restaurant,\r\n      'restaurant_menu': Icons.restaurant_menu,\r\n      'restore': Icons.restore,\r\n      'restore_from_trash': Icons.restore_from_trash,\r\n      'restore_page': Icons.restore_page,\r\n      'reviews': Icons.reviews,\r\n      'rice_bowl': Icons.rice_bowl,\r\n      'ring_volume': Icons.ring_volume,\r\n      'rocket': Icons.rocket,\r\n      'rocket_launch': Icons.rocket_launch,\r\n      'roller_shades': Icons.roller_shades,\r\n      'roller_shades_closed': Icons.roller_shades_closed,\r\n      'roller_skating': Icons.roller_skating,\r\n      'roofing': Icons.roofing,\r\n      'room': Icons.room,\r\n      'room_preferences': Icons.room_preferences,\r\n      'room_service': Icons.room_service,\r\n      'rotate_90_degrees_ccw': Icons.rotate_90_degrees_ccw,\r\n      'rotate_90_degrees_cw': Icons.rotate_90_degrees_cw,\r\n      'rotate_left': Icons.rotate_left,\r\n      'rotate_right': Icons.rotate_right,\r\n      'roundabout_left': Icons.roundabout_left,\r\n      'roundabout_right': Icons.roundabout_right,\r\n      'rounded_corner': Icons.rounded_corner,\r\n      'route': Icons.route,\r\n      'router': Icons.router,\r\n      'rowing': Icons.rowing,\r\n      'rss_feed': Icons.rss_feed,\r\n      'rsvp': Icons.rsvp,\r\n      'rtt': Icons.rtt,\r\n      'rule': Icons.rule,\r\n      'rule_folder': Icons.rule_folder,\r\n      'run_circle': Icons.run_circle,\r\n      'running_with_errors': Icons.running_with_errors,\r\n      'rv_hookup': Icons.rv_hookup,\r\n\r\n      // S\r\n      'safety_check': Icons.safety_check,\r\n      'safety_divider': Icons.safety_divider,\r\n      'sailing': Icons.sailing,\r\n      'sanitizer': Icons.sanitizer,\r\n      'satellite': Icons.satellite,\r\n      'satellite_alt': Icons.satellite_alt,\r\n      'save': Icons.save,\r\n      'save_alt': Icons.save_alt,\r\n      'save_as': Icons.save_as,\r\n      'saved_search': Icons.saved_search,\r\n      'savings': Icons.savings,\r\n      'scale': Icons.scale,\r\n      'scanner': Icons.scanner,\r\n      'scatter_plot': Icons.scatter_plot,\r\n      'schedule': Icons.schedule,\r\n      'schedule_send': Icons.schedule_send,\r\n      'schema': Icons.schema,\r\n      'school': Icons.school,\r\n      'science': Icons.science,\r\n      'score': Icons.score,\r\n      'scoreboard': Icons.scoreboard,\r\n      'screen_lock_landscape': Icons.screen_lock_landscape,\r\n      'screen_lock_portrait': Icons.screen_lock_portrait,\r\n      'screen_lock_rotation': Icons.screen_lock_rotation,\r\n      'screen_rotation': Icons.screen_rotation,\r\n      'screen_rotation_alt': Icons.screen_rotation_alt,\r\n      'screen_search_desktop': Icons.screen_search_desktop,\r\n      'screen_share': Icons.screen_share,\r\n      'screenshot': Icons.screenshot,\r\n      'screenshot_monitor': Icons.screenshot_monitor,\r\n      'scuba_diving': Icons.scuba_diving,\r\n      'sd': Icons.sd,\r\n      'sd_card': Icons.sd_card,\r\n      'sd_card_alert': Icons.sd_card_alert,\r\n      'sd_storage': Icons.sd_storage,\r\n      'search': Icons.search,\r\n      'search_off': Icons.search_off,\r\n      'security': Icons.security,\r\n      'security_update': Icons.security_update,\r\n      'security_update_good': Icons.security_update_good,\r\n      'security_update_warning': Icons.security_update_warning,\r\n      'segment': Icons.segment,\r\n      'select_all': Icons.select_all,\r\n      'self_improvement': Icons.self_improvement,\r\n      'sell': Icons.sell,\r\n      'send': Icons.send,\r\n      'send_and_archive': Icons.send_and_archive,\r\n      'send_time_extension': Icons.send_time_extension,\r\n      'send_to_mobile': Icons.send_to_mobile,\r\n      'sensor_door': Icons.sensor_door,\r\n      'sensor_occupied': Icons.sensor_occupied,\r\n      'sensor_window': Icons.sensor_window,\r\n      'sensors': Icons.sensors,\r\n      'sensors_off': Icons.sensors_off,\r\n      'sentiment_dissatisfied': Icons.sentiment_dissatisfied,\r\n      'sentiment_neutral': Icons.sentiment_neutral,\r\n      'sentiment_satisfied': Icons.sentiment_satisfied,\r\n      'sentiment_satisfied_alt': Icons.sentiment_satisfied_alt,\r\n      'sentiment_very_dissatisfied': Icons.sentiment_very_dissatisfied,\r\n      'sentiment_very_satisfied': Icons.sentiment_very_satisfied,\r\n      'set_meal': Icons.set_meal,\r\n      'settings': Icons.settings,\r\n      'settings_accessibility': Icons.settings_accessibility,\r\n      'settings_applications': Icons.settings_applications,\r\n      'settings_backup_restore': Icons.settings_backup_restore,\r\n      'settings_bluetooth': Icons.settings_bluetooth,\r\n      'settings_brightness': Icons.settings_brightness,\r\n      'settings_cell': Icons.settings_cell,\r\n      'settings_display': Icons.settings_display,\r\n      'settings_ethernet': Icons.settings_ethernet,\r\n      'settings_input_antenna': Icons.settings_input_antenna,\r\n      'settings_input_component': Icons.settings_input_component,\r\n      'settings_input_composite': Icons.settings_input_composite,\r\n      'settings_input_hdmi': Icons.settings_input_hdmi,\r\n      'settings_input_svideo': Icons.settings_input_svideo,\r\n      'settings_overscan': Icons.settings_overscan,\r\n      'settings_phone': Icons.settings_phone,\r\n      'settings_power': Icons.settings_power,\r\n      'settings_remote': Icons.settings_remote,\r\n      'settings_suggest': Icons.settings_suggest,\r\n      'settings_system_daydream': Icons.settings_system_daydream,\r\n      'settings_voice': Icons.settings_voice,\r\n      'severe_cold': Icons.severe_cold,\r\n      'shape_line': Icons.shape_line,\r\n      'share': Icons.share,\r\n      'share_location': Icons.share_location,\r\n      'shield': Icons.shield,\r\n      'shield_moon': Icons.shield_moon,\r\n      'shop': Icons.shop,\r\n      'shop_2': Icons.shop_2,\r\n      'shop_two': Icons.shop_two,\r\n      'shopping_bag': Icons.shopping_bag,\r\n      'shopping_basket': Icons.shopping_basket,\r\n      'shopping_cart': Icons.shopping_cart,\r\n      'shopping_cart_checkout': Icons.shopping_cart_checkout,\r\n      'short_text': Icons.short_text,\r\n      'shortcut': Icons.shortcut,\r\n      'show_chart': Icons.show_chart,\r\n      'shower': Icons.shower,\r\n      'shuffle': Icons.shuffle,\r\n      'shuffle_on': Icons.shuffle_on,\r\n      'shutter_speed': Icons.shutter_speed,\r\n      'sick': Icons.sick,\r\n      'sign_language': Icons.sign_language,\r\n      'signal_cellular_0_bar': Icons.signal_cellular_0_bar,\r\n      'signal_cellular_4_bar': Icons.signal_cellular_4_bar,\r\n      'signal_cellular_alt': Icons.signal_cellular_alt,\r\n      'signal_cellular_alt_1_bar': Icons.signal_cellular_alt_1_bar,\r\n      'signal_cellular_alt_2_bar': Icons.signal_cellular_alt_2_bar,\r\n      'signal_cellular_connected_no_internet_0_bar':\r\n          Icons.signal_cellular_connected_no_internet_0_bar,\r\n      'signal_cellular_connected_no_internet_4_bar':\r\n          Icons.signal_cellular_connected_no_internet_4_bar,\r\n      'signal_cellular_no_sim': Icons.signal_cellular_no_sim,\r\n      'signal_cellular_nodata': Icons.signal_cellular_nodata,\r\n      'signal_cellular_null': Icons.signal_cellular_null,\r\n      'signal_cellular_off': Icons.signal_cellular_off,\r\n      'signal_wifi_0_bar': Icons.signal_wifi_0_bar,\r\n      'signal_wifi_4_bar': Icons.signal_wifi_4_bar,\r\n      'signal_wifi_4_bar_lock': Icons.signal_wifi_4_bar_lock,\r\n      'signal_wifi_bad': Icons.signal_wifi_bad,\r\n      'signal_wifi_connected_no_internet_4':\r\n          Icons.signal_wifi_connected_no_internet_4,\r\n      'signal_wifi_off': Icons.signal_wifi_off,\r\n      'signal_wifi_statusbar_4_bar': Icons.signal_wifi_statusbar_4_bar,\r\n      'signal_wifi_statusbar_connected_no_internet_4':\r\n          Icons.signal_wifi_statusbar_connected_no_internet_4,\r\n      'signal_wifi_statusbar_null': Icons.signal_wifi_statusbar_null,\r\n      'signpost': Icons.signpost,\r\n      'sim_card': Icons.sim_card,\r\n      'sim_card_alert': Icons.sim_card_alert,\r\n      'sim_card_download': Icons.sim_card_download,\r\n      'single_bed': Icons.single_bed,\r\n      'sip': Icons.sip,\r\n      'skateboarding': Icons.skateboarding,\r\n      'skip_next': Icons.skip_next,\r\n      'skip_previous': Icons.skip_previous,\r\n      'sledding': Icons.sledding,\r\n      'slideshow': Icons.slideshow,\r\n      'slow_motion_video': Icons.slow_motion_video,\r\n      'smart_button': Icons.smart_button,\r\n      'smart_display': Icons.smart_display,\r\n      'smart_screen': Icons.smart_screen,\r\n      'smart_toy': Icons.smart_toy,\r\n      'smartphone': Icons.smartphone,\r\n      'smoke_free': Icons.smoke_free,\r\n      'smoking_rooms': Icons.smoking_rooms,\r\n      'sms': Icons.sms,\r\n      'sms_failed': Icons.sms_failed,\r\n      'snippet_folder': Icons.snippet_folder,\r\n      'snooze': Icons.snooze,\r\n      'snowboarding': Icons.snowboarding,\r\n      'snowmobile': Icons.snowmobile,\r\n      'snowshoeing': Icons.snowshoeing,\r\n      'soap': Icons.soap,\r\n      'social_distance': Icons.social_distance,\r\n      'solar_power': Icons.solar_power,\r\n      'sort': Icons.sort,\r\n      'sort_by_alpha': Icons.sort_by_alpha,\r\n      'sos': Icons.sos,\r\n      'soup_kitchen': Icons.soup_kitchen,\r\n      'source': Icons.source,\r\n      'south': Icons.south,\r\n      'south_america': Icons.south_america,\r\n      'south_east': Icons.south_east,\r\n      'south_west': Icons.south_west,\r\n      'spa': Icons.spa,\r\n      'space_bar': Icons.space_bar,\r\n      'space_dashboard': Icons.space_dashboard,\r\n      'spatial_audio': Icons.spatial_audio,\r\n      'spatial_audio_off': Icons.spatial_audio_off,\r\n      'spatial_tracking': Icons.spatial_tracking,\r\n      'speaker': Icons.speaker,\r\n      'speaker_group': Icons.speaker_group,\r\n      'speaker_notes': Icons.speaker_notes,\r\n      'speaker_notes_off': Icons.speaker_notes_off,\r\n      'speaker_phone': Icons.speaker_phone,\r\n      'speed': Icons.speed,\r\n      'spellcheck': Icons.spellcheck,\r\n      'splitscreen': Icons.splitscreen,\r\n      'spoke': Icons.spoke,\r\n      'sports': Icons.sports,\r\n      'sports_bar': Icons.sports_bar,\r\n      'sports_baseball': Icons.sports_baseball,\r\n      'sports_basketball': Icons.sports_basketball,\r\n      'sports_cricket': Icons.sports_cricket,\r\n      'sports_esports': Icons.sports_esports,\r\n      'sports_football': Icons.sports_football,\r\n      'sports_golf': Icons.sports_golf,\r\n      'sports_gymnastics': Icons.sports_gymnastics,\r\n      'sports_handball': Icons.sports_handball,\r\n      'sports_hockey': Icons.sports_hockey,\r\n      'sports_kabaddi': Icons.sports_kabaddi,\r\n      'sports_martial_arts': Icons.sports_martial_arts,\r\n      'sports_mma': Icons.sports_mma,\r\n      'sports_motorsports': Icons.sports_motorsports,\r\n      'sports_rugby': Icons.sports_rugby,\r\n      'sports_score': Icons.sports_score,\r\n      'sports_soccer': Icons.sports_soccer,\r\n      'sports_tennis': Icons.sports_tennis,\r\n      'sports_volleyball': Icons.sports_volleyball,\r\n      'square': Icons.square,\r\n      'square_foot': Icons.square_foot,\r\n      'ssid_chart': Icons.ssid_chart,\r\n      'stacked_bar_chart': Icons.stacked_bar_chart,\r\n      'stacked_line_chart': Icons.stacked_line_chart,\r\n      'stadium': Icons.stadium,\r\n      'stairs': Icons.stairs,\r\n      'star': Icons.star,\r\n      'star_border': Icons.star_border,\r\n      'star_border_purple500': Icons.star_border_purple500,\r\n      'star_half': Icons.star_half,\r\n      'star_outline': Icons.star_outline,\r\n      'star_purple500': Icons.star_purple500,\r\n      'star_rate': Icons.star_rate,\r\n      'stars': Icons.stars,\r\n      'start': Icons.start,\r\n      'stay_current_landscape': Icons.stay_current_landscape,\r\n      'stay_current_portrait': Icons.stay_current_portrait,\r\n      'stay_primary_landscape': Icons.stay_primary_landscape,\r\n      'stay_primary_portrait': Icons.stay_primary_portrait,\r\n      'sticky_note_2': Icons.sticky_note_2,\r\n      'stop': Icons.stop,\r\n      'stop_circle': Icons.stop_circle,\r\n      'stop_screen_share': Icons.stop_screen_share,\r\n      'storage': Icons.storage,\r\n      'store': Icons.store,\r\n      'store_mall_directory': Icons.store_mall_directory,\r\n      'storefront': Icons.storefront,\r\n      'storm': Icons.storm,\r\n      'straight': Icons.straight,\r\n      'straighten': Icons.straighten,\r\n      'stream': Icons.stream,\r\n      'streetview': Icons.streetview,\r\n      'strikethrough_s': Icons.strikethrough_s,\r\n      'stroller': Icons.stroller,\r\n      'style': Icons.style,\r\n      'subdirectory_arrow_left': Icons.subdirectory_arrow_left,\r\n      'subdirectory_arrow_right': Icons.subdirectory_arrow_right,\r\n      'subject': Icons.subject,\r\n      'subscript': Icons.subscript,\r\n      'subscriptions': Icons.subscriptions,\r\n      'subtitles': Icons.subtitles,\r\n      'subtitles_off': Icons.subtitles_off,\r\n      'subway': Icons.subway,\r\n      'summarize': Icons.summarize,\r\n      'superscript': Icons.superscript,\r\n      'supervised_user_circle': Icons.supervised_user_circle,\r\n      'supervisor_account': Icons.supervisor_account,\r\n      'support': Icons.support,\r\n      'support_agent': Icons.support_agent,\r\n      'surfing': Icons.surfing,\r\n      'surround_sound': Icons.surround_sound,\r\n      'swap_calls': Icons.swap_calls,\r\n      'swap_horiz': Icons.swap_horiz,\r\n      'swap_horizontal_circle': Icons.swap_horizontal_circle,\r\n      'swap_vert': Icons.swap_vert,\r\n      'swap_vertical_circle': Icons.swap_vertical_circle,\r\n      'swipe': Icons.swipe,\r\n      'swipe_down': Icons.swipe_down,\r\n      'swipe_down_alt': Icons.swipe_down_alt,\r\n      'swipe_left': Icons.swipe_left,\r\n      'swipe_left_alt': Icons.swipe_left_alt,\r\n      'swipe_right': Icons.swipe_right,\r\n      'swipe_right_alt': Icons.swipe_right_alt,\r\n      'swipe_up': Icons.swipe_up,\r\n      'swipe_up_alt': Icons.swipe_up_alt,\r\n      'swipe_vertical': Icons.swipe_vertical,\r\n      'switch_access_shortcut': Icons.switch_access_shortcut,\r\n      'switch_access_shortcut_add': Icons.switch_access_shortcut_add,\r\n      'switch_account': Icons.switch_account,\r\n      'switch_camera': Icons.switch_camera,\r\n      'switch_left': Icons.switch_left,\r\n      'switch_right': Icons.switch_right,\r\n      'switch_video': Icons.switch_video,\r\n      'synagogue': Icons.synagogue,\r\n      'sync': Icons.sync,\r\n      'sync_alt': Icons.sync_alt,\r\n      'sync_disabled': Icons.sync_disabled,\r\n      'sync_problem': Icons.sync_problem,\r\n      'system_security_update': Icons.system_security_update,\r\n      'system_security_update_good': Icons.system_security_update_good,\r\n      'system_security_update_warning': Icons.system_security_update_warning,\r\n      'system_update': Icons.system_update,\r\n      'system_update_alt': Icons.system_update_alt,\r\n\r\n      // T\r\n      'tab': Icons.tab,\r\n      'tab_unselected': Icons.tab_unselected,\r\n      'table_bar': Icons.table_bar,\r\n      'table_chart': Icons.table_chart,\r\n      'table_restaurant': Icons.table_restaurant,\r\n      'table_rows': Icons.table_rows,\r\n      'table_view': Icons.table_view,\r\n      'tablet': Icons.tablet,\r\n      'tablet_android': Icons.tablet_android,\r\n      'tablet_mac': Icons.tablet_mac,\r\n      'tag': Icons.tag,\r\n      'tag_faces': Icons.tag_faces,\r\n      'takeout_dining': Icons.takeout_dining,\r\n      'tap_and_play': Icons.tap_and_play,\r\n      'tapas': Icons.tapas,\r\n      'task': Icons.task,\r\n      'task_alt': Icons.task_alt,\r\n      'taxi_alert': Icons.taxi_alert,\r\n      'telegram': Icons.telegram,\r\n      'temple_buddhist': Icons.temple_buddhist,\r\n      'temple_hindu': Icons.temple_hindu,\r\n      'terminal': Icons.terminal,\r\n      'terrain': Icons.terrain,\r\n      'text_decrease': Icons.text_decrease,\r\n      'text_fields': Icons.text_fields,\r\n      'text_format': Icons.text_format,\r\n      'text_increase': Icons.text_increase,\r\n      'text_rotate_up': Icons.text_rotate_up,\r\n      'text_rotate_vertical': Icons.text_rotate_vertical,\r\n      'text_rotation_angledown': Icons.text_rotation_angledown,\r\n      'text_rotation_angleup': Icons.text_rotation_angleup,\r\n      'text_rotation_down': Icons.text_rotation_down,\r\n      'text_rotation_none': Icons.text_rotation_none,\r\n      'text_snippet': Icons.text_snippet,\r\n      'textsms': Icons.textsms,\r\n      'texture': Icons.texture,\r\n      'theater_comedy': Icons.theater_comedy,\r\n      'theaters': Icons.theaters,\r\n      'thermostat': Icons.thermostat,\r\n      'thermostat_auto': Icons.thermostat_auto,\r\n      'thumb_down': Icons.thumb_down,\r\n      'thumb_down_alt': Icons.thumb_down_alt,\r\n      'thumb_down_off_alt': Icons.thumb_down_off_alt,\r\n      'thumb_up': Icons.thumb_up,\r\n      'thumb_up_alt': Icons.thumb_up_alt,\r\n      'thumb_up_off_alt': Icons.thumb_up_off_alt,\r\n      'thumbs_up_down': Icons.thumbs_up_down,\r\n      'thunderstorm': Icons.thunderstorm,\r\n      'time_to_leave': Icons.time_to_leave,\r\n      'timelapse': Icons.timelapse,\r\n      'timeline': Icons.timeline,\r\n      'timer': Icons.timer,\r\n      'timer_10': Icons.timer_10,\r\n      'timer_10_select': Icons.timer_10_select,\r\n      'timer_3': Icons.timer_3,\r\n      'timer_3_select': Icons.timer_3_select,\r\n      'timer_off': Icons.timer_off,\r\n      'tips_and_updates': Icons.tips_and_updates,\r\n      'tire_repair': Icons.tire_repair,\r\n      'title': Icons.title,\r\n      'toc': Icons.toc,\r\n      'today': Icons.today,\r\n      'toggle_off': Icons.toggle_off,\r\n      'toggle_on': Icons.toggle_on,\r\n      'token': Icons.token,\r\n      'toll': Icons.toll,\r\n      'tonality': Icons.tonality,\r\n      'topic': Icons.topic,\r\n      'tornado': Icons.tornado,\r\n      'touch_app': Icons.touch_app,\r\n      'tour': Icons.tour,\r\n      'toys': Icons.toys,\r\n      'track_changes': Icons.track_changes,\r\n      'traffic': Icons.traffic,\r\n      'train': Icons.train,\r\n      'tram': Icons.tram,\r\n      'transcribe': Icons.transcribe,\r\n      'transfer_within_a_station': Icons.transfer_within_a_station,\r\n      'transform': Icons.transform,\r\n      'transgender': Icons.transgender,\r\n      'transit_enterexit': Icons.transit_enterexit,\r\n      'translate': Icons.translate,\r\n      'travel_explore': Icons.travel_explore,\r\n      'trending_down': Icons.trending_down,\r\n      'trending_flat': Icons.trending_flat,\r\n      'trending_up': Icons.trending_up,\r\n      'trip_origin': Icons.trip_origin,\r\n      'troubleshoot': Icons.troubleshoot,\r\n      'try': Icons.try_sms_star,\r\n      'tsunami': Icons.tsunami,\r\n      'tty': Icons.tty,\r\n      'tune': Icons.tune,\r\n      'tungsten': Icons.tungsten,\r\n      'turn_left': Icons.turn_left,\r\n      'turn_right': Icons.turn_right,\r\n      'turn_sharp_left': Icons.turn_sharp_left,\r\n      'turn_sharp_right': Icons.turn_sharp_right,\r\n      'turn_slight_left': Icons.turn_slight_left,\r\n      'turn_slight_right': Icons.turn_slight_right,\r\n      'turned_in': Icons.turned_in,\r\n      'turned_in_not': Icons.turned_in_not,\r\n      'tv': Icons.tv,\r\n      'tv_off': Icons.tv_off,\r\n      'two_wheeler': Icons.two_wheeler,\r\n      'type_specimen': Icons.type_specimen,\r\n\r\n      // U\r\n      'u_turn_left': Icons.u_turn_left,\r\n      'u_turn_right': Icons.u_turn_right,\r\n      'umbrella': Icons.umbrella,\r\n      'unarchive': Icons.unarchive,\r\n      'undo': Icons.undo,\r\n      'unfold_less': Icons.unfold_less,\r\n      'unfold_more': Icons.unfold_more,\r\n      'unpublished': Icons.unpublished,\r\n      'unsubscribe': Icons.unsubscribe,\r\n      'upcoming': Icons.upcoming,\r\n      'update': Icons.update,\r\n      'update_disabled': Icons.update_disabled,\r\n      'upgrade': Icons.upgrade,\r\n      'upload': Icons.upload,\r\n      'upload_file': Icons.upload_file,\r\n      'usb': Icons.usb,\r\n      'usb_off': Icons.usb_off,\r\n\r\n      // V\r\n      'verified': Icons.verified,\r\n      'verified_user': Icons.verified_user,\r\n      'vertical_align_bottom': Icons.vertical_align_bottom,\r\n      'vertical_align_center': Icons.vertical_align_center,\r\n      'vertical_align_top': Icons.vertical_align_top,\r\n      'vertical_distribute': Icons.vertical_distribute,\r\n      'vertical_split': Icons.vertical_split,\r\n      'vibration': Icons.vibration,\r\n      'video_call': Icons.video_call,\r\n      'video_camera_back': Icons.video_camera_back,\r\n      'video_camera_front': Icons.video_camera_front,\r\n      'video_chat': Icons.video_chat,\r\n      'video_collection': Icons.video_collection,\r\n      'video_file': Icons.video_file,\r\n      'video_label': Icons.video_label,\r\n      'video_library': Icons.video_library,\r\n      'video_settings': Icons.video_settings,\r\n      'video_stable': Icons.video_stable,\r\n      'videocam': Icons.videocam,\r\n      'videocam_off': Icons.videocam_off,\r\n      'videogame_asset': Icons.videogame_asset,\r\n      'videogame_asset_off': Icons.videogame_asset_off,\r\n      'view_agenda': Icons.view_agenda,\r\n      'view_array': Icons.view_array,\r\n      'view_carousel': Icons.view_carousel,\r\n      'view_column': Icons.view_column,\r\n      'view_comfortable': Icons.view_comfortable,\r\n      'view_comfy': Icons.view_comfy,\r\n      'view_comfy_alt': Icons.view_comfy_alt,\r\n      'view_compact': Icons.view_compact,\r\n      'view_compact_alt': Icons.view_compact_alt,\r\n      'view_cozy': Icons.view_cozy,\r\n      'view_day': Icons.view_day,\r\n      'view_headline': Icons.view_headline,\r\n      'view_in_ar': Icons.view_in_ar,\r\n      'view_kanban': Icons.view_kanban,\r\n      'view_list': Icons.view_list,\r\n      'view_module': Icons.view_module,\r\n      'view_quilt': Icons.view_quilt,\r\n      'view_sidebar': Icons.view_sidebar,\r\n      'view_stream': Icons.view_stream,\r\n      'view_timeline': Icons.view_timeline,\r\n      'view_week': Icons.view_week,\r\n      'vignette': Icons.vignette,\r\n      'villa': Icons.villa,\r\n      'visibility': Icons.visibility,\r\n      'visibility_off': Icons.visibility_off,\r\n      'voice_chat': Icons.voice_chat,\r\n      'voice_over_off': Icons.voice_over_off,\r\n      'voicemail': Icons.voicemail,\r\n      'volcano': Icons.volcano,\r\n      'volume_down': Icons.volume_down,\r\n      'volume_down_alt': Icons.volume_down_alt,\r\n      'volume_mute': Icons.volume_mute,\r\n      'volume_off': Icons.volume_off,\r\n      'volume_up': Icons.volume_up,\r\n      'volunteer_activism': Icons.volunteer_activism,\r\n      'vpn_key': Icons.vpn_key,\r\n      'vpn_key_off': Icons.vpn_key_off,\r\n      'vpn_lock': Icons.vpn_lock,\r\n\r\n      // W\r\n      'wallet': Icons.wallet,\r\n      'wallet_giftcard': Icons.wallet_giftcard,\r\n      'wallet_membership': Icons.wallet_membership,\r\n      'wallet_travel': Icons.wallet_travel,\r\n      'wallpaper': Icons.wallpaper,\r\n      'warehouse': Icons.warehouse,\r\n      'warning': Icons.warning,\r\n      'warning_amber': Icons.warning_amber,\r\n      'wash': Icons.wash,\r\n      'watch': Icons.watch,\r\n      'watch_later': Icons.watch_later,\r\n      'watch_off': Icons.watch_off,\r\n      'water': Icons.water,\r\n      'water_damage': Icons.water_damage,\r\n      'water_drop': Icons.water_drop,\r\n      'waterfall_chart': Icons.waterfall_chart,\r\n      'waves': Icons.waves,\r\n      'waving_hand': Icons.waving_hand,\r\n      'wb_auto': Icons.wb_auto,\r\n      'wb_cloudy': Icons.wb_cloudy,\r\n      'wb_incandescent': Icons.wb_incandescent,\r\n      'wb_iridescent': Icons.wb_iridescent,\r\n      'wb_shade': Icons.wb_shade,\r\n      'wb_sunny': Icons.wb_sunny,\r\n      'wb_twilight': Icons.wb_twilight,\r\n      'wc': Icons.wc,\r\n      'web': Icons.web,\r\n      'web_asset': Icons.web_asset,\r\n      'web_asset_off': Icons.web_asset_off,\r\n      'web_stories': Icons.web_stories,\r\n      'webhook': Icons.webhook,\r\n      'weekend': Icons.weekend,\r\n      'west': Icons.west,\r\n      'whatshot': Icons.whatshot,\r\n      'wheelchair_pickup': Icons.wheelchair_pickup,\r\n      'where_to_vote': Icons.where_to_vote,\r\n      'widgets': Icons.widgets,\r\n      'width_full': Icons.width_full,\r\n      'width_normal': Icons.width_normal,\r\n      'width_wide': Icons.width_wide,\r\n      'wifi': Icons.wifi,\r\n      'wifi_1_bar': Icons.wifi_1_bar,\r\n      'wifi_2_bar': Icons.wifi_2_bar,\r\n      'wifi_calling': Icons.wifi_calling,\r\n      'wifi_calling_3': Icons.wifi_calling_3,\r\n      'wifi_channel': Icons.wifi_channel,\r\n      'wifi_find': Icons.wifi_find,\r\n      'wifi_lock': Icons.wifi_lock,\r\n      'wifi_off': Icons.wifi_off,\r\n      'wifi_password': Icons.wifi_password,\r\n      'wifi_protected_setup': Icons.wifi_protected_setup,\r\n      'wifi_tethering': Icons.wifi_tethering,\r\n      'wifi_tethering_error': Icons.wifi_tethering_error,\r\n      'wifi_tethering_off': Icons.wifi_tethering_off,\r\n      'window': Icons.window,\r\n      'wine_bar': Icons.wine_bar,\r\n      'woman': Icons.woman,\r\n      'woman_2': Icons.woman_2,\r\n      'work': Icons.work,\r\n      'work_history': Icons.work_history,\r\n      'work_off': Icons.work_off,\r\n      'work_outline': Icons.work_outline,\r\n      'workspace_premium': Icons.workspace_premium,\r\n      'workspaces': Icons.workspaces,\r\n      'workspaces_filled': Icons.workspaces_filled,\r\n      'workspaces_outline': Icons.workspaces_outline,\r\n      'wrap_text': Icons.wrap_text,\r\n      'wrong_location': Icons.wrong_location,\r\n      'wysiwyg': Icons.wysiwyg,\r\n\r\n      // X-Z\r\n      'yard': Icons.yard,\r\n      'youtube_searched_for': Icons.youtube_searched_for,\r\n      'zoom_in': Icons.zoom_in,\r\n      'zoom_in_map': Icons.zoom_in_map,\r\n      'zoom_out': Icons.zoom_out,\r\n      'zoom_out_map': Icons.zoom_out_map,\r\n    };\r\n\r\n    // Check if the icon exists\r\n    if (iconMap.containsKey(iconName)) {\r\n      return Icon(\r\n        iconMap[iconName],\r\n        size: size,\r\n        color: color,\r\n        semanticLabel: iconName,\r\n      );\r\n    } else {\r\n      // Return a fallback icon\r\n      return Icon(\r\n        Icons.help_outline,\r\n        size: size,\r\n        color: Colors.grey,\r\n        semanticLabel: '$iconName',\r\n      );\r\n    }\r\n  }\r\n}\r\n",
      "custom_image_widget.dart": "import 'package:flutter/material.dart';\r\nimport 'package:cached_network_image/cached_network_image.dart';\r\n\r\nclass CustomImageWidget extends StatelessWidget {\r\n  final String? imageUrl;\r\n  final double width;\r\n  final double height;\r\n  final BoxFit fit;\r\n\r\n  /// Optional widget to show when the image fails to load.\r\n  /// If null, a default asset image is shown.\r\n  final Widget? errorWidget;\r\n\r\n  const CustomImageWidget({\r\n    Key? key,\r\n    required this.imageUrl,\r\n    this.width = 60,\r\n    this.height = 60,\r\n    this.fit = BoxFit.cover,\r\n    this.errorWidget,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CachedNetworkImage(\r\n      imageUrl: imageUrl ??\r\n          'https://images.unsplash.com/photo-1584824486509-112e4181ff6b?q=80&w=2940&auto=format&fit=crop',\r\n      width: width,\r\n      height: height,\r\n      fit: fit,\r\n\r\n      // Use caller-supplied widget if provided, else fallback asset.\r\n      errorWidget: (context, url, error) =>\r\n          errorWidget ??\r\n          Image.asset(\r\n            \"assets/images/no-image.jpg\",\r\n            fit: fit,\r\n            width: width,\r\n            height: height,\r\n          ),\r\n\r\n      placeholder: (context, url) => Container(\r\n        width: width,\r\n        height: height,\r\n        color: Colors.grey[200],\r\n        child: const Center(child: CircularProgressIndicator()),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
    }
  },
  "supabase": {
    "migrations": {
      "20250802050708_university_social_platform.sql": "-- Location: supabase/migrations/20250802050708_university_social_platform.sql\r\n-- Schema Analysis: Fresh project - no existing schema\r\n-- Module: University Social Platform (Twitter-like for universities)\r\n-- Dependencies: Creates complete authentication and post management system\r\n\r\n-- 1. Extensions & Types\r\nCREATE TYPE public.user_role AS ENUM ('student', 'admin');\r\nCREATE TYPE public.post_status AS ENUM ('active', 'archived', 'draft');\r\n\r\n-- 2. Core Tables\r\nCREATE TABLE public.user_profiles (\r\n    id UUID PRIMARY KEY REFERENCES auth.users(id),\r\n    email TEXT NOT NULL UNIQUE,\r\n    full_name TEXT NOT NULL,\r\n    role public.user_role DEFAULT 'student'::public.user_role,\r\n    university_id TEXT DEFAULT 'default_uni',\r\n    department TEXT,\r\n    student_id TEXT,\r\n    profile_image_url TEXT,\r\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\nCREATE TABLE public.posts (\r\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n    author_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,\r\n    title TEXT NOT NULL,\r\n    content TEXT NOT NULL,\r\n    image_url TEXT,\r\n    status public.post_status DEFAULT 'active'::public.post_status,\r\n    is_featured BOOLEAN DEFAULT false,\r\n    view_count INTEGER DEFAULT 0,\r\n    like_count INTEGER DEFAULT 0,\r\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\nCREATE TABLE public.post_categories (\r\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n    name TEXT NOT NULL UNIQUE,\r\n    description TEXT,\r\n    color_code TEXT DEFAULT '#3B82F6',\r\n    is_system_category BOOLEAN DEFAULT false,\r\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\nCREATE TABLE public.post_likes (\r\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n    post_id UUID REFERENCES public.posts(id) ON DELETE CASCADE,\r\n    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,\r\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\r\n    UNIQUE(post_id, user_id)\r\n);\r\n\r\n-- Junction table for post categories\r\nCREATE TABLE public.post_category_assignments (\r\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n    post_id UUID REFERENCES public.posts(id) ON DELETE CASCADE,\r\n    category_id UUID REFERENCES public.post_categories(id) ON DELETE CASCADE,\r\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\r\n    UNIQUE(post_id, category_id)\r\n);\r\n\r\n-- 3. Essential Indexes\r\nCREATE INDEX idx_user_profiles_role ON public.user_profiles(role);\r\nCREATE INDEX idx_user_profiles_university ON public.user_profiles(university_id);\r\nCREATE INDEX idx_posts_author_id ON public.posts(author_id);\r\nCREATE INDEX idx_posts_status ON public.posts(status);\r\nCREATE INDEX idx_posts_created_at ON public.posts(created_at DESC);\r\nCREATE INDEX idx_posts_featured ON public.posts(is_featured) WHERE is_featured = true;\r\nCREATE INDEX idx_post_likes_post_id ON public.post_likes(post_id);\r\nCREATE INDEX idx_post_likes_user_id ON public.post_likes(user_id);\r\nCREATE INDEX idx_post_category_assignments_post_id ON public.post_category_assignments(post_id);\r\n\r\n-- 4. Functions (MUST BE BEFORE RLS POLICIES)\r\nCREATE OR REPLACE FUNCTION public.is_admin_from_auth()\r\nRETURNS BOOLEAN\r\nLANGUAGE sql\r\nSTABLE\r\nSECURITY DEFINER\r\nAS $$\r\nSELECT EXISTS (\r\n    SELECT 1 FROM auth.users au\r\n    WHERE au.id = auth.uid() \r\n    AND (au.raw_user_meta_data->>'role' = 'admin' \r\n         OR au.raw_app_meta_data->>'role' = 'admin')\r\n)\r\n$$;\r\n\r\nCREATE OR REPLACE FUNCTION public.handle_new_user()\r\nRETURNS TRIGGER\r\nSECURITY DEFINER\r\nLANGUAGE plpgsql\r\nAS $$\r\nBEGIN\r\n  INSERT INTO public.user_profiles (id, email, full_name, role)\r\n  VALUES (\r\n    NEW.id, \r\n    NEW.email, \r\n    COALESCE(NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1)),\r\n    COALESCE((NEW.raw_user_meta_data->>'role')::public.user_role, 'student'::public.user_role)\r\n  );  \r\n  RETURN NEW;\r\nEND;\r\n$$;\r\n\r\nCREATE OR REPLACE FUNCTION public.update_post_like_count()\r\nRETURNS TRIGGER\r\nLANGUAGE plpgsql\r\nSECURITY DEFINER\r\nAS $$\r\nBEGIN\r\n    IF TG_OP = 'INSERT' THEN\r\n        UPDATE public.posts \r\n        SET like_count = like_count + 1 \r\n        WHERE id = NEW.post_id;\r\n        RETURN NEW;\r\n    ELSIF TG_OP = 'DELETE' THEN\r\n        UPDATE public.posts \r\n        SET like_count = like_count - 1 \r\n        WHERE id = OLD.post_id;\r\n        RETURN OLD;\r\n    END IF;\r\n    RETURN NULL;\r\nEND;\r\n$$;\r\n\r\n-- 5. RLS Setup\r\nALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE public.post_categories ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE public.post_likes ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE public.post_category_assignments ENABLE ROW LEVEL SECURITY;\r\n\r\n-- 6. RLS Policies (Using Pattern 1 for user_profiles, Pattern 4 for posts)\r\n\r\n-- Pattern 1: Core user table (user_profiles) - Simple only, no functions\r\nCREATE POLICY \"users_manage_own_user_profiles\"\r\nON public.user_profiles\r\nFOR ALL\r\nTO authenticated\r\nUSING (id = auth.uid())\r\nWITH CHECK (id = auth.uid());\r\n\r\n-- Pattern 4: Public read, private write for posts\r\nCREATE POLICY \"public_can_read_posts\"\r\nON public.posts\r\nFOR SELECT\r\nTO public\r\nUSING (status = 'active'::public.post_status);\r\n\r\nCREATE POLICY \"admins_manage_all_posts\"\r\nON public.posts\r\nFOR ALL\r\nTO authenticated\r\nUSING (public.is_admin_from_auth())\r\nWITH CHECK (public.is_admin_from_auth());\r\n\r\n-- Pattern 4: Public read for categories\r\nCREATE POLICY \"public_can_read_categories\"\r\nON public.post_categories\r\nFOR SELECT\r\nTO public\r\nUSING (true);\r\n\r\nCREATE POLICY \"admins_manage_categories\"\r\nON public.post_categories\r\nFOR ALL\r\nTO authenticated\r\nUSING (public.is_admin_from_auth())\r\nWITH CHECK (public.is_admin_from_auth());\r\n\r\n-- Pattern 2: Simple user ownership for likes\r\nCREATE POLICY \"users_manage_own_likes\"\r\nON public.post_likes\r\nFOR ALL\r\nTO authenticated\r\nUSING (user_id = auth.uid())\r\nWITH CHECK (user_id = auth.uid());\r\n\r\n-- Pattern 4: Public read for category assignments\r\nCREATE POLICY \"public_can_read_assignments\"\r\nON public.post_category_assignments\r\nFOR SELECT\r\nTO public\r\nUSING (true);\r\n\r\nCREATE POLICY \"admins_manage_assignments\"\r\nON public.post_category_assignments\r\nFOR ALL\r\nTO authenticated\r\nUSING (public.is_admin_from_auth())\r\nWITH CHECK (public.is_admin_from_auth());\r\n\r\n-- 7. Triggers\r\nCREATE TRIGGER on_auth_user_created\r\n  AFTER INSERT ON auth.users\r\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\r\n\r\nCREATE TRIGGER update_like_count_trigger\r\n  AFTER INSERT OR DELETE ON public.post_likes\r\n  FOR EACH ROW EXECUTE FUNCTION public.update_post_like_count();\r\n\r\n-- 8. Mock Data\r\nDO $$\r\nDECLARE\r\n    admin_uuid UUID := gen_random_uuid();\r\n    student1_uuid UUID := gen_random_uuid();\r\n    student2_uuid UUID := gen_random_uuid();\r\n    general_category_id UUID := gen_random_uuid();\r\n    events_category_id UUID := gen_random_uuid();\r\n    post1_id UUID := gen_random_uuid();\r\n    post2_id UUID := gen_random_uuid();\r\n    post3_id UUID := gen_random_uuid();\r\nBEGIN\r\n    -- Create auth users with required fields\r\n    INSERT INTO auth.users (\r\n        id, instance_id, aud, role, email, encrypted_password, email_confirmed_at,\r\n        created_at, updated_at, raw_user_meta_data, raw_app_meta_data,\r\n        is_sso_user, is_anonymous, confirmation_token, confirmation_sent_at,\r\n        recovery_token, recovery_sent_at, email_change_token_new, email_change,\r\n        email_change_sent_at, email_change_token_current, email_change_confirm_status,\r\n        reauthentication_token, reauthentication_sent_at, phone, phone_change,\r\n        phone_change_token, phone_change_sent_at\r\n    ) VALUES\r\n        (admin_uuid, '00000000-0000-0000-0000-000000000000', 'authenticated', 'authenticated',\r\n         'admin@university.edu', crypt('admin123', gen_salt('bf', 10)), now(), now(), now(),\r\n         '{\"full_name\": \"Dr. Sarah Johnson\", \"role\": \"admin\"}'::jsonb, '{\"provider\": \"email\", \"providers\": [\"email\"]}'::jsonb,\r\n         false, false, '', null, '', null, '', '', null, '', 0, '', null, null, '', '', null),\r\n        (student1_uuid, '00000000-0000-0000-0000-000000000000', 'authenticated', 'authenticated',\r\n         'john.doe@student.edu', crypt('student123', gen_salt('bf', 10)), now(), now(), now(),\r\n         '{\"full_name\": \"John Doe\", \"role\": \"student\"}'::jsonb, '{\"provider\": \"email\", \"providers\": [\"email\"]}'::jsonb,\r\n         false, false, '', null, '', null, '', '', null, '', 0, '', null, null, '', '', null),\r\n        (student2_uuid, '00000000-0000-0000-0000-000000000000', 'authenticated', 'authenticated',\r\n         'jane.smith@student.edu', crypt('student123', gen_salt('bf', 10)), now(), now(), now(),\r\n         '{\"full_name\": \"Jane Smith\", \"role\": \"student\"}'::jsonb, '{\"provider\": \"email\", \"providers\": [\"email\"]}'::jsonb,\r\n         false, false, '', null, '', null, '', '', null, '', 0, '', null, null, '', '', null);\r\n\r\n    -- Create categories\r\n    INSERT INTO public.post_categories (id, name, description, color_code, is_system_category) VALUES\r\n        (general_category_id, 'General', 'General university announcements and news', '#3B82F6', true),\r\n        (events_category_id, 'Events', 'University events and activities', '#10B981', true);\r\n\r\n    -- Create posts\r\n    INSERT INTO public.posts (id, author_id, title, content, status, is_featured) VALUES\r\n        (post1_id, admin_uuid, 'Welcome to the New Academic Year!', \r\n         'We are excited to welcome all new and returning students to the 2025 academic year. This semester brings new opportunities, exciting courses, and amazing events. Stay tuned for more updates throughout the semester.', \r\n         'active'::public.post_status, true),\r\n        (post2_id, admin_uuid, 'Library Hours Extended for Finals Week', \r\n         'Starting next week, the main library will extend its hours to support students during finals. The library will be open 24/7 from Monday through Friday. Additional study spaces have been set up in the student center.', \r\n         'active'::public.post_status, false),\r\n        (post3_id, admin_uuid, 'Spring Career Fair - March 15th', \r\n         'Join us for the annual Spring Career Fair on March 15th from 10 AM to 4 PM in the main gymnasium. Over 50 companies will be present with internship and full-time opportunities. Professional attire is encouraged.', \r\n         'active'::public.post_status, true);\r\n\r\n    -- Create category assignments\r\n    INSERT INTO public.post_category_assignments (post_id, category_id) VALUES\r\n        (post1_id, general_category_id),\r\n        (post2_id, general_category_id),\r\n        (post3_id, events_category_id);\r\n\r\n    -- Create some likes\r\n    INSERT INTO public.post_likes (post_id, user_id) VALUES\r\n        (post1_id, student1_uuid),\r\n        (post1_id, student2_uuid),\r\n        (post2_id, student1_uuid),\r\n        (post3_id, student2_uuid);\r\n\r\nEXCEPTION\r\n    WHEN foreign_key_violation THEN\r\n        RAISE NOTICE 'Foreign key error: %', SQLERRM;\r\n    WHEN unique_violation THEN\r\n        RAISE NOTICE 'Unique constraint error: %', SQLERRM;\r\n    WHEN OTHERS THEN\r\n        RAISE NOTICE 'Unexpected error: %', SQLERRM;\r\nEND $$;\r\n\r\n-- Select statement to verify data\r\nSELECT 'University social platform created successfully, sample records:' as message;\r\nSELECT p.title, p.content, up.full_name as author, p.created_at \r\nFROM public.posts p \r\nJOIN public.user_profiles up ON p.author_id = up.id \r\nLIMIT 3;"
    }
  }
}